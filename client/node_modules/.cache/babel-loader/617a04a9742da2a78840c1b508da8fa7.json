{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useCallback, useEffect } from 'react';\nexport const useScreenSize = () => {\n  _s();\n\n  const [screenSize, setScreenSize] = useState(getScreenSize());\n  const onSizeChanged = useCallback(() => {\n    setScreenSize(getScreenSize());\n  }, []);\n  useEffect(() => {\n    subscribe(onSizeChanged);\n    return () => {\n      unsubscribe(onSizeChanged);\n    };\n  }, [onSizeChanged]);\n  return screenSize;\n};\n\n_s(useScreenSize, \"dGCBkZ8R+Ar6NjNL0xMFctSG1JU=\");\n\nexport const useScreenSizeClass = () => {\n  _s2();\n\n  const screenSize = useScreenSize();\n\n  if (screenSize.isLarge) {\n    return 'screen-large';\n  }\n\n  if (screenSize.isMedium) {\n    return 'screen-medium';\n  }\n\n  if (screenSize.isSmall) {\n    return 'screen-small';\n  }\n\n  return 'screen-x-small';\n};\n\n_s2(useScreenSizeClass, \"Az9rJUgKUY00qPUUgMtIxbkNJMY=\", false, function () {\n  return [useScreenSize];\n});\n\nlet handlers = [];\nconst xSmallMedia = window.matchMedia('(max-width: 599.99px)');\nconst smallMedia = window.matchMedia('(min-width: 600px) and (max-width: 959.99px)');\nconst mediumMedia = window.matchMedia('(min-width: 960px) and (max-width: 1279.99px)');\nconst largeMedia = window.matchMedia('(min-width: 1280px)');\n[xSmallMedia, smallMedia, mediumMedia, largeMedia].forEach(media => {\n  media.addListener(e => {\n    e.matches && handlers.forEach(handler => handler());\n  });\n});\n\nconst subscribe = handler => handlers.push(handler);\n\nconst unsubscribe = handler => {\n  handlers = handlers.filter(item => item !== handler);\n};\n\nfunction getScreenSize() {\n  return {\n    isXSmall: xSmallMedia.matches,\n    isSmall: smallMedia.matches,\n    isMedium: mediumMedia.matches,\n    isLarge: largeMedia.matches\n  };\n}","map":{"version":3,"sources":["/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/utils/media-query.js"],"names":["useState","useCallback","useEffect","useScreenSize","screenSize","setScreenSize","getScreenSize","onSizeChanged","subscribe","unsubscribe","useScreenSizeClass","isLarge","isMedium","isSmall","handlers","xSmallMedia","window","matchMedia","smallMedia","mediumMedia","largeMedia","forEach","media","addListener","e","matches","handler","push","filter","item","isXSmall"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAiD,OAAjD;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACjC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAACM,aAAa,EAAd,CAA5C;AACA,QAAMC,aAAa,GAAGN,WAAW,CAAC,MAAM;AACtCI,IAAAA,aAAa,CAACC,aAAa,EAAd,CAAb;AACD,GAFgC,EAE9B,EAF8B,CAAjC;AAIAJ,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,SAAS,CAACD,aAAD,CAAT;AAEA,WAAO,MAAM;AACXE,MAAAA,WAAW,CAACF,aAAD,CAAX;AACD,KAFD;AAGD,GANQ,EAMN,CAACA,aAAD,CANM,CAAT;AAQA,SAAOH,UAAP;AACD,CAfM;;GAAMD,a;;AAiBb,OAAO,MAAMO,kBAAkB,GAAG,MAAM;AAAA;;AACtC,QAAMN,UAAU,GAAGD,aAAa,EAAhC;;AAEA,MAAIC,UAAU,CAACO,OAAf,EAAwB;AACtB,WAAO,cAAP;AACD;;AAED,MAAIP,UAAU,CAACQ,QAAf,EAAyB;AACvB,WAAO,eAAP;AACD;;AAED,MAAIR,UAAU,CAACS,OAAf,EAAwB;AACtB,WAAO,cAAP;AACD;;AAED,SAAO,gBAAP;AACD,CAhBM;;IAAMH,kB;UACQP,a;;;AAiBrB,IAAIW,QAAQ,GAAG,EAAf;AACA,MAAMC,WAAW,GAAGC,MAAM,CAACC,UAAP,CAAkB,uBAAlB,CAApB;AACA,MAAMC,UAAU,GAAGF,MAAM,CAACC,UAAP,CAAkB,8CAAlB,CAAnB;AACA,MAAME,WAAW,GAAGH,MAAM,CAACC,UAAP,CAAkB,+CAAlB,CAApB;AACA,MAAMG,UAAU,GAAGJ,MAAM,CAACC,UAAP,CAAkB,qBAAlB,CAAnB;AAEA,CAACF,WAAD,EAAcG,UAAd,EAA0BC,WAA1B,EAAuCC,UAAvC,EAAmDC,OAAnD,CAA2DC,KAAK,IAAI;AAClEA,EAAAA,KAAK,CAACC,WAAN,CAAmBC,CAAD,IAAO;AACvBA,IAAAA,CAAC,CAACC,OAAF,IAAaX,QAAQ,CAACO,OAAT,CAAiBK,OAAO,IAAIA,OAAO,EAAnC,CAAb;AACD,GAFD;AAGD,CAJD;;AAMA,MAAMlB,SAAS,GAAGkB,OAAO,IAAIZ,QAAQ,CAACa,IAAT,CAAcD,OAAd,CAA7B;;AAEA,MAAMjB,WAAW,GAAGiB,OAAO,IAAI;AAC7BZ,EAAAA,QAAQ,GAAGA,QAAQ,CAACc,MAAT,CAAgBC,IAAI,IAAIA,IAAI,KAAKH,OAAjC,CAAX;AACD,CAFD;;AAIA,SAASpB,aAAT,GAAyB;AACvB,SAAO;AACLwB,IAAAA,QAAQ,EAAEf,WAAW,CAACU,OADjB;AAELZ,IAAAA,OAAO,EAAEK,UAAU,CAACO,OAFf;AAGLb,IAAAA,QAAQ,EAAEO,WAAW,CAACM,OAHjB;AAILd,IAAAA,OAAO,EAAES,UAAU,CAACK;AAJf,GAAP;AAMD","sourcesContent":["import { useState, useCallback, useEffect } from 'react';\n\nexport const useScreenSize = () => {\n  const [screenSize, setScreenSize] = useState(getScreenSize());\n  const onSizeChanged = useCallback(() => {\n    setScreenSize(getScreenSize());\n  }, []);\n\n  useEffect(() => {\n    subscribe(onSizeChanged);\n\n    return () => {\n      unsubscribe(onSizeChanged);\n    };\n  }, [onSizeChanged]);\n\n  return screenSize;\n};\n\nexport const useScreenSizeClass = () => {\n  const screenSize = useScreenSize();\n\n  if (screenSize.isLarge) {\n    return 'screen-large';\n  }\n\n  if (screenSize.isMedium) {\n    return 'screen-medium';\n  }\n\n  if (screenSize.isSmall) {\n    return 'screen-small';\n  }\n\n  return 'screen-x-small';\n}\n\nlet handlers = [];\nconst xSmallMedia = window.matchMedia('(max-width: 599.99px)');\nconst smallMedia = window.matchMedia('(min-width: 600px) and (max-width: 959.99px)');\nconst mediumMedia = window.matchMedia('(min-width: 960px) and (max-width: 1279.99px)');\nconst largeMedia = window.matchMedia('(min-width: 1280px)');\n\n[xSmallMedia, smallMedia, mediumMedia, largeMedia].forEach(media => {\n  media.addListener((e) => {\n    e.matches && handlers.forEach(handler => handler());\n  });\n});\n\nconst subscribe = handler => handlers.push(handler);\n\nconst unsubscribe = handler => {\n  handlers = handlers.filter(item => item !== handler);\n};\n\nfunction getScreenSize() {\n  return {\n    isXSmall: xSmallMedia.matches,\n    isSmall: smallMedia.matches,\n    isMedium: mediumMedia.matches,\n    isLarge: largeMedia.matches\n  };\n}\n"]},"metadata":{},"sourceType":"module"}