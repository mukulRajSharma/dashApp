{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/drawer/ui.drawer.rendering.strategy.overlap.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { animation } from \"./ui.drawer.animation\";\nimport DrawerStrategy from \"./ui.drawer.rendering.strategy\";\nimport $ from \"../../core/renderer\";\nimport { move } from \"../../animation/translator\";\nimport Overlay from \"../overlay/ui.overlay\";\nimport { ensureDefined } from \"../../core/utils/common\";\nimport { camelize } from \"../../core/utils/inflector\";\n\nclass OverlapStrategy extends DrawerStrategy {\n  renderPanelContent(whenPanelContentRendered) {\n    delete this._initialPosition;\n    var drawer = this.getDrawerInstance();\n    var {\n      opened: opened,\n      minSize: minSize\n    } = drawer.option();\n    drawer._overlay = drawer._createComponent(drawer.content(), Overlay, {\n      shading: false,\n      container: drawer.getOverlayTarget(),\n      position: this._getOverlayPosition(),\n      width: opened ? \"auto\" : minSize || 0,\n      height: \"100%\",\n      templatesRenderAsynchronously: drawer.option(\"templatesRenderAsynchronously\"),\n      animation: {\n        show: {\n          duration: 0\n        }\n      },\n      onPositioned: function (e) {\n        this._fixOverlayPosition(e.component.$content());\n      }.bind(this),\n      contentTemplate: drawer.option(\"template\"),\n      onContentReady: args => {\n        whenPanelContentRendered.resolve();\n\n        this._processOverlayZIndex(args.component.content());\n      },\n      visible: true,\n      propagateOutsideClick: true\n    });\n  }\n\n  _fixOverlayPosition($overlayContent) {\n    var position = ensureDefined(this._initialPosition, {\n      left: 0,\n      top: 0\n    });\n    move($overlayContent, position);\n\n    if (\"right\" === this.getDrawerInstance().calcTargetPosition()) {\n      $overlayContent.css(\"left\", \"auto\");\n    }\n\n    if (\"bottom\" === this.getDrawerInstance().calcTargetPosition()) {\n      $overlayContent.css(\"top\", \"auto\");\n      $overlayContent.css(\"bottom\", \"0px\");\n    }\n  }\n\n  _getOverlayPosition() {\n    var drawer = this.getDrawerInstance();\n    var panelPosition = drawer.calcTargetPosition();\n    var result = {};\n\n    switch (panelPosition) {\n      case \"left\":\n        result = {\n          my: \"top left\",\n          at: \"top left\"\n        };\n        break;\n\n      case \"right\":\n        result = {\n          my: drawer.option(\"rtlEnabled\") ? \"top left\" : \"top right\",\n          at: \"top right\"\n        };\n        break;\n\n      case \"top\":\n      case \"bottom\":\n        result = {\n          my: panelPosition,\n          at: panelPosition\n        };\n    }\n\n    result.of = drawer.getOverlayTarget();\n    return result;\n  }\n\n  refreshPanelElementSize(calcFromRealPanelSize) {\n    var drawer = this.getDrawerInstance();\n    var overlay = drawer.getOverlay();\n\n    if (drawer.isHorizontalDirection()) {\n      overlay.option(\"height\", \"100%\");\n      overlay.option(\"width\", calcFromRealPanelSize ? drawer.getRealPanelWidth() : this._getPanelSize(drawer.option(\"opened\")));\n    } else {\n      overlay.option(\"width\", overlay.option(\"container\").width());\n      overlay.option(\"height\", calcFromRealPanelSize ? drawer.getRealPanelHeight() : this._getPanelSize(drawer.option(\"opened\")));\n    }\n  }\n\n  onPanelContentRendered() {\n    this._updateViewContentStyles();\n  }\n\n  _updateViewContentStyles() {\n    var drawer = this.getDrawerInstance();\n    $(drawer.viewContent()).css(\"padding\" + camelize(drawer.calcTargetPosition(), true), drawer.option(\"minSize\"));\n    $(drawer.viewContent()).css(\"transform\", \"inherit\");\n  }\n\n  _internalRenderPosition(changePositionUsingFxAnimation, whenAnimationCompleted) {\n    var drawer = this.getDrawerInstance();\n    var $panel = $(drawer.content());\n    var $panelOverlayContent = drawer.getOverlay().$content();\n    var revealMode = drawer.option(\"revealMode\");\n    var targetPanelPosition = drawer.calcTargetPosition();\n\n    var panelSize = this._getPanelSize(drawer.option(\"opened\"));\n\n    var panelOffset = this._getPanelOffset(drawer.option(\"opened\")) * drawer._getPositionCorrection();\n\n    var marginTop = drawer.getRealPanelHeight() - panelSize;\n\n    this._updateViewContentStyles();\n\n    if (changePositionUsingFxAnimation) {\n      if (\"slide\" === revealMode) {\n        this._initialPosition = drawer.isHorizontalDirection() ? {\n          left: panelOffset\n        } : {\n          top: panelOffset\n        };\n        animation.moveTo({\n          complete: () => {\n            whenAnimationCompleted.resolve();\n          },\n          duration: drawer.option(\"animationDuration\"),\n          direction: targetPanelPosition,\n          $element: $panel,\n          position: panelOffset\n        });\n      } else if (\"expand\" === revealMode) {\n        this._initialPosition = {\n          left: 0\n        };\n        move($panelOverlayContent, this._initialPosition);\n        animation.size({\n          complete: () => {\n            whenAnimationCompleted.resolve();\n          },\n          duration: drawer.option(\"animationDuration\"),\n          direction: targetPanelPosition,\n          $element: $panelOverlayContent,\n          size: panelSize,\n          marginTop: marginTop\n        });\n      }\n    } else if (\"slide\" === revealMode) {\n      this._initialPosition = drawer.isHorizontalDirection() ? {\n        left: panelOffset\n      } : {\n        top: panelOffset\n      };\n      move($panel, this._initialPosition);\n    } else if (\"expand\" === revealMode) {\n      this._initialPosition = {\n        left: 0\n      };\n      move($panelOverlayContent, this._initialPosition);\n\n      if (drawer.isHorizontalDirection()) {\n        $($panelOverlayContent).css(\"width\", panelSize);\n      } else {\n        $($panelOverlayContent).css(\"height\", panelSize);\n\n        if (\"bottom\" === targetPanelPosition) {\n          $($panelOverlayContent).css(\"marginTop\", marginTop);\n        }\n      }\n    }\n  }\n\n  getPanelContent() {\n    return $(this.getDrawerInstance().getOverlay().content());\n  }\n\n  _processOverlayZIndex($element) {\n    var styles = $($element).get(0).style;\n    var zIndex = styles.zIndex || 1;\n    this.getDrawerInstance().setZIndex(zIndex);\n  }\n\n  isViewContentFirst(position) {\n    return \"right\" === position || \"bottom\" === position;\n  }\n\n}\n\nexport default OverlapStrategy;","map":{"version":3,"sources":["/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/node_modules/devextreme/esm/ui/drawer/ui.drawer.rendering.strategy.overlap.js"],"names":["animation","DrawerStrategy","$","move","Overlay","ensureDefined","camelize","OverlapStrategy","renderPanelContent","whenPanelContentRendered","_initialPosition","drawer","getDrawerInstance","opened","minSize","option","_overlay","_createComponent","content","shading","container","getOverlayTarget","position","_getOverlayPosition","width","height","templatesRenderAsynchronously","show","duration","onPositioned","e","_fixOverlayPosition","component","$content","bind","contentTemplate","onContentReady","args","resolve","_processOverlayZIndex","visible","propagateOutsideClick","$overlayContent","left","top","calcTargetPosition","css","panelPosition","result","my","at","of","refreshPanelElementSize","calcFromRealPanelSize","overlay","getOverlay","isHorizontalDirection","getRealPanelWidth","_getPanelSize","getRealPanelHeight","onPanelContentRendered","_updateViewContentStyles","viewContent","_internalRenderPosition","changePositionUsingFxAnimation","whenAnimationCompleted","$panel","$panelOverlayContent","revealMode","targetPanelPosition","panelSize","panelOffset","_getPanelOffset","_getPositionCorrection","marginTop","moveTo","complete","direction","$element","size","getPanelContent","styles","get","style","zIndex","setZIndex","isViewContentFirst"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/drawer/ui.drawer.rendering.strategy.overlap.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    animation\r\n} from \"./ui.drawer.animation\";\r\nimport DrawerStrategy from \"./ui.drawer.rendering.strategy\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    move\r\n} from \"../../animation/translator\";\r\nimport Overlay from \"../overlay/ui.overlay\";\r\nimport {\r\n    ensureDefined\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    camelize\r\n} from \"../../core/utils/inflector\";\r\nclass OverlapStrategy extends DrawerStrategy {\r\n    renderPanelContent(whenPanelContentRendered) {\r\n        delete this._initialPosition;\r\n        var drawer = this.getDrawerInstance();\r\n        var {\r\n            opened: opened,\r\n            minSize: minSize\r\n        } = drawer.option();\r\n        drawer._overlay = drawer._createComponent(drawer.content(), Overlay, {\r\n            shading: false,\r\n            container: drawer.getOverlayTarget(),\r\n            position: this._getOverlayPosition(),\r\n            width: opened ? \"auto\" : minSize || 0,\r\n            height: \"100%\",\r\n            templatesRenderAsynchronously: drawer.option(\"templatesRenderAsynchronously\"),\r\n            animation: {\r\n                show: {\r\n                    duration: 0\r\n                }\r\n            },\r\n            onPositioned: function(e) {\r\n                this._fixOverlayPosition(e.component.$content())\r\n            }.bind(this),\r\n            contentTemplate: drawer.option(\"template\"),\r\n            onContentReady: args => {\r\n                whenPanelContentRendered.resolve();\r\n                this._processOverlayZIndex(args.component.content())\r\n            },\r\n            visible: true,\r\n            propagateOutsideClick: true\r\n        })\r\n    }\r\n    _fixOverlayPosition($overlayContent) {\r\n        var position = ensureDefined(this._initialPosition, {\r\n            left: 0,\r\n            top: 0\r\n        });\r\n        move($overlayContent, position);\r\n        if (\"right\" === this.getDrawerInstance().calcTargetPosition()) {\r\n            $overlayContent.css(\"left\", \"auto\")\r\n        }\r\n        if (\"bottom\" === this.getDrawerInstance().calcTargetPosition()) {\r\n            $overlayContent.css(\"top\", \"auto\");\r\n            $overlayContent.css(\"bottom\", \"0px\")\r\n        }\r\n    }\r\n    _getOverlayPosition() {\r\n        var drawer = this.getDrawerInstance();\r\n        var panelPosition = drawer.calcTargetPosition();\r\n        var result = {};\r\n        switch (panelPosition) {\r\n            case \"left\":\r\n                result = {\r\n                    my: \"top left\",\r\n                    at: \"top left\"\r\n                };\r\n                break;\r\n            case \"right\":\r\n                result = {\r\n                    my: drawer.option(\"rtlEnabled\") ? \"top left\" : \"top right\",\r\n                    at: \"top right\"\r\n                };\r\n                break;\r\n            case \"top\":\r\n            case \"bottom\":\r\n                result = {\r\n                    my: panelPosition,\r\n                    at: panelPosition\r\n                }\r\n        }\r\n        result.of = drawer.getOverlayTarget();\r\n        return result\r\n    }\r\n    refreshPanelElementSize(calcFromRealPanelSize) {\r\n        var drawer = this.getDrawerInstance();\r\n        var overlay = drawer.getOverlay();\r\n        if (drawer.isHorizontalDirection()) {\r\n            overlay.option(\"height\", \"100%\");\r\n            overlay.option(\"width\", calcFromRealPanelSize ? drawer.getRealPanelWidth() : this._getPanelSize(drawer.option(\"opened\")))\r\n        } else {\r\n            overlay.option(\"width\", overlay.option(\"container\").width());\r\n            overlay.option(\"height\", calcFromRealPanelSize ? drawer.getRealPanelHeight() : this._getPanelSize(drawer.option(\"opened\")))\r\n        }\r\n    }\r\n    onPanelContentRendered() {\r\n        this._updateViewContentStyles()\r\n    }\r\n    _updateViewContentStyles() {\r\n        var drawer = this.getDrawerInstance();\r\n        $(drawer.viewContent()).css(\"padding\" + camelize(drawer.calcTargetPosition(), true), drawer.option(\"minSize\"));\r\n        $(drawer.viewContent()).css(\"transform\", \"inherit\")\r\n    }\r\n    _internalRenderPosition(changePositionUsingFxAnimation, whenAnimationCompleted) {\r\n        var drawer = this.getDrawerInstance();\r\n        var $panel = $(drawer.content());\r\n        var $panelOverlayContent = drawer.getOverlay().$content();\r\n        var revealMode = drawer.option(\"revealMode\");\r\n        var targetPanelPosition = drawer.calcTargetPosition();\r\n        var panelSize = this._getPanelSize(drawer.option(\"opened\"));\r\n        var panelOffset = this._getPanelOffset(drawer.option(\"opened\")) * drawer._getPositionCorrection();\r\n        var marginTop = drawer.getRealPanelHeight() - panelSize;\r\n        this._updateViewContentStyles();\r\n        if (changePositionUsingFxAnimation) {\r\n            if (\"slide\" === revealMode) {\r\n                this._initialPosition = drawer.isHorizontalDirection() ? {\r\n                    left: panelOffset\r\n                } : {\r\n                    top: panelOffset\r\n                };\r\n                animation.moveTo({\r\n                    complete: () => {\r\n                        whenAnimationCompleted.resolve()\r\n                    },\r\n                    duration: drawer.option(\"animationDuration\"),\r\n                    direction: targetPanelPosition,\r\n                    $element: $panel,\r\n                    position: panelOffset\r\n                })\r\n            } else if (\"expand\" === revealMode) {\r\n                this._initialPosition = {\r\n                    left: 0\r\n                };\r\n                move($panelOverlayContent, this._initialPosition);\r\n                animation.size({\r\n                    complete: () => {\r\n                        whenAnimationCompleted.resolve()\r\n                    },\r\n                    duration: drawer.option(\"animationDuration\"),\r\n                    direction: targetPanelPosition,\r\n                    $element: $panelOverlayContent,\r\n                    size: panelSize,\r\n                    marginTop: marginTop\r\n                })\r\n            }\r\n        } else if (\"slide\" === revealMode) {\r\n            this._initialPosition = drawer.isHorizontalDirection() ? {\r\n                left: panelOffset\r\n            } : {\r\n                top: panelOffset\r\n            };\r\n            move($panel, this._initialPosition)\r\n        } else if (\"expand\" === revealMode) {\r\n            this._initialPosition = {\r\n                left: 0\r\n            };\r\n            move($panelOverlayContent, this._initialPosition);\r\n            if (drawer.isHorizontalDirection()) {\r\n                $($panelOverlayContent).css(\"width\", panelSize)\r\n            } else {\r\n                $($panelOverlayContent).css(\"height\", panelSize);\r\n                if (\"bottom\" === targetPanelPosition) {\r\n                    $($panelOverlayContent).css(\"marginTop\", marginTop)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getPanelContent() {\r\n        return $(this.getDrawerInstance().getOverlay().content())\r\n    }\r\n    _processOverlayZIndex($element) {\r\n        var styles = $($element).get(0).style;\r\n        var zIndex = styles.zIndex || 1;\r\n        this.getDrawerInstance().setZIndex(zIndex)\r\n    }\r\n    isViewContentFirst(position) {\r\n        return \"right\" === position || \"bottom\" === position\r\n    }\r\n}\r\nexport default OverlapStrategy;\r\n"]},"metadata":{},"sourceType":"module"}