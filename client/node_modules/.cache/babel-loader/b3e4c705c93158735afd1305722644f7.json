{"ast":null,"code":"var _jsxFileName = \"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/create-account-form/create-account-form.js\";\nimport React, { useState, useRef, useCallback } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport Form, { Item, Label, ButtonItem, ButtonOptions, RequiredRule, CustomRule, EmailRule } from 'devextreme-react/form';\nimport notify from 'devextreme/ui/notify';\nimport LoadIndicator from 'devextreme-react/load-indicator';\nimport { createAccount } from '../../api/auth';\nimport './create-account-form.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function (props) {\n  const history = useHistory();\n  const [loading, setLoading] = useState(false);\n  const formData = useRef({});\n  const onSubmit = useCallback(async e => {\n    e.preventDefault();\n    const {\n      email,\n      password\n    } = formData.current;\n    setLoading(true);\n    const result = await createAccount(email, password);\n    setLoading(false);\n\n    if (result.isOk) {\n      history.push('/login');\n    } else {\n      notify(result.message, 'error', 2000);\n    }\n  }, [history]);\n  const confirmPassword = useCallback(({\n    value\n  }) => value === formData.current.password, []);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: 'create-account-form',\n    onSubmit: onSubmit,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      formData: formData.current,\n      disabled: loading,\n      children: [/*#__PURE__*/_jsxDEV(Item, {\n        dataField: 'email',\n        editorType: 'dxTextBox',\n        editorOptions: emailEditorOptions,\n        children: [/*#__PURE__*/_jsxDEV(RequiredRule, {\n          message: \"Email is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(EmailRule, {\n          message: \"Email is invalid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Label, {\n          visible: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Item, {\n        dataField: 'password',\n        editorType: 'dxTextBox',\n        editorOptions: passwordEditorOptions,\n        children: [/*#__PURE__*/_jsxDEV(RequiredRule, {\n          message: \"Password is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Label, {\n          visible: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Item, {\n        dataField: 'confirmedPassword',\n        editorType: 'dxTextBox',\n        editorOptions: confirmedPasswordEditorOptions,\n        children: [/*#__PURE__*/_jsxDEV(RequiredRule, {\n          message: \"Password is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomRule, {\n          message: 'Passwords do not match',\n          validationCallback: confirmPassword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Label, {\n          visible: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Item, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"policy-info\",\n          children: [\"By creating an account, you agree to the \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"#\",\n            children: \"Terms of Service\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 54\n          }, this), \" and \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"#\",\n            children: \"Privacy Policy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 95\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonItem, {\n        children: /*#__PURE__*/_jsxDEV(ButtonOptions, {\n          width: '100%',\n          type: 'default',\n          useSubmitBehavior: true,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"dx-button-text\",\n            children: loading ? /*#__PURE__*/_jsxDEV(LoadIndicator, {\n              width: '24px',\n              height: '24px',\n              visible: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 21\n            }, this) : 'Create a new account'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Item, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: 'login-link',\n          children: [\"Have an account? \", /*#__PURE__*/_jsxDEV(Link, {\n            to: '/login',\n            children: \"Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\nconst emailEditorOptions = {\n  stylingMode: 'filled',\n  placeholder: 'Email',\n  mode: 'email'\n};\nconst passwordEditorOptions = {\n  stylingMode: 'filled',\n  placeholder: 'Password',\n  mode: 'password'\n};\nconst confirmedPasswordEditorOptions = {\n  stylingMode: 'filled',\n  placeholder: 'Confirm Password',\n  mode: 'password'\n};","map":{"version":3,"sources":["/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/create-account-form/create-account-form.js"],"names":["React","useState","useRef","useCallback","Link","useHistory","Form","Item","Label","ButtonItem","ButtonOptions","RequiredRule","CustomRule","EmailRule","notify","LoadIndicator","createAccount","props","history","loading","setLoading","formData","onSubmit","e","preventDefault","email","password","current","result","isOk","push","message","confirmPassword","value","emailEditorOptions","passwordEditorOptions","confirmedPasswordEditorOptions","stylingMode","placeholder","mode"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport Form, {\n  Item,\n  Label,\n  ButtonItem,\n  ButtonOptions,\n  RequiredRule,\n  CustomRule,\n  EmailRule\n} from 'devextreme-react/form';\nimport notify from 'devextreme/ui/notify';\nimport LoadIndicator from 'devextreme-react/load-indicator';\nimport { createAccount } from '../../api/auth';\nimport './create-account-form.scss';\n\nexport default function (props) {\n  const history = useHistory();\n  const [loading, setLoading] = useState(false);\n  const formData = useRef({});\n\n  const onSubmit = useCallback(async (e) => {\n    e.preventDefault();\n    const { email, password } = formData.current;\n    setLoading(true);\n\n    const result = await createAccount(email, password);\n    setLoading(false);\n\n    if (result.isOk) {\n      history.push('/login');\n    } else {\n      notify(result.message, 'error', 2000);\n    }\n  }, [history]);\n\n  const confirmPassword = useCallback(\n    ({ value }) => value === formData.current.password,\n    []\n  );\n\n  return (\n    <form className={'create-account-form'} onSubmit={onSubmit}>\n      <Form formData={formData.current} disabled={loading}>\n        <Item\n          dataField={'email'}\n          editorType={'dxTextBox'}\n          editorOptions={emailEditorOptions}\n        >\n          <RequiredRule message=\"Email is required\" />\n          <EmailRule message=\"Email is invalid\" />\n          <Label visible={false} />\n        </Item>\n        <Item\n          dataField={'password'}\n          editorType={'dxTextBox'}\n          editorOptions={passwordEditorOptions}\n        >\n          <RequiredRule message=\"Password is required\" />\n          <Label visible={false} />\n        </Item>\n        <Item\n          dataField={'confirmedPassword'}\n          editorType={'dxTextBox'}\n          editorOptions={confirmedPasswordEditorOptions}\n        >\n          <RequiredRule message=\"Password is required\" />\n          <CustomRule\n            message={'Passwords do not match'}\n            validationCallback={confirmPassword}\n          />\n          <Label visible={false} />\n        </Item>\n        <Item>\n          <div className='policy-info'>\n            By creating an account, you agree to the <Link to=\"#\">Terms of Service</Link> and <Link to=\"#\">Privacy Policy</Link>\n          </div>\n        </Item>\n        <ButtonItem>\n          <ButtonOptions\n            width={'100%'}\n            type={'default'}\n            useSubmitBehavior={true}\n          >\n            <span className=\"dx-button-text\">\n              {\n                loading\n                  ? <LoadIndicator width={'24px'} height={'24px'} visible={true} />\n                  : 'Create a new account'\n              }\n            </span>\n          </ButtonOptions>\n        </ButtonItem>\n        <Item>\n          <div className={'login-link'}>\n            Have an account? <Link to={'/login'}>Sign In</Link>\n          </div>\n        </Item>\n      </Form>\n    </form>\n  );\n}\n\nconst emailEditorOptions = { stylingMode: 'filled', placeholder: 'Email', mode: 'email' };\nconst passwordEditorOptions = { stylingMode: 'filled', placeholder: 'Password', mode: 'password' };\nconst confirmedPasswordEditorOptions = { stylingMode: 'filled', placeholder: 'Confirm Password', mode: 'password' };\n"]},"metadata":{},"sourceType":"module"}