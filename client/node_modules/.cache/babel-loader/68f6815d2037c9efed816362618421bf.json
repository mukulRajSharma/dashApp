{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.data_source_adapter.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Callbacks from \"../../core/utils/callbacks\";\nimport gridCore from \"../data_grid/ui.data_grid.core\";\nimport { executeAsync, getKeyHash } from \"../../core/utils/common\";\nimport { isDefined, isPlainObject, isFunction } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport ArrayStore from \"../../data/array_store\";\nimport { applyBatch } from \"../../data/array_utils\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nexport default gridCore.Controller.inherit(function () {\n  function cloneItems(items, groupCount) {\n    if (items) {\n      items = items.slice(0);\n\n      if (groupCount) {\n        for (var i = 0; i < items.length; i++) {\n          items[i] = extend({\n            key: items[i].key\n          }, items[i]);\n          items[i].items = cloneItems(items[i].items, groupCount - 1);\n        }\n      }\n    }\n\n    return items;\n  }\n\n  function calculateOperationTypes(loadOptions, lastLoadOptions, isFullReload) {\n    var operationTypes = {\n      reload: true,\n      fullReload: true\n    };\n\n    if (lastLoadOptions) {\n      operationTypes = {\n        sorting: !gridCore.equalSortParameters(loadOptions.sort, lastLoadOptions.sort),\n        grouping: !gridCore.equalSortParameters(loadOptions.group, lastLoadOptions.group, true),\n        groupExpanding: !gridCore.equalSortParameters(loadOptions.group, lastLoadOptions.group) || lastLoadOptions.groupExpand,\n        filtering: !gridCore.equalFilterParameters(loadOptions.filter, lastLoadOptions.filter),\n        pageIndex: loadOptions.pageIndex !== lastLoadOptions.pageIndex,\n        skip: loadOptions.skip !== lastLoadOptions.skip,\n        take: loadOptions.take !== lastLoadOptions.take,\n        pageSize: loadOptions.pageSize !== lastLoadOptions.pageSize,\n        fullReload: isFullReload\n      };\n      operationTypes.reload = isFullReload || operationTypes.sorting || operationTypes.grouping || operationTypes.filtering;\n      operationTypes.paging = operationTypes.pageIndex || operationTypes.pageSize || operationTypes.take;\n    }\n\n    return operationTypes;\n  }\n\n  function getPageKey(pageIndex, loadPageCount) {\n    return isDefined(loadPageCount) ? \"\".concat(pageIndex, \":\").concat(loadPageCount) : pageIndex;\n  }\n\n  function getPageDataFromCache(options) {\n    var key = getPageKey(options.pageIndex, options.loadPageCount);\n    return options.cachedPagesData.pages[key];\n  }\n\n  return {\n    init: function (dataSource, remoteOperations) {\n      var that = this;\n      that._dataSource = dataSource;\n      that._remoteOperations = remoteOperations || {};\n      that._isLastPage = !dataSource.isLastPage();\n      that._hasLastPage = false;\n      that._currentTotalCount = 0;\n      that._cachedPagesData = {\n        pages: {}\n      };\n      that._lastOperationTypes = {};\n      that._eventsStrategy = dataSource._eventsStrategy;\n      that._skipCorrection = 0;\n      that._isLoadingAll = false;\n      that.changed = Callbacks();\n      that.loadingChanged = Callbacks();\n      that.loadError = Callbacks();\n      that.customizeStoreLoadOptions = Callbacks();\n      that.changing = Callbacks();\n      that._dataChangedHandler = that._handleDataChanged.bind(that);\n      that._dataLoadingHandler = that._handleDataLoading.bind(that);\n      that._dataLoadedHandler = that._handleDataLoaded.bind(that);\n      that._loadingChangedHandler = that._handleLoadingChanged.bind(that);\n      that._loadErrorHandler = that._handleLoadError.bind(that);\n      that._pushHandler = that._handlePush.bind(that);\n      that._changingHandler = that._handleChanging.bind(that);\n      dataSource.on(\"changed\", that._dataChangedHandler);\n      dataSource.on(\"customizeStoreLoadOptions\", that._dataLoadingHandler);\n      dataSource.on(\"customizeLoadResult\", that._dataLoadedHandler);\n      dataSource.on(\"loadingChanged\", that._loadingChangedHandler);\n      dataSource.on(\"loadError\", that._loadErrorHandler);\n      dataSource.on(\"changing\", that._changingHandler);\n      dataSource.store().on(\"push\", that._pushHandler);\n      each(dataSource, function (memberName, member) {\n        if (!that[memberName] && isFunction(member)) {\n          that[memberName] = function () {\n            return this._dataSource[memberName].apply(this._dataSource, arguments);\n          };\n        }\n      });\n    },\n    remoteOperations: function () {\n      return this._remoteOperations;\n    },\n    dispose: function (isSharedDataSource) {\n      var dataSource = this._dataSource;\n      var store = dataSource.store();\n      dataSource.off(\"changed\", this._dataChangedHandler);\n      dataSource.off(\"customizeStoreLoadOptions\", this._dataLoadingHandler);\n      dataSource.off(\"customizeLoadResult\", this._dataLoadedHandler);\n      dataSource.off(\"loadingChanged\", this._loadingChangedHandler);\n      dataSource.off(\"loadError\", this._loadErrorHandler);\n      dataSource.off(\"changing\", this._changingHandler);\n      store && store.off(\"push\", this._pushHandler);\n\n      if (!isSharedDataSource) {\n        dataSource.dispose();\n      }\n    },\n    refresh: function (options, operationTypes) {\n      var dataSource = this._dataSource;\n\n      if (operationTypes.reload) {\n        this.resetCurrentTotalCount();\n        this._isLastPage = !dataSource.paginate();\n        this._hasLastPage = this._isLastPage;\n      }\n    },\n    resetCurrentTotalCount: function () {\n      this._currentTotalCount = 0;\n      this._skipCorrection = 0;\n    },\n    resetCache: function () {\n      this._cachedStoreData = void 0;\n      this._cachedPagingData = void 0;\n    },\n    resetPagesCache: function () {\n      this._cachedPagesData = {\n        pages: {}\n      };\n    },\n    _needClearStoreDataCache: function () {\n      var remoteOperations = this.remoteOperations();\n      var operationTypes = calculateOperationTypes(this._lastLoadOptions || {}, {});\n      var isLocalOperations = Object.keys(remoteOperations).every(operationName => !operationTypes[operationName] || !remoteOperations[operationName]);\n      return !isLocalOperations;\n    },\n    push: function (changes, fromStore) {\n      var store = this.store();\n\n      if (this._needClearStoreDataCache()) {\n        this._cachedStoreData = void 0;\n      }\n\n      this._cachedPagingData = void 0;\n      this.resetPagesCache(true);\n\n      if (this._cachedStoreData) {\n        applyBatch({\n          keyInfo: store,\n          data: this._cachedStoreData,\n          changes: changes\n        });\n      }\n\n      if (!fromStore) {\n        this._applyBatch(changes);\n      }\n    },\n    getDataIndexGetter: function () {\n      if (!this._dataIndexGetter) {\n        var indexByKey;\n        var storeData;\n        var store = this.store();\n\n        this._dataIndexGetter = data => {\n          var isCacheUpdated = storeData && storeData !== this._cachedStoreData;\n\n          if (!indexByKey || isCacheUpdated) {\n            storeData = this._cachedStoreData || [];\n            indexByKey = {};\n\n            for (var i = 0; i < storeData.length; i++) {\n              indexByKey[getKeyHash(store.keyOf(storeData[i]))] = i;\n            }\n          }\n\n          return indexByKey[getKeyHash(store.keyOf(data))];\n        };\n      }\n\n      return this._dataIndexGetter;\n    },\n    _getKeyInfo: function () {\n      return this.store();\n    },\n    _applyBatch: function (changes) {\n      var keyInfo = this._getKeyInfo();\n\n      var dataSource = this._dataSource;\n      var groupCount = gridCore.normalizeSortingInfo(this.group()).length;\n      var totalCount = this.totalCount();\n      var isVirtualMode = \"virtual\" === this.option(\"scrolling.mode\");\n      changes = changes.filter(function (change) {\n        return !dataSource.paginate() || \"insert\" !== change.type || void 0 !== change.index;\n      });\n\n      var getItemCount = () => groupCount ? this.itemsCount() : this._items.length;\n\n      var oldItemCount = getItemCount();\n      applyBatch({\n        keyInfo: keyInfo,\n        data: this._items,\n        changes: changes,\n        groupCount: groupCount,\n        useInsertIndex: true\n      });\n      applyBatch({\n        keyInfo: keyInfo,\n        data: dataSource.items(),\n        changes: changes,\n        groupCount: groupCount,\n        useInsertIndex: true\n      });\n\n      if (this._currentTotalCount > 0 || isVirtualMode && totalCount === oldItemCount) {\n        this._skipCorrection += getItemCount() - oldItemCount;\n      }\n\n      changes.splice(0, changes.length);\n    },\n    _handlePush: function (changes) {\n      this.push(changes, true);\n    },\n    _handleChanging: function (e) {\n      this.changing.fire(e);\n\n      this._applyBatch(e.changes);\n    },\n    _needCleanCacheByOperation: function (operationType, remoteOperations) {\n      var operationTypesByOrder = [\"filtering\", \"sorting\", \"paging\"];\n      var operationTypeIndex = operationTypesByOrder.indexOf(operationType);\n      var currentOperationTypes = operationTypeIndex >= 0 ? operationTypesByOrder.slice(operationTypeIndex) : [operationType];\n      return currentOperationTypes.some(operationType => remoteOperations[operationType]);\n    },\n    _customizeRemoteOperations: function (options, operationTypes) {\n      var that = this;\n      var cachedStoreData = that._cachedStoreData;\n      var cachedPagingData = that._cachedPagingData;\n      var cachedPagesData = that._cachedPagesData;\n\n      if (options.storeLoadOptions.filter && !options.remoteOperations.filtering || options.storeLoadOptions.sort && !options.remoteOperations.sorting) {\n        options.remoteOperations = {\n          filtering: options.remoteOperations.filtering\n        };\n      }\n\n      if (operationTypes.fullReload) {\n        cachedStoreData = void 0;\n        cachedPagingData = void 0;\n        cachedPagesData = {\n          pages: {}\n        };\n      } else {\n        if (operationTypes.reload) {\n          cachedPagingData = void 0;\n          cachedPagesData = {\n            pages: {}\n          };\n        } else if (operationTypes.pageSize || operationTypes.groupExpanding) {\n          cachedPagesData = {\n            pages: {}\n          };\n        }\n\n        each(operationTypes, function (operationType, value) {\n          if (value && that._needCleanCacheByOperation(operationType, options.remoteOperations)) {\n            cachedStoreData = void 0;\n            cachedPagingData = void 0;\n          }\n        });\n      }\n\n      if (cachedPagingData) {\n        options.remoteOperations.paging = false;\n      }\n\n      options.cachedStoreData = cachedStoreData;\n      options.cachedPagingData = cachedPagingData;\n      options.cachedPagesData = cachedPagesData;\n\n      if (!options.isCustomLoading) {\n        that._cachedStoreData = cachedStoreData;\n        that._cachedPagingData = cachedPagingData;\n        that._cachedPagesData = cachedPagesData;\n      }\n    },\n    _handleDataLoading: function (options) {\n      var dataSource = this._dataSource;\n      var lastLoadOptions = this._lastLoadOptions;\n      this.customizeStoreLoadOptions.fire(options);\n      options.delay = this.option(\"loadingTimeout\");\n      options.originalStoreLoadOptions = options.storeLoadOptions;\n      options.remoteOperations = extend({}, this.remoteOperations());\n      var isFullReload = !this.isLoaded() && !this._isRefreshing;\n\n      if (this.option(\"integrationOptions.renderedOnServer\") && !this.isLoaded()) {\n        options.delay = void 0;\n      }\n\n      var loadOptions = extend({\n        pageIndex: this.pageIndex(),\n        pageSize: this.pageSize()\n      }, options.storeLoadOptions);\n      var operationTypes = calculateOperationTypes(loadOptions, lastLoadOptions, isFullReload);\n\n      this._customizeRemoteOperations(options, operationTypes);\n\n      if (!options.isCustomLoading) {\n        var isRefreshing = this._isRefreshing;\n        options.pageIndex = dataSource.pageIndex();\n        options.lastLoadOptions = loadOptions;\n        options.operationTypes = operationTypes;\n        this._loadingOperationTypes = operationTypes;\n        this._isRefreshing = true;\n        when(isRefreshing || this._isRefreshed || this.refresh(options, operationTypes)).done(() => {\n          if (this._lastOperationId === options.operationId) {\n            this._isRefreshed = true;\n            this.load().always(() => {\n              this._isRefreshed = false;\n            });\n          }\n        }).fail(() => {\n          dataSource.cancel(options.operationId);\n        }).always(() => {\n          this._isRefreshing = false;\n        });\n        dataSource.cancel(this._lastOperationId);\n        this._lastOperationId = options.operationId;\n\n        if (this._isRefreshing) {\n          dataSource.cancel(this._lastOperationId);\n        }\n      }\n\n      this._handleDataLoadingCore(options);\n    },\n    _handleDataLoadingCore: function (options) {\n      var remoteOperations = options.remoteOperations;\n      options.loadOptions = {};\n      var cachedExtra = options.cachedPagesData.extra;\n      var localLoadOptionNames = {\n        filter: !remoteOperations.filtering,\n        sort: !remoteOperations.sorting,\n        group: !remoteOperations.grouping,\n        summary: !remoteOperations.summary,\n        skip: !remoteOperations.paging,\n        take: !remoteOperations.paging,\n        requireTotalCount: cachedExtra && \"totalCount\" in cachedExtra || !remoteOperations.paging\n      };\n      each(options.storeLoadOptions, function (optionName, optionValue) {\n        if (localLoadOptionNames[optionName]) {\n          options.loadOptions[optionName] = optionValue;\n          delete options.storeLoadOptions[optionName];\n        }\n      });\n\n      if (cachedExtra) {\n        options.extra = cachedExtra;\n      }\n\n      options.data = getPageDataFromCache(options) || options.cachedStoreData;\n    },\n    _handleDataLoaded: function (options) {\n      var loadOptions = options.loadOptions;\n      var localPaging = options.remoteOperations && !options.remoteOperations.paging;\n      var cachedPagesData = options.cachedPagesData;\n      var storeLoadOptions = options.storeLoadOptions;\n      var needCache = false !== this.option(\"cacheEnabled\") && storeLoadOptions;\n      var needPageCache = needCache && !options.isCustomLoading && cachedPagesData && (!localPaging || storeLoadOptions.group);\n      var needPagingCache = needCache && localPaging;\n      var needStoreCache = needPagingCache && !options.isCustomLoading;\n\n      if (!loadOptions) {\n        this._dataSource.cancel(options.operationId);\n\n        return;\n      }\n\n      if (options.lastLoadOptions) {\n        this._lastLoadOptions = options.lastLoadOptions;\n        Object.keys(options.operationTypes).forEach(operationType => {\n          this._lastOperationTypes[operationType] = this._lastOperationTypes[operationType] || options.operationTypes[operationType];\n        });\n      }\n\n      if (localPaging) {\n        options.skip = loadOptions.skip;\n        options.take = loadOptions.take;\n        delete loadOptions.skip;\n        delete loadOptions.take;\n      }\n\n      if (loadOptions.group) {\n        loadOptions.group = options.group || loadOptions.group;\n      }\n\n      var groupCount = gridCore.normalizeSortingInfo(storeLoadOptions.group || loadOptions.group).length;\n\n      if (!needPageCache || !getPageDataFromCache(options)) {\n        if (needPagingCache && options.cachedPagingData) {\n          options.data = cloneItems(options.cachedPagingData, groupCount);\n        } else {\n          if (needStoreCache) {\n            if (!this._cachedStoreData) {\n              this._cachedStoreData = cloneItems(options.data, gridCore.normalizeSortingInfo(storeLoadOptions.group).length);\n            } else if (options.mergeStoreLoadData) {\n              options.data = this._cachedStoreData = this._cachedStoreData.concat(options.data);\n            }\n          }\n\n          new ArrayStore(options.data).load(loadOptions).done(data => {\n            options.data = data;\n\n            if (needStoreCache) {\n              this._cachedPagingData = cloneItems(options.data, groupCount);\n            }\n          }).fail(error => {\n            options.data = new Deferred().reject(error);\n          });\n        }\n\n        if (loadOptions.requireTotalCount && localPaging) {\n          options.extra = isPlainObject(options.extra) ? options.extra : {};\n          options.extra.totalCount = options.data.length;\n        }\n\n        if (options.extra && options.extra.totalCount >= 0 && (false === storeLoadOptions.requireTotalCount || false === loadOptions.requireTotalCount)) {\n          options.extra.totalCount = -1;\n        }\n\n        this._handleDataLoadedCore(options);\n\n        if (needPageCache) {\n          cachedPagesData.extra = cachedPagesData.extra || extend({}, options.extra);\n          when(options.data).done(data => {\n            !function (options, data) {\n              var pageIndex = options.pageIndex;\n\n              if (void 0 !== pageIndex) {\n                var key = getPageKey(pageIndex, options.loadPageCount);\n                options.cachedPagesData.pages[key] = data;\n              }\n            }(options, cloneItems(data, groupCount));\n          });\n        }\n      }\n\n      options.storeLoadOptions = options.originalStoreLoadOptions;\n    },\n    _handleDataLoadedCore: function (options) {\n      if (options.remoteOperations && !options.remoteOperations.paging && Array.isArray(options.data)) {\n        if (void 0 !== options.skip) {\n          options.data = options.data.slice(options.skip);\n        }\n\n        if (void 0 !== options.take) {\n          options.data = options.data.slice(0, options.take);\n        }\n      }\n    },\n    _handleLoadingChanged: function (isLoading) {\n      this.loadingChanged.fire(isLoading);\n    },\n    _handleLoadError: function (error) {\n      this.loadError.fire(error);\n      this.changed.fire({\n        changeType: \"loadError\",\n        error: error\n      });\n    },\n    _loadPageSize: function () {\n      return this.pageSize();\n    },\n    _handleDataChanged: function (args) {\n      var currentTotalCount;\n      var dataSource = this._dataSource;\n      var isLoading = false;\n      var itemsCount = this.itemsCount();\n      this._isLastPage = !itemsCount || !this._loadPageSize() || itemsCount < this._loadPageSize();\n\n      if (this._isLastPage) {\n        this._hasLastPage = true;\n      }\n\n      if (dataSource.totalCount() >= 0) {\n        if (dataSource.pageIndex() >= this.pageCount()) {\n          dataSource.pageIndex(this.pageCount() - 1);\n          this.pageIndex(dataSource.pageIndex());\n          this.resetPagesCache();\n          dataSource.load();\n          isLoading = true;\n        }\n      } else if (!args || isDefined(args.changeType)) {\n        currentTotalCount = dataSource.pageIndex() * this.pageSize() + itemsCount;\n        this._currentTotalCount = Math.max(this._currentTotalCount, currentTotalCount);\n\n        if (0 === itemsCount && dataSource.pageIndex() >= this.pageCount()) {\n          dataSource.pageIndex(this.pageCount() - 1);\n\n          if (\"infinite\" !== this.option(\"scrolling.mode\")) {\n            dataSource.load();\n            isLoading = true;\n          }\n        }\n      }\n\n      if (!isLoading) {\n        this._operationTypes = this._lastOperationTypes;\n        this._lastOperationTypes = {};\n        this.component._optionCache = {};\n        this.changed.fire(args);\n        this.component._optionCache = void 0;\n      }\n    },\n    _scheduleCustomLoadCallbacks: function (deferred) {\n      var that = this;\n      that._isCustomLoading = true;\n      deferred.always(function () {\n        that._isCustomLoading = false;\n      });\n    },\n    loadingOperationTypes: function () {\n      return this._loadingOperationTypes;\n    },\n    operationTypes: function () {\n      return this._operationTypes;\n    },\n    lastLoadOptions: function () {\n      return this._lastLoadOptions || {};\n    },\n    isLastPage: function () {\n      return this._isLastPage;\n    },\n    totalCount: function () {\n      return parseInt((this._currentTotalCount || this._dataSource.totalCount()) + this._skipCorrection);\n    },\n    itemsCount: function () {\n      return this._dataSource.items().length;\n    },\n    totalItemsCount: function () {\n      return this.totalCount();\n    },\n    pageSize: function () {\n      var dataSource = this._dataSource;\n\n      if (!arguments.length && !dataSource.paginate()) {\n        return 0;\n      }\n\n      return dataSource.pageSize.apply(dataSource, arguments);\n    },\n    pageCount: function () {\n      var count = this.totalItemsCount() - this._skipCorrection;\n\n      var pageSize = this.pageSize();\n\n      if (pageSize && count > 0) {\n        return Math.max(1, Math.ceil(count / pageSize));\n      }\n\n      return 1;\n    },\n    hasKnownLastPage: function () {\n      return this._hasLastPage || this._dataSource.totalCount() >= 0;\n    },\n    loadFromStore: function (loadOptions, store) {\n      var dataSource = this._dataSource;\n      var d = new Deferred();\n\n      if (!dataSource) {\n        return;\n      }\n\n      store = store || dataSource.store();\n      store.load(loadOptions).done(function (data, extra) {\n        if (data && !Array.isArray(data) && Array.isArray(data.data)) {\n          extra = data;\n          data = data.data;\n        }\n\n        d.resolve(data, extra);\n      }).fail(d.reject);\n      return d;\n    },\n    isCustomLoading: function () {\n      return !!this._isCustomLoading;\n    },\n    load: function (options) {\n      var that = this;\n      var dataSource = that._dataSource;\n      var d = new Deferred();\n\n      if (options) {\n        var store = dataSource.store();\n        var dataSourceLoadOptions = dataSource.loadOptions();\n        var loadResult = {\n          storeLoadOptions: options,\n          isCustomLoading: true\n        };\n        each(store._customLoadOptions() || [], function (_, optionName) {\n          if (!(optionName in loadResult.storeLoadOptions)) {\n            loadResult.storeLoadOptions[optionName] = dataSourceLoadOptions[optionName];\n          }\n        });\n        this._isLoadingAll = options.isLoadingAll;\n\n        that._scheduleCustomLoadCallbacks(d);\n\n        dataSource._scheduleLoadCallbacks(d);\n\n        that._handleDataLoading(loadResult);\n\n        !function (action, timeout) {\n          if (isDefined(timeout)) {\n            executeAsync(action, timeout);\n          } else {\n            action();\n          }\n        }(function () {\n          if (!dataSource.store()) {\n            return d.reject(\"canceled\");\n          }\n\n          when(loadResult.data || that.loadFromStore(loadResult.storeLoadOptions)).done(function (data, extra) {\n            loadResult.data = data;\n            loadResult.extra = extra || {};\n\n            that._handleDataLoaded(loadResult);\n\n            if (options.requireTotalCount && void 0 === loadResult.extra.totalCount) {\n              loadResult.extra.totalCount = store.totalCount(loadResult.storeLoadOptions);\n            }\n\n            when(loadResult.data, loadResult.extra.totalCount).done(function (data, totalCount) {\n              loadResult.extra.totalCount = totalCount;\n              d.resolve(data, loadResult.extra);\n            }).fail(d.reject);\n          }).fail(d.reject);\n        }, that.option(\"loadingTimeout\"));\n        return d.fail(function () {\n          that._eventsStrategy.fireEvent(\"loadError\", arguments);\n        }).always(() => {\n          this._isLoadingAll = false;\n        }).promise();\n      } else {\n        return dataSource.load();\n      }\n    },\n    reload: function (full) {\n      return full ? this._dataSource.reload() : this._dataSource.load();\n    },\n    getCachedStoreData: function () {\n      return this._cachedStoreData;\n    }\n  };\n}());","map":{"version":3,"sources":["/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.data_source_adapter.js"],"names":["Callbacks","gridCore","executeAsync","getKeyHash","isDefined","isPlainObject","isFunction","each","extend","ArrayStore","applyBatch","when","Deferred","Controller","inherit","cloneItems","items","groupCount","slice","i","length","key","calculateOperationTypes","loadOptions","lastLoadOptions","isFullReload","operationTypes","reload","fullReload","sorting","equalSortParameters","sort","grouping","group","groupExpanding","groupExpand","filtering","equalFilterParameters","filter","pageIndex","skip","take","pageSize","paging","getPageKey","loadPageCount","concat","getPageDataFromCache","options","cachedPagesData","pages","init","dataSource","remoteOperations","that","_dataSource","_remoteOperations","_isLastPage","isLastPage","_hasLastPage","_currentTotalCount","_cachedPagesData","_lastOperationTypes","_eventsStrategy","_skipCorrection","_isLoadingAll","changed","loadingChanged","loadError","customizeStoreLoadOptions","changing","_dataChangedHandler","_handleDataChanged","bind","_dataLoadingHandler","_handleDataLoading","_dataLoadedHandler","_handleDataLoaded","_loadingChangedHandler","_handleLoadingChanged","_loadErrorHandler","_handleLoadError","_pushHandler","_handlePush","_changingHandler","_handleChanging","on","store","memberName","member","apply","arguments","dispose","isSharedDataSource","off","refresh","resetCurrentTotalCount","paginate","resetCache","_cachedStoreData","_cachedPagingData","resetPagesCache","_needClearStoreDataCache","_lastLoadOptions","isLocalOperations","Object","keys","every","operationName","push","changes","fromStore","keyInfo","data","_applyBatch","getDataIndexGetter","_dataIndexGetter","indexByKey","storeData","isCacheUpdated","keyOf","_getKeyInfo","normalizeSortingInfo","totalCount","isVirtualMode","option","change","type","index","getItemCount","itemsCount","_items","oldItemCount","useInsertIndex","splice","e","fire","_needCleanCacheByOperation","operationType","operationTypesByOrder","operationTypeIndex","indexOf","currentOperationTypes","some","_customizeRemoteOperations","cachedStoreData","cachedPagingData","storeLoadOptions","value","isCustomLoading","delay","originalStoreLoadOptions","isLoaded","_isRefreshing","isRefreshing","_loadingOperationTypes","_isRefreshed","done","_lastOperationId","operationId","load","always","fail","cancel","_handleDataLoadingCore","cachedExtra","extra","localLoadOptionNames","summary","requireTotalCount","optionName","optionValue","localPaging","needCache","needPageCache","needPagingCache","needStoreCache","forEach","mergeStoreLoadData","error","reject","_handleDataLoadedCore","Array","isArray","isLoading","changeType","_loadPageSize","args","currentTotalCount","pageCount","Math","max","_operationTypes","component","_optionCache","_scheduleCustomLoadCallbacks","deferred","_isCustomLoading","loadingOperationTypes","parseInt","totalItemsCount","count","ceil","hasKnownLastPage","loadFromStore","d","resolve","dataSourceLoadOptions","loadResult","_customLoadOptions","_","isLoadingAll","_scheduleLoadCallbacks","action","timeout","fireEvent","promise","full","getCachedStoreData"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.data_source_adapter.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport Callbacks from \"../../core/utils/callbacks\";\r\nimport gridCore from \"../data_grid/ui.data_grid.core\";\r\nimport {\r\n    executeAsync,\r\n    getKeyHash\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    isDefined,\r\n    isPlainObject,\r\n    isFunction\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport ArrayStore from \"../../data/array_store\";\r\nimport {\r\n    applyBatch\r\n} from \"../../data/array_utils\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nexport default gridCore.Controller.inherit(function() {\r\n    function cloneItems(items, groupCount) {\r\n        if (items) {\r\n            items = items.slice(0);\r\n            if (groupCount) {\r\n                for (var i = 0; i < items.length; i++) {\r\n                    items[i] = extend({\r\n                        key: items[i].key\r\n                    }, items[i]);\r\n                    items[i].items = cloneItems(items[i].items, groupCount - 1)\r\n                }\r\n            }\r\n        }\r\n        return items\r\n    }\r\n\r\n    function calculateOperationTypes(loadOptions, lastLoadOptions, isFullReload) {\r\n        var operationTypes = {\r\n            reload: true,\r\n            fullReload: true\r\n        };\r\n        if (lastLoadOptions) {\r\n            operationTypes = {\r\n                sorting: !gridCore.equalSortParameters(loadOptions.sort, lastLoadOptions.sort),\r\n                grouping: !gridCore.equalSortParameters(loadOptions.group, lastLoadOptions.group, true),\r\n                groupExpanding: !gridCore.equalSortParameters(loadOptions.group, lastLoadOptions.group) || lastLoadOptions.groupExpand,\r\n                filtering: !gridCore.equalFilterParameters(loadOptions.filter, lastLoadOptions.filter),\r\n                pageIndex: loadOptions.pageIndex !== lastLoadOptions.pageIndex,\r\n                skip: loadOptions.skip !== lastLoadOptions.skip,\r\n                take: loadOptions.take !== lastLoadOptions.take,\r\n                pageSize: loadOptions.pageSize !== lastLoadOptions.pageSize,\r\n                fullReload: isFullReload\r\n            };\r\n            operationTypes.reload = isFullReload || operationTypes.sorting || operationTypes.grouping || operationTypes.filtering;\r\n            operationTypes.paging = operationTypes.pageIndex || operationTypes.pageSize || operationTypes.take\r\n        }\r\n        return operationTypes\r\n    }\r\n\r\n    function getPageKey(pageIndex, loadPageCount) {\r\n        return isDefined(loadPageCount) ? \"\".concat(pageIndex, \":\").concat(loadPageCount) : pageIndex\r\n    }\r\n\r\n    function getPageDataFromCache(options) {\r\n        var key = getPageKey(options.pageIndex, options.loadPageCount);\r\n        return options.cachedPagesData.pages[key]\r\n    }\r\n    return {\r\n        init: function(dataSource, remoteOperations) {\r\n            var that = this;\r\n            that._dataSource = dataSource;\r\n            that._remoteOperations = remoteOperations || {};\r\n            that._isLastPage = !dataSource.isLastPage();\r\n            that._hasLastPage = false;\r\n            that._currentTotalCount = 0;\r\n            that._cachedPagesData = {\r\n                pages: {}\r\n            };\r\n            that._lastOperationTypes = {};\r\n            that._eventsStrategy = dataSource._eventsStrategy;\r\n            that._skipCorrection = 0;\r\n            that._isLoadingAll = false;\r\n            that.changed = Callbacks();\r\n            that.loadingChanged = Callbacks();\r\n            that.loadError = Callbacks();\r\n            that.customizeStoreLoadOptions = Callbacks();\r\n            that.changing = Callbacks();\r\n            that._dataChangedHandler = that._handleDataChanged.bind(that);\r\n            that._dataLoadingHandler = that._handleDataLoading.bind(that);\r\n            that._dataLoadedHandler = that._handleDataLoaded.bind(that);\r\n            that._loadingChangedHandler = that._handleLoadingChanged.bind(that);\r\n            that._loadErrorHandler = that._handleLoadError.bind(that);\r\n            that._pushHandler = that._handlePush.bind(that);\r\n            that._changingHandler = that._handleChanging.bind(that);\r\n            dataSource.on(\"changed\", that._dataChangedHandler);\r\n            dataSource.on(\"customizeStoreLoadOptions\", that._dataLoadingHandler);\r\n            dataSource.on(\"customizeLoadResult\", that._dataLoadedHandler);\r\n            dataSource.on(\"loadingChanged\", that._loadingChangedHandler);\r\n            dataSource.on(\"loadError\", that._loadErrorHandler);\r\n            dataSource.on(\"changing\", that._changingHandler);\r\n            dataSource.store().on(\"push\", that._pushHandler);\r\n            each(dataSource, (function(memberName, member) {\r\n                if (!that[memberName] && isFunction(member)) {\r\n                    that[memberName] = function() {\r\n                        return this._dataSource[memberName].apply(this._dataSource, arguments)\r\n                    }\r\n                }\r\n            }))\r\n        },\r\n        remoteOperations: function() {\r\n            return this._remoteOperations\r\n        },\r\n        dispose: function(isSharedDataSource) {\r\n            var dataSource = this._dataSource;\r\n            var store = dataSource.store();\r\n            dataSource.off(\"changed\", this._dataChangedHandler);\r\n            dataSource.off(\"customizeStoreLoadOptions\", this._dataLoadingHandler);\r\n            dataSource.off(\"customizeLoadResult\", this._dataLoadedHandler);\r\n            dataSource.off(\"loadingChanged\", this._loadingChangedHandler);\r\n            dataSource.off(\"loadError\", this._loadErrorHandler);\r\n            dataSource.off(\"changing\", this._changingHandler);\r\n            store && store.off(\"push\", this._pushHandler);\r\n            if (!isSharedDataSource) {\r\n                dataSource.dispose()\r\n            }\r\n        },\r\n        refresh: function(options, operationTypes) {\r\n            var dataSource = this._dataSource;\r\n            if (operationTypes.reload) {\r\n                this.resetCurrentTotalCount();\r\n                this._isLastPage = !dataSource.paginate();\r\n                this._hasLastPage = this._isLastPage\r\n            }\r\n        },\r\n        resetCurrentTotalCount: function() {\r\n            this._currentTotalCount = 0;\r\n            this._skipCorrection = 0\r\n        },\r\n        resetCache: function() {\r\n            this._cachedStoreData = void 0;\r\n            this._cachedPagingData = void 0\r\n        },\r\n        resetPagesCache: function() {\r\n            this._cachedPagesData = {\r\n                pages: {}\r\n            }\r\n        },\r\n        _needClearStoreDataCache: function() {\r\n            var remoteOperations = this.remoteOperations();\r\n            var operationTypes = calculateOperationTypes(this._lastLoadOptions || {}, {});\r\n            var isLocalOperations = Object.keys(remoteOperations).every(operationName => !operationTypes[operationName] || !remoteOperations[operationName]);\r\n            return !isLocalOperations\r\n        },\r\n        push: function(changes, fromStore) {\r\n            var store = this.store();\r\n            if (this._needClearStoreDataCache()) {\r\n                this._cachedStoreData = void 0\r\n            }\r\n            this._cachedPagingData = void 0;\r\n            this.resetPagesCache(true);\r\n            if (this._cachedStoreData) {\r\n                applyBatch({\r\n                    keyInfo: store,\r\n                    data: this._cachedStoreData,\r\n                    changes: changes\r\n                })\r\n            }\r\n            if (!fromStore) {\r\n                this._applyBatch(changes)\r\n            }\r\n        },\r\n        getDataIndexGetter: function() {\r\n            if (!this._dataIndexGetter) {\r\n                var indexByKey;\r\n                var storeData;\r\n                var store = this.store();\r\n                this._dataIndexGetter = data => {\r\n                    var isCacheUpdated = storeData && storeData !== this._cachedStoreData;\r\n                    if (!indexByKey || isCacheUpdated) {\r\n                        storeData = this._cachedStoreData || [];\r\n                        indexByKey = {};\r\n                        for (var i = 0; i < storeData.length; i++) {\r\n                            indexByKey[getKeyHash(store.keyOf(storeData[i]))] = i\r\n                        }\r\n                    }\r\n                    return indexByKey[getKeyHash(store.keyOf(data))]\r\n                }\r\n            }\r\n            return this._dataIndexGetter\r\n        },\r\n        _getKeyInfo: function() {\r\n            return this.store()\r\n        },\r\n        _applyBatch: function(changes) {\r\n            var keyInfo = this._getKeyInfo();\r\n            var dataSource = this._dataSource;\r\n            var groupCount = gridCore.normalizeSortingInfo(this.group()).length;\r\n            var totalCount = this.totalCount();\r\n            var isVirtualMode = \"virtual\" === this.option(\"scrolling.mode\");\r\n            changes = changes.filter((function(change) {\r\n                return !dataSource.paginate() || \"insert\" !== change.type || void 0 !== change.index\r\n            }));\r\n            var getItemCount = () => groupCount ? this.itemsCount() : this._items.length;\r\n            var oldItemCount = getItemCount();\r\n            applyBatch({\r\n                keyInfo: keyInfo,\r\n                data: this._items,\r\n                changes: changes,\r\n                groupCount: groupCount,\r\n                useInsertIndex: true\r\n            });\r\n            applyBatch({\r\n                keyInfo: keyInfo,\r\n                data: dataSource.items(),\r\n                changes: changes,\r\n                groupCount: groupCount,\r\n                useInsertIndex: true\r\n            });\r\n            if (this._currentTotalCount > 0 || isVirtualMode && totalCount === oldItemCount) {\r\n                this._skipCorrection += getItemCount() - oldItemCount\r\n            }\r\n            changes.splice(0, changes.length)\r\n        },\r\n        _handlePush: function(changes) {\r\n            this.push(changes, true)\r\n        },\r\n        _handleChanging: function(e) {\r\n            this.changing.fire(e);\r\n            this._applyBatch(e.changes)\r\n        },\r\n        _needCleanCacheByOperation: function(operationType, remoteOperations) {\r\n            var operationTypesByOrder = [\"filtering\", \"sorting\", \"paging\"];\r\n            var operationTypeIndex = operationTypesByOrder.indexOf(operationType);\r\n            var currentOperationTypes = operationTypeIndex >= 0 ? operationTypesByOrder.slice(operationTypeIndex) : [operationType];\r\n            return currentOperationTypes.some(operationType => remoteOperations[operationType])\r\n        },\r\n        _customizeRemoteOperations: function(options, operationTypes) {\r\n            var that = this;\r\n            var cachedStoreData = that._cachedStoreData;\r\n            var cachedPagingData = that._cachedPagingData;\r\n            var cachedPagesData = that._cachedPagesData;\r\n            if (options.storeLoadOptions.filter && !options.remoteOperations.filtering || options.storeLoadOptions.sort && !options.remoteOperations.sorting) {\r\n                options.remoteOperations = {\r\n                    filtering: options.remoteOperations.filtering\r\n                }\r\n            }\r\n            if (operationTypes.fullReload) {\r\n                cachedStoreData = void 0;\r\n                cachedPagingData = void 0;\r\n                cachedPagesData = {\r\n                    pages: {}\r\n                }\r\n            } else {\r\n                if (operationTypes.reload) {\r\n                    cachedPagingData = void 0;\r\n                    cachedPagesData = {\r\n                        pages: {}\r\n                    }\r\n                } else if (operationTypes.pageSize || operationTypes.groupExpanding) {\r\n                    cachedPagesData = {\r\n                        pages: {}\r\n                    }\r\n                }\r\n                each(operationTypes, (function(operationType, value) {\r\n                    if (value && that._needCleanCacheByOperation(operationType, options.remoteOperations)) {\r\n                        cachedStoreData = void 0;\r\n                        cachedPagingData = void 0\r\n                    }\r\n                }))\r\n            }\r\n            if (cachedPagingData) {\r\n                options.remoteOperations.paging = false\r\n            }\r\n            options.cachedStoreData = cachedStoreData;\r\n            options.cachedPagingData = cachedPagingData;\r\n            options.cachedPagesData = cachedPagesData;\r\n            if (!options.isCustomLoading) {\r\n                that._cachedStoreData = cachedStoreData;\r\n                that._cachedPagingData = cachedPagingData;\r\n                that._cachedPagesData = cachedPagesData\r\n            }\r\n        },\r\n        _handleDataLoading: function(options) {\r\n            var dataSource = this._dataSource;\r\n            var lastLoadOptions = this._lastLoadOptions;\r\n            this.customizeStoreLoadOptions.fire(options);\r\n            options.delay = this.option(\"loadingTimeout\");\r\n            options.originalStoreLoadOptions = options.storeLoadOptions;\r\n            options.remoteOperations = extend({}, this.remoteOperations());\r\n            var isFullReload = !this.isLoaded() && !this._isRefreshing;\r\n            if (this.option(\"integrationOptions.renderedOnServer\") && !this.isLoaded()) {\r\n                options.delay = void 0\r\n            }\r\n            var loadOptions = extend({\r\n                pageIndex: this.pageIndex(),\r\n                pageSize: this.pageSize()\r\n            }, options.storeLoadOptions);\r\n            var operationTypes = calculateOperationTypes(loadOptions, lastLoadOptions, isFullReload);\r\n            this._customizeRemoteOperations(options, operationTypes);\r\n            if (!options.isCustomLoading) {\r\n                var isRefreshing = this._isRefreshing;\r\n                options.pageIndex = dataSource.pageIndex();\r\n                options.lastLoadOptions = loadOptions;\r\n                options.operationTypes = operationTypes;\r\n                this._loadingOperationTypes = operationTypes;\r\n                this._isRefreshing = true;\r\n                when(isRefreshing || this._isRefreshed || this.refresh(options, operationTypes)).done(() => {\r\n                    if (this._lastOperationId === options.operationId) {\r\n                        this._isRefreshed = true;\r\n                        this.load().always(() => {\r\n                            this._isRefreshed = false\r\n                        })\r\n                    }\r\n                }).fail(() => {\r\n                    dataSource.cancel(options.operationId)\r\n                }).always(() => {\r\n                    this._isRefreshing = false\r\n                });\r\n                dataSource.cancel(this._lastOperationId);\r\n                this._lastOperationId = options.operationId;\r\n                if (this._isRefreshing) {\r\n                    dataSource.cancel(this._lastOperationId)\r\n                }\r\n            }\r\n            this._handleDataLoadingCore(options)\r\n        },\r\n        _handleDataLoadingCore: function(options) {\r\n            var remoteOperations = options.remoteOperations;\r\n            options.loadOptions = {};\r\n            var cachedExtra = options.cachedPagesData.extra;\r\n            var localLoadOptionNames = {\r\n                filter: !remoteOperations.filtering,\r\n                sort: !remoteOperations.sorting,\r\n                group: !remoteOperations.grouping,\r\n                summary: !remoteOperations.summary,\r\n                skip: !remoteOperations.paging,\r\n                take: !remoteOperations.paging,\r\n                requireTotalCount: cachedExtra && \"totalCount\" in cachedExtra || !remoteOperations.paging\r\n            };\r\n            each(options.storeLoadOptions, (function(optionName, optionValue) {\r\n                if (localLoadOptionNames[optionName]) {\r\n                    options.loadOptions[optionName] = optionValue;\r\n                    delete options.storeLoadOptions[optionName]\r\n                }\r\n            }));\r\n            if (cachedExtra) {\r\n                options.extra = cachedExtra\r\n            }\r\n            options.data = getPageDataFromCache(options) || options.cachedStoreData\r\n        },\r\n        _handleDataLoaded: function(options) {\r\n            var loadOptions = options.loadOptions;\r\n            var localPaging = options.remoteOperations && !options.remoteOperations.paging;\r\n            var cachedPagesData = options.cachedPagesData;\r\n            var storeLoadOptions = options.storeLoadOptions;\r\n            var needCache = false !== this.option(\"cacheEnabled\") && storeLoadOptions;\r\n            var needPageCache = needCache && !options.isCustomLoading && cachedPagesData && (!localPaging || storeLoadOptions.group);\r\n            var needPagingCache = needCache && localPaging;\r\n            var needStoreCache = needPagingCache && !options.isCustomLoading;\r\n            if (!loadOptions) {\r\n                this._dataSource.cancel(options.operationId);\r\n                return\r\n            }\r\n            if (options.lastLoadOptions) {\r\n                this._lastLoadOptions = options.lastLoadOptions;\r\n                Object.keys(options.operationTypes).forEach(operationType => {\r\n                    this._lastOperationTypes[operationType] = this._lastOperationTypes[operationType] || options.operationTypes[operationType]\r\n                })\r\n            }\r\n            if (localPaging) {\r\n                options.skip = loadOptions.skip;\r\n                options.take = loadOptions.take;\r\n                delete loadOptions.skip;\r\n                delete loadOptions.take\r\n            }\r\n            if (loadOptions.group) {\r\n                loadOptions.group = options.group || loadOptions.group\r\n            }\r\n            var groupCount = gridCore.normalizeSortingInfo(storeLoadOptions.group || loadOptions.group).length;\r\n            if (!needPageCache || !getPageDataFromCache(options)) {\r\n                if (needPagingCache && options.cachedPagingData) {\r\n                    options.data = cloneItems(options.cachedPagingData, groupCount)\r\n                } else {\r\n                    if (needStoreCache) {\r\n                        if (!this._cachedStoreData) {\r\n                            this._cachedStoreData = cloneItems(options.data, gridCore.normalizeSortingInfo(storeLoadOptions.group).length)\r\n                        } else if (options.mergeStoreLoadData) {\r\n                            options.data = this._cachedStoreData = this._cachedStoreData.concat(options.data)\r\n                        }\r\n                    }\r\n                    new ArrayStore(options.data).load(loadOptions).done(data => {\r\n                        options.data = data;\r\n                        if (needStoreCache) {\r\n                            this._cachedPagingData = cloneItems(options.data, groupCount)\r\n                        }\r\n                    }).fail(error => {\r\n                        options.data = (new Deferred).reject(error)\r\n                    })\r\n                }\r\n                if (loadOptions.requireTotalCount && localPaging) {\r\n                    options.extra = isPlainObject(options.extra) ? options.extra : {};\r\n                    options.extra.totalCount = options.data.length\r\n                }\r\n                if (options.extra && options.extra.totalCount >= 0 && (false === storeLoadOptions.requireTotalCount || false === loadOptions.requireTotalCount)) {\r\n                    options.extra.totalCount = -1\r\n                }\r\n                this._handleDataLoadedCore(options);\r\n                if (needPageCache) {\r\n                    cachedPagesData.extra = cachedPagesData.extra || extend({}, options.extra);\r\n                    when(options.data).done(data => {\r\n                        ! function(options, data) {\r\n                            var pageIndex = options.pageIndex;\r\n                            if (void 0 !== pageIndex) {\r\n                                var key = getPageKey(pageIndex, options.loadPageCount);\r\n                                options.cachedPagesData.pages[key] = data\r\n                            }\r\n                        }(options, cloneItems(data, groupCount))\r\n                    })\r\n                }\r\n            }\r\n            options.storeLoadOptions = options.originalStoreLoadOptions\r\n        },\r\n        _handleDataLoadedCore: function(options) {\r\n            if (options.remoteOperations && !options.remoteOperations.paging && Array.isArray(options.data)) {\r\n                if (void 0 !== options.skip) {\r\n                    options.data = options.data.slice(options.skip)\r\n                }\r\n                if (void 0 !== options.take) {\r\n                    options.data = options.data.slice(0, options.take)\r\n                }\r\n            }\r\n        },\r\n        _handleLoadingChanged: function(isLoading) {\r\n            this.loadingChanged.fire(isLoading)\r\n        },\r\n        _handleLoadError: function(error) {\r\n            this.loadError.fire(error);\r\n            this.changed.fire({\r\n                changeType: \"loadError\",\r\n                error: error\r\n            })\r\n        },\r\n        _loadPageSize: function() {\r\n            return this.pageSize()\r\n        },\r\n        _handleDataChanged: function(args) {\r\n            var currentTotalCount;\r\n            var dataSource = this._dataSource;\r\n            var isLoading = false;\r\n            var itemsCount = this.itemsCount();\r\n            this._isLastPage = !itemsCount || !this._loadPageSize() || itemsCount < this._loadPageSize();\r\n            if (this._isLastPage) {\r\n                this._hasLastPage = true\r\n            }\r\n            if (dataSource.totalCount() >= 0) {\r\n                if (dataSource.pageIndex() >= this.pageCount()) {\r\n                    dataSource.pageIndex(this.pageCount() - 1);\r\n                    this.pageIndex(dataSource.pageIndex());\r\n                    this.resetPagesCache();\r\n                    dataSource.load();\r\n                    isLoading = true\r\n                }\r\n            } else if (!args || isDefined(args.changeType)) {\r\n                currentTotalCount = dataSource.pageIndex() * this.pageSize() + itemsCount;\r\n                this._currentTotalCount = Math.max(this._currentTotalCount, currentTotalCount);\r\n                if (0 === itemsCount && dataSource.pageIndex() >= this.pageCount()) {\r\n                    dataSource.pageIndex(this.pageCount() - 1);\r\n                    if (\"infinite\" !== this.option(\"scrolling.mode\")) {\r\n                        dataSource.load();\r\n                        isLoading = true\r\n                    }\r\n                }\r\n            }\r\n            if (!isLoading) {\r\n                this._operationTypes = this._lastOperationTypes;\r\n                this._lastOperationTypes = {};\r\n                this.component._optionCache = {};\r\n                this.changed.fire(args);\r\n                this.component._optionCache = void 0\r\n            }\r\n        },\r\n        _scheduleCustomLoadCallbacks: function(deferred) {\r\n            var that = this;\r\n            that._isCustomLoading = true;\r\n            deferred.always((function() {\r\n                that._isCustomLoading = false\r\n            }))\r\n        },\r\n        loadingOperationTypes: function() {\r\n            return this._loadingOperationTypes\r\n        },\r\n        operationTypes: function() {\r\n            return this._operationTypes\r\n        },\r\n        lastLoadOptions: function() {\r\n            return this._lastLoadOptions || {}\r\n        },\r\n        isLastPage: function() {\r\n            return this._isLastPage\r\n        },\r\n        totalCount: function() {\r\n            return parseInt((this._currentTotalCount || this._dataSource.totalCount()) + this._skipCorrection)\r\n        },\r\n        itemsCount: function() {\r\n            return this._dataSource.items().length\r\n        },\r\n        totalItemsCount: function() {\r\n            return this.totalCount()\r\n        },\r\n        pageSize: function() {\r\n            var dataSource = this._dataSource;\r\n            if (!arguments.length && !dataSource.paginate()) {\r\n                return 0\r\n            }\r\n            return dataSource.pageSize.apply(dataSource, arguments)\r\n        },\r\n        pageCount: function() {\r\n            var count = this.totalItemsCount() - this._skipCorrection;\r\n            var pageSize = this.pageSize();\r\n            if (pageSize && count > 0) {\r\n                return Math.max(1, Math.ceil(count / pageSize))\r\n            }\r\n            return 1\r\n        },\r\n        hasKnownLastPage: function() {\r\n            return this._hasLastPage || this._dataSource.totalCount() >= 0\r\n        },\r\n        loadFromStore: function(loadOptions, store) {\r\n            var dataSource = this._dataSource;\r\n            var d = new Deferred;\r\n            if (!dataSource) {\r\n                return\r\n            }\r\n            store = store || dataSource.store();\r\n            store.load(loadOptions).done((function(data, extra) {\r\n                if (data && !Array.isArray(data) && Array.isArray(data.data)) {\r\n                    extra = data;\r\n                    data = data.data\r\n                }\r\n                d.resolve(data, extra)\r\n            })).fail(d.reject);\r\n            return d\r\n        },\r\n        isCustomLoading: function() {\r\n            return !!this._isCustomLoading\r\n        },\r\n        load: function(options) {\r\n            var that = this;\r\n            var dataSource = that._dataSource;\r\n            var d = new Deferred;\r\n            if (options) {\r\n                var store = dataSource.store();\r\n                var dataSourceLoadOptions = dataSource.loadOptions();\r\n                var loadResult = {\r\n                    storeLoadOptions: options,\r\n                    isCustomLoading: true\r\n                };\r\n                each(store._customLoadOptions() || [], (function(_, optionName) {\r\n                    if (!(optionName in loadResult.storeLoadOptions)) {\r\n                        loadResult.storeLoadOptions[optionName] = dataSourceLoadOptions[optionName]\r\n                    }\r\n                }));\r\n                this._isLoadingAll = options.isLoadingAll;\r\n                that._scheduleCustomLoadCallbacks(d);\r\n                dataSource._scheduleLoadCallbacks(d);\r\n                that._handleDataLoading(loadResult);\r\n                ! function(action, timeout) {\r\n                    if (isDefined(timeout)) {\r\n                        executeAsync(action, timeout)\r\n                    } else {\r\n                        action()\r\n                    }\r\n                }((function() {\r\n                    if (!dataSource.store()) {\r\n                        return d.reject(\"canceled\")\r\n                    }\r\n                    when(loadResult.data || that.loadFromStore(loadResult.storeLoadOptions)).done((function(data, extra) {\r\n                        loadResult.data = data;\r\n                        loadResult.extra = extra || {};\r\n                        that._handleDataLoaded(loadResult);\r\n                        if (options.requireTotalCount && void 0 === loadResult.extra.totalCount) {\r\n                            loadResult.extra.totalCount = store.totalCount(loadResult.storeLoadOptions)\r\n                        }\r\n                        when(loadResult.data, loadResult.extra.totalCount).done((function(data, totalCount) {\r\n                            loadResult.extra.totalCount = totalCount;\r\n                            d.resolve(data, loadResult.extra)\r\n                        })).fail(d.reject)\r\n                    })).fail(d.reject)\r\n                }), that.option(\"loadingTimeout\"));\r\n                return d.fail((function() {\r\n                    that._eventsStrategy.fireEvent(\"loadError\", arguments)\r\n                })).always(() => {\r\n                    this._isLoadingAll = false\r\n                }).promise()\r\n            } else {\r\n                return dataSource.load()\r\n            }\r\n        },\r\n        reload: function(full) {\r\n            return full ? this._dataSource.reload() : this._dataSource.load()\r\n        },\r\n        getCachedStoreData: function() {\r\n            return this._cachedStoreData\r\n        }\r\n    }\r\n}());\r\n"]},"metadata":{},"sourceType":"module"}