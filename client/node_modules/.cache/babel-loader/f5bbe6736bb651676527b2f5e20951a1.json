{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/date_box/ui.time_view.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Editor from \"../editor/editor\";\nimport NumberBox from \"../number_box\";\nimport SelectBox from \"../select_box\";\nimport Box from \"../box\";\nimport { extend } from \"../../core/utils/extend\";\nimport registerComponent from \"../../core/component_registrator\";\nimport dateLocalization from \"../../localization/date\";\nimport dateUtils from \"./ui.date_utils\";\nvar TIMEVIEW_CLASS = \"dx-timeview\";\nvar TIMEVIEW_CLOCK_CLASS = \"dx-timeview-clock\";\nvar TIMEVIEW_FIELD_CLASS = \"dx-timeview-field\";\nvar TIMEVIEW_HOURARROW_CLASS = \"dx-timeview-hourarrow\";\nvar TIMEVIEW_TIME_SEPARATOR_CLASS = \"dx-timeview-time-separator\";\nvar TIMEVIEW_FORMAT12_CLASS = \"dx-timeview-format12\";\nvar TIMEVIEW_FORMAT12_AM = -1;\nvar TIMEVIEW_FORMAT12_PM = 1;\nvar TIMEVIEW_MINUTEARROW_CLASS = \"dx-timeview-minutearrow\";\n\nvar rotateArrow = function ($arrow, angle, offset) {\n  cssRotate($arrow, angle, offset);\n};\n\nvar cssRotate = function ($arrow, angle, offset) {\n  $arrow.css(\"transform\", \"rotate(\" + angle + \"deg) translate(0,\" + offset + \"px)\");\n};\n\nvar TimeView = Editor.inherit({\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      value: new Date(Date.now()),\n      use24HourFormat: true,\n      _showClock: true,\n      _arrowOffset: 0,\n      stylingMode: void 0\n    });\n  },\n  _defaultOptionsRules: function () {\n    return this.callBase().concat([{\n      device: {\n        platform: \"android\"\n      },\n      options: {\n        _arrowOffset: 15\n      }\n    }, {\n      device: {\n        platform: \"generic\"\n      },\n      options: {\n        _arrowOffset: 5\n      }\n    }]);\n  },\n  _getValue: function () {\n    return this.option(\"value\") || new Date();\n  },\n  _init: function () {\n    this.callBase();\n    this.$element().addClass(TIMEVIEW_CLASS);\n  },\n  _render: function () {\n    this.callBase();\n\n    this._renderBox();\n\n    this._updateTime();\n  },\n  _renderBox: function () {\n    var $box = $(\"<div>\").appendTo(this.$element());\n    var items = [];\n\n    if (this.option(\"_showClock\")) {\n      items.push({\n        ratio: 1,\n        shrink: 0,\n        baseSize: \"auto\",\n        template: this._renderClock.bind(this)\n      });\n    }\n\n    items.push({\n      ratio: 0,\n      shrink: 0,\n      baseSize: 50,\n      template: this._renderField.bind(this)\n    });\n\n    this._createComponent($box, Box, {\n      height: \"100%\",\n      width: \"100%\",\n      direction: \"col\",\n      items: items\n    });\n  },\n  _renderClock: function (_, __, container) {\n    this._$hourArrow = $(\"<div>\").addClass(TIMEVIEW_HOURARROW_CLASS);\n    this._$minuteArrow = $(\"<div>\").addClass(TIMEVIEW_MINUTEARROW_CLASS);\n    var $container = $(container);\n    $container.addClass(TIMEVIEW_CLOCK_CLASS).append(this._$hourArrow).append(this._$minuteArrow);\n    this.setAria(\"role\", \"presentation\", $container);\n  },\n  _updateClock: function () {\n    var time = this._getValue();\n\n    var hourArrowAngle = time.getHours() / 12 * 360 + time.getMinutes() / 60 * 30;\n    var minuteArrowAngle = time.getMinutes() / 60 * 360;\n    rotateArrow(this._$hourArrow, hourArrowAngle, this.option(\"_arrowOffset\"));\n    rotateArrow(this._$minuteArrow, minuteArrowAngle, this.option(\"_arrowOffset\"));\n  },\n  _getBoxItems: function (is12HourFormat) {\n    var items = [{\n      ratio: 0,\n      shrink: 0,\n      baseSize: \"auto\",\n      template: () => this._hourBox.$element()\n    }, {\n      ratio: 0,\n      shrink: 0,\n      baseSize: \"auto\",\n      template: $(\"<div>\").addClass(TIMEVIEW_TIME_SEPARATOR_CLASS).text(dateLocalization.getTimeSeparator())\n    }, {\n      ratio: 0,\n      shrink: 0,\n      baseSize: \"auto\",\n      template: () => this._minuteBox.$element()\n    }];\n\n    if (is12HourFormat) {\n      items.push({\n        ratio: 0,\n        shrink: 0,\n        baseSize: \"auto\",\n        template: () => this._format12.$element()\n      });\n    }\n\n    return items;\n  },\n  _renderField: function () {\n    var is12HourFormat = !this.option(\"use24HourFormat\");\n\n    this._createHourBox(is12HourFormat);\n\n    this._createMinuteBox();\n\n    if (is12HourFormat) {\n      this._createFormat12Box();\n    }\n\n    return this._createComponent($(\"<div>\").addClass(TIMEVIEW_FIELD_CLASS), Box, {\n      direction: \"row\",\n      align: \"center\",\n      crossAlign: \"center\",\n      items: this._getBoxItems(is12HourFormat)\n    }).$element();\n  },\n  _createHourBox: function (is12HourFormat) {\n    var editor = this._hourBox = this._createComponent($(\"<div>\"), NumberBox, extend({\n      min: -1,\n      max: is12HourFormat ? 13 : 24,\n      value: this._getValue().getHours(),\n      onValueChanged: this._onHourBoxValueChanged.bind(this),\n      onKeyboardHandled: opts => this._keyboardHandler(opts)\n    }, this._getNumberBoxConfig()));\n\n    editor.setAria(\"label\", \"hours\");\n  },\n  _isPM: function () {\n    return !this.option(\"use24HourFormat\") && 1 === this._format12.option(\"value\");\n  },\n  _onHourBoxValueChanged: function (_ref) {\n    var {\n      value: value,\n      component: component\n    } = _ref;\n\n    var currentValue = this._getValue();\n\n    var newValue = new Date(currentValue);\n\n    var newHours = this._convertMaxHourToMin(value);\n\n    component.option(\"value\", newHours);\n\n    if (this._isPM()) {\n      newHours += 12;\n    }\n\n    newValue.setHours(newHours);\n    dateUtils.normalizeTime(newValue);\n    this.option(\"value\", newValue);\n  },\n  _convertMaxHourToMin: function (hours) {\n    var maxHoursValue = this.option(\"use24HourFormat\") ? 24 : 12;\n    return (maxHoursValue + hours) % maxHoursValue;\n  },\n  _createMinuteBox: function () {\n    var editor = this._minuteBox = this._createComponent($(\"<div>\"), NumberBox, extend({\n      min: -1,\n      max: 60,\n      value: this._getValue().getMinutes(),\n      onKeyboardHandled: opts => this._keyboardHandler(opts),\n      onValueChanged: _ref2 => {\n        var {\n          value: value,\n          component: component\n        } = _ref2;\n        var newMinutes = (60 + value) % 60;\n        component.option(\"value\", newMinutes);\n        var time = new Date(this._getValue());\n        time.setMinutes(newMinutes);\n        dateUtils.normalizeTime(time);\n        this.option(\"value\", time);\n      }\n    }, this._getNumberBoxConfig()));\n\n    editor.setAria(\"label\", \"minutes\");\n  },\n  _createFormat12Box: function () {\n    var periodNames = dateLocalization.getPeriodNames();\n\n    var editor = this._format12 = this._createComponent($(\"<div>\").addClass(TIMEVIEW_FORMAT12_CLASS), SelectBox, {\n      items: [{\n        value: TIMEVIEW_FORMAT12_AM,\n        text: periodNames[0]\n      }, {\n        value: TIMEVIEW_FORMAT12_PM,\n        text: periodNames[1]\n      }],\n      valueExpr: \"value\",\n      displayExpr: \"text\",\n      onKeyboardHandled: opts => this._keyboardHandler(opts),\n      onValueChanged: _ref3 => {\n        var {\n          value: value\n        } = _ref3;\n\n        var hours = this._getValue().getHours();\n\n        var time = new Date(this._getValue());\n        var newHours = (hours + 12 * value) % 24;\n        time.setHours(newHours);\n        this.option(\"value\", time);\n      },\n      value: this._getValue().getHours() >= 12 ? TIMEVIEW_FORMAT12_PM : TIMEVIEW_FORMAT12_AM,\n      stylingMode: this.option(\"stylingMode\")\n    });\n\n    editor.setAria(\"label\", \"type\");\n  },\n  _refreshFormat12: function () {\n    if (this.option(\"use24HourFormat\")) {\n      return;\n    }\n\n    var value = this._getValue();\n\n    var hours = value.getHours();\n    var isPM = hours >= 12;\n    var newValue = isPM ? TIMEVIEW_FORMAT12_PM : TIMEVIEW_FORMAT12_AM;\n\n    this._silentEditorValueUpdate(this._format12, newValue);\n  },\n  _silentEditorValueUpdate: function (editor, value) {\n    if (editor) {\n      editor._suppressValueChangeAction();\n\n      editor.option(\"value\", value);\n\n      editor._resumeValueChangeAction();\n    }\n  },\n  _getNumberBoxConfig: function () {\n    return {\n      showSpinButtons: true,\n      displayValueFormatter: function (value) {\n        return (value < 10 ? \"0\" : \"\") + value;\n      },\n      stylingMode: this.option(\"stylingMode\")\n    };\n  },\n  _normalizeHours: function (hours) {\n    return this.option(\"use24HourFormat\") ? hours : hours % 12 || 12;\n  },\n  _updateField: function () {\n    var hours = this._normalizeHours(this._getValue().getHours());\n\n    this._silentEditorValueUpdate(this._hourBox, hours);\n\n    this._silentEditorValueUpdate(this._minuteBox, this._getValue().getMinutes());\n\n    this._refreshFormat12();\n  },\n  _updateTime: function () {\n    if (this.option(\"_showClock\")) {\n      this._updateClock();\n    }\n\n    this._updateField();\n  },\n  _visibilityChanged: function (visible) {\n    if (visible) {\n      this._updateTime();\n    }\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"value\":\n        this._updateTime();\n\n        this.callBase(args);\n        break;\n\n      case \"_arrowOffset\":\n        break;\n\n      case \"use24HourFormat\":\n      case \"_showClock\":\n      case \"stylingMode\":\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nregisterComponent(\"dxTimeView\", TimeView);\nexport default TimeView;","map":{"version":3,"sources":["/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/node_modules/devextreme/esm/ui/date_box/ui.time_view.js"],"names":["$","Editor","NumberBox","SelectBox","Box","extend","registerComponent","dateLocalization","dateUtils","TIMEVIEW_CLASS","TIMEVIEW_CLOCK_CLASS","TIMEVIEW_FIELD_CLASS","TIMEVIEW_HOURARROW_CLASS","TIMEVIEW_TIME_SEPARATOR_CLASS","TIMEVIEW_FORMAT12_CLASS","TIMEVIEW_FORMAT12_AM","TIMEVIEW_FORMAT12_PM","TIMEVIEW_MINUTEARROW_CLASS","rotateArrow","$arrow","angle","offset","cssRotate","css","TimeView","inherit","_getDefaultOptions","callBase","value","Date","now","use24HourFormat","_showClock","_arrowOffset","stylingMode","_defaultOptionsRules","concat","device","platform","options","_getValue","option","_init","$element","addClass","_render","_renderBox","_updateTime","$box","appendTo","items","push","ratio","shrink","baseSize","template","_renderClock","bind","_renderField","_createComponent","height","width","direction","_","__","container","_$hourArrow","_$minuteArrow","$container","append","setAria","_updateClock","time","hourArrowAngle","getHours","getMinutes","minuteArrowAngle","_getBoxItems","is12HourFormat","_hourBox","text","getTimeSeparator","_minuteBox","_format12","_createHourBox","_createMinuteBox","_createFormat12Box","align","crossAlign","editor","min","max","onValueChanged","_onHourBoxValueChanged","onKeyboardHandled","opts","_keyboardHandler","_getNumberBoxConfig","_isPM","_ref","component","currentValue","newValue","newHours","_convertMaxHourToMin","setHours","normalizeTime","hours","maxHoursValue","_ref2","newMinutes","setMinutes","periodNames","getPeriodNames","valueExpr","displayExpr","_ref3","_refreshFormat12","isPM","_silentEditorValueUpdate","_suppressValueChangeAction","_resumeValueChangeAction","showSpinButtons","displayValueFormatter","_normalizeHours","_updateField","_visibilityChanged","visible","_optionChanged","args","name","_invalidate"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/date_box/ui.time_view.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport Editor from \"../editor/editor\";\r\nimport NumberBox from \"../number_box\";\r\nimport SelectBox from \"../select_box\";\r\nimport Box from \"../box\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport registerComponent from \"../../core/component_registrator\";\r\nimport dateLocalization from \"../../localization/date\";\r\nimport dateUtils from \"./ui.date_utils\";\r\nvar TIMEVIEW_CLASS = \"dx-timeview\";\r\nvar TIMEVIEW_CLOCK_CLASS = \"dx-timeview-clock\";\r\nvar TIMEVIEW_FIELD_CLASS = \"dx-timeview-field\";\r\nvar TIMEVIEW_HOURARROW_CLASS = \"dx-timeview-hourarrow\";\r\nvar TIMEVIEW_TIME_SEPARATOR_CLASS = \"dx-timeview-time-separator\";\r\nvar TIMEVIEW_FORMAT12_CLASS = \"dx-timeview-format12\";\r\nvar TIMEVIEW_FORMAT12_AM = -1;\r\nvar TIMEVIEW_FORMAT12_PM = 1;\r\nvar TIMEVIEW_MINUTEARROW_CLASS = \"dx-timeview-minutearrow\";\r\nvar rotateArrow = function($arrow, angle, offset) {\r\n    cssRotate($arrow, angle, offset)\r\n};\r\nvar cssRotate = function($arrow, angle, offset) {\r\n    $arrow.css(\"transform\", \"rotate(\" + angle + \"deg) translate(0,\" + offset + \"px)\")\r\n};\r\nvar TimeView = Editor.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            value: new Date(Date.now()),\r\n            use24HourFormat: true,\r\n            _showClock: true,\r\n            _arrowOffset: 0,\r\n            stylingMode: void 0\r\n        })\r\n    },\r\n    _defaultOptionsRules: function() {\r\n        return this.callBase().concat([{\r\n            device: {\r\n                platform: \"android\"\r\n            },\r\n            options: {\r\n                _arrowOffset: 15\r\n            }\r\n        }, {\r\n            device: {\r\n                platform: \"generic\"\r\n            },\r\n            options: {\r\n                _arrowOffset: 5\r\n            }\r\n        }])\r\n    },\r\n    _getValue: function() {\r\n        return this.option(\"value\") || new Date\r\n    },\r\n    _init: function() {\r\n        this.callBase();\r\n        this.$element().addClass(TIMEVIEW_CLASS)\r\n    },\r\n    _render: function() {\r\n        this.callBase();\r\n        this._renderBox();\r\n        this._updateTime()\r\n    },\r\n    _renderBox: function() {\r\n        var $box = $(\"<div>\").appendTo(this.$element());\r\n        var items = [];\r\n        if (this.option(\"_showClock\")) {\r\n            items.push({\r\n                ratio: 1,\r\n                shrink: 0,\r\n                baseSize: \"auto\",\r\n                template: this._renderClock.bind(this)\r\n            })\r\n        }\r\n        items.push({\r\n            ratio: 0,\r\n            shrink: 0,\r\n            baseSize: 50,\r\n            template: this._renderField.bind(this)\r\n        });\r\n        this._createComponent($box, Box, {\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            direction: \"col\",\r\n            items: items\r\n        })\r\n    },\r\n    _renderClock: function(_, __, container) {\r\n        this._$hourArrow = $(\"<div>\").addClass(TIMEVIEW_HOURARROW_CLASS);\r\n        this._$minuteArrow = $(\"<div>\").addClass(TIMEVIEW_MINUTEARROW_CLASS);\r\n        var $container = $(container);\r\n        $container.addClass(TIMEVIEW_CLOCK_CLASS).append(this._$hourArrow).append(this._$minuteArrow);\r\n        this.setAria(\"role\", \"presentation\", $container)\r\n    },\r\n    _updateClock: function() {\r\n        var time = this._getValue();\r\n        var hourArrowAngle = time.getHours() / 12 * 360 + time.getMinutes() / 60 * 30;\r\n        var minuteArrowAngle = time.getMinutes() / 60 * 360;\r\n        rotateArrow(this._$hourArrow, hourArrowAngle, this.option(\"_arrowOffset\"));\r\n        rotateArrow(this._$minuteArrow, minuteArrowAngle, this.option(\"_arrowOffset\"))\r\n    },\r\n    _getBoxItems: function(is12HourFormat) {\r\n        var items = [{\r\n            ratio: 0,\r\n            shrink: 0,\r\n            baseSize: \"auto\",\r\n            template: () => this._hourBox.$element()\r\n        }, {\r\n            ratio: 0,\r\n            shrink: 0,\r\n            baseSize: \"auto\",\r\n            template: $(\"<div>\").addClass(TIMEVIEW_TIME_SEPARATOR_CLASS).text(dateLocalization.getTimeSeparator())\r\n        }, {\r\n            ratio: 0,\r\n            shrink: 0,\r\n            baseSize: \"auto\",\r\n            template: () => this._minuteBox.$element()\r\n        }];\r\n        if (is12HourFormat) {\r\n            items.push({\r\n                ratio: 0,\r\n                shrink: 0,\r\n                baseSize: \"auto\",\r\n                template: () => this._format12.$element()\r\n            })\r\n        }\r\n        return items\r\n    },\r\n    _renderField: function() {\r\n        var is12HourFormat = !this.option(\"use24HourFormat\");\r\n        this._createHourBox(is12HourFormat);\r\n        this._createMinuteBox();\r\n        if (is12HourFormat) {\r\n            this._createFormat12Box()\r\n        }\r\n        return this._createComponent($(\"<div>\").addClass(TIMEVIEW_FIELD_CLASS), Box, {\r\n            direction: \"row\",\r\n            align: \"center\",\r\n            crossAlign: \"center\",\r\n            items: this._getBoxItems(is12HourFormat)\r\n        }).$element()\r\n    },\r\n    _createHourBox: function(is12HourFormat) {\r\n        var editor = this._hourBox = this._createComponent($(\"<div>\"), NumberBox, extend({\r\n            min: -1,\r\n            max: is12HourFormat ? 13 : 24,\r\n            value: this._getValue().getHours(),\r\n            onValueChanged: this._onHourBoxValueChanged.bind(this),\r\n            onKeyboardHandled: opts => this._keyboardHandler(opts)\r\n        }, this._getNumberBoxConfig()));\r\n        editor.setAria(\"label\", \"hours\")\r\n    },\r\n    _isPM: function() {\r\n        return !this.option(\"use24HourFormat\") && 1 === this._format12.option(\"value\")\r\n    },\r\n    _onHourBoxValueChanged: function(_ref) {\r\n        var {\r\n            value: value,\r\n            component: component\r\n        } = _ref;\r\n        var currentValue = this._getValue();\r\n        var newValue = new Date(currentValue);\r\n        var newHours = this._convertMaxHourToMin(value);\r\n        component.option(\"value\", newHours);\r\n        if (this._isPM()) {\r\n            newHours += 12\r\n        }\r\n        newValue.setHours(newHours);\r\n        dateUtils.normalizeTime(newValue);\r\n        this.option(\"value\", newValue)\r\n    },\r\n    _convertMaxHourToMin: function(hours) {\r\n        var maxHoursValue = this.option(\"use24HourFormat\") ? 24 : 12;\r\n        return (maxHoursValue + hours) % maxHoursValue\r\n    },\r\n    _createMinuteBox: function() {\r\n        var editor = this._minuteBox = this._createComponent($(\"<div>\"), NumberBox, extend({\r\n            min: -1,\r\n            max: 60,\r\n            value: this._getValue().getMinutes(),\r\n            onKeyboardHandled: opts => this._keyboardHandler(opts),\r\n            onValueChanged: _ref2 => {\r\n                var {\r\n                    value: value,\r\n                    component: component\r\n                } = _ref2;\r\n                var newMinutes = (60 + value) % 60;\r\n                component.option(\"value\", newMinutes);\r\n                var time = new Date(this._getValue());\r\n                time.setMinutes(newMinutes);\r\n                dateUtils.normalizeTime(time);\r\n                this.option(\"value\", time)\r\n            }\r\n        }, this._getNumberBoxConfig()));\r\n        editor.setAria(\"label\", \"minutes\")\r\n    },\r\n    _createFormat12Box: function() {\r\n        var periodNames = dateLocalization.getPeriodNames();\r\n        var editor = this._format12 = this._createComponent($(\"<div>\").addClass(TIMEVIEW_FORMAT12_CLASS), SelectBox, {\r\n            items: [{\r\n                value: TIMEVIEW_FORMAT12_AM,\r\n                text: periodNames[0]\r\n            }, {\r\n                value: TIMEVIEW_FORMAT12_PM,\r\n                text: periodNames[1]\r\n            }],\r\n            valueExpr: \"value\",\r\n            displayExpr: \"text\",\r\n            onKeyboardHandled: opts => this._keyboardHandler(opts),\r\n            onValueChanged: _ref3 => {\r\n                var {\r\n                    value: value\r\n                } = _ref3;\r\n                var hours = this._getValue().getHours();\r\n                var time = new Date(this._getValue());\r\n                var newHours = (hours + 12 * value) % 24;\r\n                time.setHours(newHours);\r\n                this.option(\"value\", time)\r\n            },\r\n            value: this._getValue().getHours() >= 12 ? TIMEVIEW_FORMAT12_PM : TIMEVIEW_FORMAT12_AM,\r\n            stylingMode: this.option(\"stylingMode\")\r\n        });\r\n        editor.setAria(\"label\", \"type\")\r\n    },\r\n    _refreshFormat12: function() {\r\n        if (this.option(\"use24HourFormat\")) {\r\n            return\r\n        }\r\n        var value = this._getValue();\r\n        var hours = value.getHours();\r\n        var isPM = hours >= 12;\r\n        var newValue = isPM ? TIMEVIEW_FORMAT12_PM : TIMEVIEW_FORMAT12_AM;\r\n        this._silentEditorValueUpdate(this._format12, newValue)\r\n    },\r\n    _silentEditorValueUpdate: function(editor, value) {\r\n        if (editor) {\r\n            editor._suppressValueChangeAction();\r\n            editor.option(\"value\", value);\r\n            editor._resumeValueChangeAction()\r\n        }\r\n    },\r\n    _getNumberBoxConfig: function() {\r\n        return {\r\n            showSpinButtons: true,\r\n            displayValueFormatter: function(value) {\r\n                return (value < 10 ? \"0\" : \"\") + value\r\n            },\r\n            stylingMode: this.option(\"stylingMode\")\r\n        }\r\n    },\r\n    _normalizeHours: function(hours) {\r\n        return this.option(\"use24HourFormat\") ? hours : hours % 12 || 12\r\n    },\r\n    _updateField: function() {\r\n        var hours = this._normalizeHours(this._getValue().getHours());\r\n        this._silentEditorValueUpdate(this._hourBox, hours);\r\n        this._silentEditorValueUpdate(this._minuteBox, this._getValue().getMinutes());\r\n        this._refreshFormat12()\r\n    },\r\n    _updateTime: function() {\r\n        if (this.option(\"_showClock\")) {\r\n            this._updateClock()\r\n        }\r\n        this._updateField()\r\n    },\r\n    _visibilityChanged: function(visible) {\r\n        if (visible) {\r\n            this._updateTime()\r\n        }\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"value\":\r\n                this._updateTime();\r\n                this.callBase(args);\r\n                break;\r\n            case \"_arrowOffset\":\r\n                break;\r\n            case \"use24HourFormat\":\r\n            case \"_showClock\":\r\n            case \"stylingMode\":\r\n                this._invalidate();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nregisterComponent(\"dxTimeView\", TimeView);\r\nexport default TimeView;\r\n"]},"metadata":{},"sourceType":"module"}