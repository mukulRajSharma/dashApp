{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.keyboard_navigation.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport core from \"./ui.grid_core.modules\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { isDefined, isEmptyObject } from \"../../core/utils/type\";\nimport { inArray } from \"../../core/utils/array\";\nimport { focused } from \"../widget/selectors\";\nimport { addNamespace, createEvent, isCommandKeyPressed } from \"../../events/utils/index\";\nimport pointerEvents from \"../../events/pointer\";\nimport { name as clickEventName } from \"../../events/click\";\nimport { noop } from \"../../core/utils/common\";\nimport * as accessibility from \"../shared/accessibility\";\nimport browser from \"../../core/utils/browser\";\nimport { keyboard } from \"../../events/short\";\nimport devices from \"../../core/devices\";\nvar ROWS_VIEW_CLASS = \"rowsview\";\nvar EDIT_FORM_CLASS = \"edit-form\";\nvar GROUP_FOOTER_CLASS = \"group-footer\";\nvar ROW_CLASS = \"dx-row\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar GROUP_ROW_CLASS = \"dx-group-row\";\nvar HEADER_ROW_CLASS = \"dx-header-row\";\nvar EDIT_FORM_ITEM_CLASS = \"edit-form-item\";\nvar MASTER_DETAIL_ROW_CLASS = \"dx-master-detail-row\";\nvar FREESPACE_ROW_CLASS = \"dx-freespace-row\";\nvar VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\nvar DROPDOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\nvar COMMAND_EXPAND_CLASS = \"dx-command-expand\";\nvar COMMAND_SELECT_CLASS = \"dx-command-select\";\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\nvar COMMAND_CELL_SELECTOR = \"[class^=dx-command]\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar DATEBOX_WIDGET_NAME = \"dxDateBox\";\nvar FOCUS_STATE_CLASS = \"dx-state-focused\";\nvar WIDGET_CLASS = \"dx-widget\";\nvar REVERT_BUTTON_CLASS = \"dx-revert-button\";\nvar FAST_EDITING_DELETE_KEY = \"delete\";\nvar INTERACTIVE_ELEMENTS_SELECTOR = \"input:not([type='hidden']), textarea, a, select, button, [tabindex], .dx-dropdowneditor-icon\";\nvar EDIT_MODE_ROW = \"row\";\nvar EDIT_MODE_FORM = \"form\";\nvar EDIT_MODE_BATCH = \"batch\";\nvar EDIT_MODE_CELL = \"cell\";\nvar FOCUS_TYPE_ROW = \"row\";\nvar FOCUS_TYPE_CELL = \"cell\";\nvar COLUMN_HEADERS_VIEW = \"columnHeadersView\";\n\nfunction isGroupRow($row) {\n  return $row && $row.hasClass(GROUP_ROW_CLASS);\n}\n\nfunction isDetailRow($row) {\n  return $row && $row.hasClass(MASTER_DETAIL_ROW_CLASS);\n}\n\nfunction isDataRow($row) {\n  return $row && !isGroupRow($row) && !isDetailRow($row);\n}\n\nfunction isNotFocusedRow($row) {\n  return !$row || $row.hasClass(FREESPACE_ROW_CLASS) || $row.hasClass(VIRTUAL_ROW_CLASS);\n}\n\nfunction isCellElement($element) {\n  return $element.length && \"TD\" === $element[0].tagName;\n}\n\nfunction isEditorCell(that, $cell) {\n  return !that._isRowEditMode() && $cell && !$cell.hasClass(COMMAND_SELECT_CLASS) && $cell.hasClass(EDITOR_CELL_CLASS);\n}\n\nfunction isElementDefined($element) {\n  return isDefined($element) && $element.length > 0;\n}\n\nfunction isMobile() {\n  return \"desktop\" !== devices.current().deviceType;\n}\n\nfunction isCellInHeaderRow($cell) {\n  return !!$cell.parent(\".\".concat(HEADER_ROW_CLASS)).length;\n}\n\nfunction isFixedColumnIndexOffsetRequired(that, column) {\n  var rtlEnabled = that.option(\"rtlEnabled\");\n  var result = false;\n\n  if (rtlEnabled) {\n    result = !(\"right\" === column.fixedPosition || isDefined(column.command) && !isDefined(column.fixedPosition));\n  } else {\n    result = !(!isDefined(column.fixedPosition) || \"left\" === column.fixedPosition);\n  }\n\n  return result;\n}\n\nfunction shouldPreventScroll(that) {\n  var keyboardController = that.getController(\"keyboardNavigation\");\n  return keyboardController._isVirtualScrolling() ? that.option(\"focusedRowIndex\") === keyboardController.getRowIndex() : false;\n}\n\nvar KeyboardNavigationController = core.ViewController.inherit({\n  init: function () {\n    this._dataController = this.getController(\"data\");\n    this._selectionController = this.getController(\"selection\");\n    this._editingController = this.getController(\"editing\");\n    this._headerPanel = this.getView(\"headerPanel\");\n    this._columnsController = this.getController(\"columns\");\n    this._editorFactory = this.getController(\"editorFactory\");\n\n    if (this.isKeyboardEnabled()) {\n      accessibility.subscribeVisibilityChange();\n      this._updateFocusTimeout = null;\n      this._fastEditingStarted = false;\n      this._focusedCellPosition = {};\n      this._canceledCellPosition = null;\n\n      this._editorFactory.focused.add($element => {\n        this.setupFocusedView();\n\n        if (this._isNeedScroll) {\n          if ($element.is(\":visible\") && this._focusedView && this._focusedView.getScrollable) {\n            this._focusedView._scrollToElement($element);\n\n            this._isNeedScroll = false;\n          }\n        }\n      });\n\n      this._initViewHandlers();\n\n      this._initDocumentHandlers();\n\n      this.createAction(\"onKeyDown\");\n    }\n  },\n  _initViewHandlers: function () {\n    var rowsView = this.getView(\"rowsView\");\n\n    var rowsViewFocusHandler = event => {\n      var $element = $(event.target);\n      var isRelatedTargetInRowsView = $(event.relatedTarget).closest(rowsView.element()).length;\n      var isCommandButton = $element.hasClass(\"dx-link\");\n\n      if (isCommandButton && !isRelatedTargetInRowsView && this._isEventInCurrentGrid(event)) {\n        var $focusedCell = this._getFocusedCell();\n\n        $focusedCell = !isElementDefined($focusedCell) ? rowsView.getCellElements(0).filter(\"[tabindex]\").eq(0) : $focusedCell;\n\n        if (!$element.closest($focusedCell).length) {\n          event.preventDefault();\n          eventsEngine.trigger($focusedCell, \"focus\");\n        }\n      }\n    };\n\n    rowsView.renderCompleted.add(e => {\n      var $rowsView = rowsView.element();\n      var isFullUpdate = !e || \"refresh\" === e.changeType;\n      var isFocusedViewCorrect = this._focusedView && this._focusedView.name === rowsView.name;\n      var needUpdateFocus = false;\n      var isAppend = e && (\"append\" === e.changeType || \"prepend\" === e.changeType);\n      var $focusedElement = $(\":focus\");\n      var isFocusedElementCorrect = !$focusedElement.length || $focusedElement.closest($rowsView).length || browser.msie && $focusedElement.is(\"body\");\n      eventsEngine.off($rowsView, \"focusin\", rowsViewFocusHandler);\n      eventsEngine.on($rowsView, \"focusin\", rowsViewFocusHandler);\n\n      this._initPointerEventHandler();\n\n      this._initKeyDownHandler();\n\n      this._setRowsViewAttributes();\n\n      if (isFocusedViewCorrect && isFocusedElementCorrect) {\n        needUpdateFocus = this._isNeedFocus ? !isAppend : this._isHiddenFocus && isFullUpdate;\n        needUpdateFocus && this._updateFocus(true);\n      }\n    });\n  },\n  _initDocumentHandlers: function () {\n    var document = domAdapter.getDocument();\n    this._documentClickHandler = this.createAction(e => {\n      var $target = $(e.event.target);\n      var isCurrentRowsViewClick = this._isEventInCurrentGrid(e.event) && $target.closest(\".\".concat(this.addWidgetPrefix(ROWS_VIEW_CLASS))).length;\n      var isEditorOverlay = $target.closest(\".\".concat(DROPDOWN_EDITOR_OVERLAY_CLASS)).length;\n      var columnsResizerController = this.getController(\"columnsResizer\");\n      var isColumnResizing = !!columnsResizerController && columnsResizerController.isResizing();\n\n      if (!isCurrentRowsViewClick && !isEditorOverlay && !isColumnResizing) {\n        var targetInsideFocusedView = this._focusedView ? $target.parents().filter(this._focusedView.element()).length > 0 : false;\n        !targetInsideFocusedView && this._resetFocusedCell(true);\n\n        this._resetFocusedView();\n      }\n    });\n    eventsEngine.on(document, addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler);\n  },\n  _setRowsViewAttributes: function () {\n    var $rowsView = this._getRowsViewElement();\n\n    var isGridEmpty = !this._dataController.getVisibleRows().length;\n\n    if (isGridEmpty) {\n      this._applyTabIndexToElement($rowsView);\n    }\n  },\n  _initPointerEventHandler: function () {\n    var pointerEventName = !isMobile() ? pointerEvents.down : clickEventName;\n    var clickSelector = \".\".concat(ROW_CLASS, \" > td, .\").concat(ROW_CLASS);\n\n    var $rowsView = this._getRowsViewElement();\n\n    if (!isDefined(this._pointerEventAction)) {\n      this._pointerEventAction = this.createAction(this._pointerEventHandler);\n    }\n\n    eventsEngine.off($rowsView, addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), this._pointerEventAction);\n    eventsEngine.on($rowsView, addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), clickSelector, this._pointerEventAction);\n  },\n  _initKeyDownHandler: function () {\n    var $rowsView = this._getRowsViewElement();\n\n    keyboard.off(this._keyDownListener);\n    this._keyDownListener = keyboard.on($rowsView, null, e => this._keyDownHandler(e));\n  },\n  dispose: function () {\n    this.callBase();\n\n    this._resetFocusedView();\n\n    keyboard.off(this._keyDownListener);\n    eventsEngine.off(domAdapter.getDocument(), addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler);\n    clearTimeout(this._updateFocusTimeout);\n    accessibility.unsubscribeVisibilityChange();\n  },\n  optionChanged: function (args) {\n    switch (args.name) {\n      case \"keyboardNavigation\":\n      case \"useLegacyKeyboardNavigation\":\n        args.handled = true;\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  isRowFocusType: function () {\n    return this.focusType === FOCUS_TYPE_ROW;\n  },\n  isCellFocusType: function () {\n    return this.focusType === FOCUS_TYPE_CELL;\n  },\n  setRowFocusType: function () {\n    if (this.option(\"focusedRowEnabled\")) {\n      this.focusType = FOCUS_TYPE_ROW;\n    }\n  },\n  setCellFocusType: function () {\n    this.focusType = FOCUS_TYPE_CELL;\n  },\n  _keyDownHandler: function (e) {\n    var isEditing = this._editingController.isEditing();\n\n    var needStopPropagation = true;\n    var originalEvent = e.originalEvent;\n\n    var isHandled = this._processOnKeyDown(e);\n\n    if (originalEvent.isDefaultPrevented()) {\n      return;\n    }\n\n    this._isNeedFocus = true;\n    this._isNeedScroll = true;\n\n    this._updateFocusedCellPositionByTarget(originalEvent.target);\n\n    if (!isHandled) {\n      switch (e.keyName) {\n        case \"leftArrow\":\n        case \"rightArrow\":\n          this._leftRightKeysHandler(e, isEditing);\n\n          break;\n\n        case \"upArrow\":\n        case \"downArrow\":\n          if (e.ctrl) {\n            accessibility.selectView(\"rowsView\", this, originalEvent);\n          } else {\n            this._upDownKeysHandler(e, isEditing);\n          }\n\n          break;\n\n        case \"pageUp\":\n        case \"pageDown\":\n          this._pageUpDownKeyHandler(e);\n\n          break;\n\n        case \"space\":\n          this._spaceKeyHandler(e, isEditing);\n\n          break;\n\n        case \"A\":\n          if (isCommandKeyPressed(e.originalEvent)) {\n            this._ctrlAKeyHandler(e, isEditing);\n          } else {\n            this._beginFastEditing(e.originalEvent);\n          }\n\n          break;\n\n        case \"tab\":\n          this._tabKeyHandler(e, isEditing);\n\n          break;\n\n        case \"enter\":\n          this._enterKeyHandler(e, isEditing);\n\n          break;\n\n        case \"escape\":\n          this._escapeKeyHandler(e, isEditing);\n\n          break;\n\n        case \"F\":\n          if (isCommandKeyPressed(e.originalEvent)) {\n            this._ctrlFKeyHandler(e);\n          } else {\n            this._beginFastEditing(e.originalEvent);\n          }\n\n          break;\n\n        case \"F2\":\n          this._f2KeyHandler();\n\n          break;\n\n        case \"del\":\n        case \"backspace\":\n          if (this._isFastEditingAllowed() && !this._isFastEditingStarted()) {\n            this._beginFastEditing(originalEvent, true);\n          }\n\n          break;\n\n        default:\n          if (!this._beginFastEditing(originalEvent)) {\n            this._isNeedFocus = false;\n            this._isNeedScroll = false;\n            needStopPropagation = false;\n          }\n\n      }\n\n      if (needStopPropagation) {\n        originalEvent.stopPropagation();\n      }\n    }\n  },\n  _processOnKeyDown: function (eventArgs) {\n    var originalEvent = eventArgs.originalEvent;\n    var args = {\n      handled: false,\n      event: originalEvent\n    };\n    this.executeAction(\"onKeyDown\", args);\n    eventArgs.ctrl = originalEvent.ctrlKey;\n    eventArgs.alt = originalEvent.altKey;\n    eventArgs.shift = originalEvent.shiftKey;\n    return !!args.handled;\n  },\n  _closeEditCell: function () {\n    setTimeout(() => {\n      this._editingController.closeEditCell();\n    });\n  },\n  _leftRightKeysHandler: function (eventArgs, isEditing) {\n    var rowIndex = this.getVisibleRowIndex();\n    var $event = eventArgs.originalEvent;\n\n    var $row = this._focusedView && this._focusedView.getRow(rowIndex);\n\n    var directionCode = this._getDirectionCodeByKey(eventArgs.keyName);\n\n    var isEditingNavigationMode = this._isFastEditingStarted();\n\n    var allowNavigate = (!isEditing || isEditingNavigationMode) && isDataRow($row);\n\n    if (allowNavigate) {\n      this.setCellFocusType();\n      isEditingNavigationMode && this._closeEditCell();\n\n      if (this._isVirtualColumnRender()) {\n        this._processVirtualHorizontalPosition(directionCode);\n      }\n\n      var $cell = this._getNextCell(directionCode);\n\n      if (isElementDefined($cell)) {\n        this._arrowKeysHandlerFocusCell($event, $cell, directionCode);\n      }\n\n      $event && $event.preventDefault();\n    }\n  },\n  _upDownKeysHandler: function (eventArgs, isEditing) {\n    var rowIndex = this._focusedCellPosition.rowIndex;\n    var visibleRowIndex = this.getVisibleRowIndex();\n\n    var $row = this._focusedView && this._focusedView.getRow(visibleRowIndex);\n\n    var $event = eventArgs.originalEvent;\n    var isUpArrow = \"upArrow\" === eventArgs.keyName;\n\n    var dataSource = this._dataController.dataSource();\n\n    var isEditingNavigationMode = this._isFastEditingStarted();\n\n    var allowNavigate = (!isEditing || isEditingNavigationMode) && $row && !isDetailRow($row);\n\n    if (allowNavigate) {\n      isEditingNavigationMode && this._closeEditCell();\n\n      if (!this._navigateNextCell($event, eventArgs.keyName)) {\n        if (this._isVirtualRowRender() && isUpArrow && dataSource && !dataSource.isLoading()) {\n          var rowHeight = $row.outerHeight();\n          rowIndex = this._focusedCellPosition.rowIndex - 1;\n\n          this._scrollBy(0, -rowHeight, rowIndex, $event);\n        }\n      }\n\n      $event && $event.preventDefault();\n    }\n  },\n  _pageUpDownKeyHandler: function (eventArgs) {\n    var pageIndex = this._dataController.pageIndex();\n\n    var pageCount = this._dataController.pageCount();\n\n    var pagingEnabled = this.option(\"paging.enabled\");\n    var isPageUp = \"pageUp\" === eventArgs.keyName;\n    var pageStep = isPageUp ? -1 : 1;\n    var scrollable = this.getView(\"rowsView\").getScrollable();\n\n    if (pagingEnabled && !this._isVirtualScrolling()) {\n      if ((isPageUp ? pageIndex > 0 : pageIndex < pageCount - 1) && !this._isVirtualScrolling()) {\n        this._dataController.pageIndex(pageIndex + pageStep);\n\n        eventArgs.originalEvent.preventDefault();\n      }\n    } else if (scrollable && scrollable._container().height() < scrollable.$content().height()) {\n      this._scrollBy(0, scrollable._container().height() * pageStep);\n\n      eventArgs.originalEvent.preventDefault();\n    }\n  },\n  _spaceKeyHandler: function (eventArgs, isEditing) {\n    var rowIndex = this.getVisibleRowIndex();\n    var $target = $(eventArgs.originalEvent && eventArgs.originalEvent.target);\n\n    if (this.option(\"selection\") && \"none\" !== this.option(\"selection\").mode && !isEditing) {\n      var isFocusedRowElement = \"row\" === this._getElementType($target) && this.isRowFocusType() && isDataRow($target);\n      var isFocusedSelectionCell = $target.hasClass(COMMAND_SELECT_CLASS);\n\n      if (isFocusedSelectionCell && \"onClick\" === this.option(\"selection.showCheckBoxesMode\")) {\n        this._selectionController.startSelectionWithCheckboxes();\n      }\n\n      if (isFocusedRowElement || $target.parent().hasClass(DATA_ROW_CLASS) || $target.hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS))) {\n        this._selectionController.changeItemSelection(rowIndex, {\n          shift: eventArgs.shift,\n          control: eventArgs.ctrl\n        });\n\n        eventArgs.originalEvent.preventDefault();\n      }\n    } else {\n      this._beginFastEditing(eventArgs.originalEvent);\n    }\n  },\n  _ctrlAKeyHandler: function (eventArgs, isEditing) {\n    if (!isEditing && !eventArgs.alt && \"multiple\" === this.option(\"selection.mode\") && this.option(\"selection.allowSelectAll\")) {\n      this._selectionController.selectAll();\n\n      eventArgs.originalEvent.preventDefault();\n    }\n  },\n  _tabKeyHandler: function (eventArgs, isEditing) {\n    var editingOptions = this.option(\"editing\");\n    var direction = eventArgs.shift ? \"previous\" : \"next\";\n    var isCellPositionDefined = isDefined(this._focusedCellPosition) && !isEmptyObject(this._focusedCellPosition);\n\n    var isOriginalHandlerRequired = !isCellPositionDefined || !eventArgs.shift && this._isLastValidCell(this._focusedCellPosition) || eventArgs.shift && this._isFirstValidCell(this._focusedCellPosition);\n\n    var eventTarget = eventArgs.originalEvent.target;\n\n    var focusedViewElement = this._focusedView && this._focusedView.element();\n\n    if (this._handleTabKeyOnMasterDetailCell(eventTarget, direction)) {\n      return;\n    }\n\n    $(focusedViewElement).addClass(FOCUS_STATE_CLASS);\n\n    if (editingOptions && eventTarget && !isOriginalHandlerRequired) {\n      if ($(eventTarget).hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS))) {\n        this._resetFocusedCell();\n      }\n\n      if (this._isVirtualColumnRender()) {\n        this._processVirtualHorizontalPosition(direction);\n      }\n\n      if (isEditing) {\n        if (!this._editingCellTabHandler(eventArgs, direction)) {\n          return;\n        }\n      } else if (this._targetCellTabHandler(eventArgs, direction)) {\n        isOriginalHandlerRequired = true;\n      }\n    }\n\n    if (isOriginalHandlerRequired) {\n      this._editorFactory.loseFocus();\n\n      if (this._editingController.isEditing() && !this._isRowEditMode()) {\n        this._resetFocusedCell(true);\n\n        this._resetFocusedView();\n\n        this._closeEditCell();\n      }\n    } else {\n      eventArgs.originalEvent.preventDefault();\n    }\n  },\n  _getMaxHorizontalOffset: function () {\n    var scrollable = this.component.getScrollable();\n    var rowsView = this.getView(\"rowsView\");\n    var offset = scrollable ? scrollable.scrollWidth() - $(rowsView.element()).width() : 0;\n    return offset;\n  },\n  _isColumnRendered: function (columnIndex) {\n    var allVisibleColumns = this._columnsController.getVisibleColumns(null, true);\n\n    var renderedVisibleColumns = this._columnsController.getVisibleColumns();\n\n    var column = allVisibleColumns[columnIndex];\n    var result = false;\n\n    if (column) {\n      result = renderedVisibleColumns.indexOf(column) >= 0;\n    }\n\n    return result;\n  },\n  _isFixedColumn: function (columnIndex) {\n    var allVisibleColumns = this._columnsController.getVisibleColumns(null, true);\n\n    var column = allVisibleColumns[columnIndex];\n    return !!column && !!column.fixed;\n  },\n  _isColumnVirtual: function (columnIndex) {\n    var localColumnIndex = columnIndex - this._columnsController.getColumnIndexOffset();\n\n    var visibleColumns = this._columnsController.getVisibleColumns();\n\n    var column = visibleColumns[localColumnIndex];\n    return !!column && \"virtual\" === column.command;\n  },\n  _processVirtualHorizontalPosition: function (direction) {\n    var scrollable = this.component.getScrollable();\n    var columnIndex = this.getColumnIndex();\n    var nextColumnIndex;\n    var horizontalScrollPosition = 0;\n    var needToScroll = false;\n\n    switch (direction) {\n      case \"next\":\n      case \"nextInRow\":\n        var columnsCount = this._getVisibleColumnCount();\n\n        nextColumnIndex = columnIndex + 1;\n        horizontalScrollPosition = this.option(\"rtlEnabled\") ? this._getMaxHorizontalOffset() : 0;\n\n        if (\"next\" === direction) {\n          needToScroll = columnsCount === nextColumnIndex || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n        } else {\n          needToScroll = columnsCount > nextColumnIndex && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n        }\n\n        break;\n\n      case \"previous\":\n      case \"previousInRow\":\n        nextColumnIndex = columnIndex - 1;\n        horizontalScrollPosition = this.option(\"rtlEnabled\") ? 0 : this._getMaxHorizontalOffset();\n\n        if (\"previous\" === direction) {\n          var columnIndexOffset = this._columnsController.getColumnIndexOffset();\n\n          var leftEdgePosition = nextColumnIndex < 0 && 0 === columnIndexOffset;\n          needToScroll = leftEdgePosition || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n        } else {\n          needToScroll = nextColumnIndex >= 0 && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n        }\n\n    }\n\n    if (needToScroll) {\n      scrollable.scrollTo({\n        left: horizontalScrollPosition\n      });\n    } else if (isDefined(nextColumnIndex) && isDefined(direction) && this._isColumnVirtual(nextColumnIndex)) {\n      horizontalScrollPosition = this._getHorizontalScrollPositionOffset(direction);\n      0 !== horizontalScrollPosition && scrollable.scrollBy({\n        left: horizontalScrollPosition,\n        top: 0\n      });\n    }\n  },\n  _getHorizontalScrollPositionOffset: function (direction) {\n    var positionOffset = 0;\n\n    var $currentCell = this._getCell(this._focusedCellPosition);\n\n    var currentCellWidth = $currentCell && $currentCell.outerWidth();\n\n    if (currentCellWidth > 0) {\n      var rtlMultiplier = this.option(\"rtlEnabled\") ? -1 : 1;\n      positionOffset = \"nextInRow\" === direction || \"next\" === direction ? currentCellWidth * rtlMultiplier : currentCellWidth * rtlMultiplier * -1;\n    }\n\n    return positionOffset;\n  },\n  _editingCellTabHandler: function (eventArgs, direction) {\n    var eventTarget = eventArgs.originalEvent.target;\n\n    var $cell = this._getCellElementFromTarget(eventTarget);\n\n    var isEditingAllowed;\n    var $event = eventArgs.originalEvent;\n\n    var elementType = this._getElementType(eventTarget);\n\n    if ($cell.is(COMMAND_CELL_SELECTOR)) {\n      return !this._targetCellTabHandler(eventArgs, direction);\n    }\n\n    this._updateFocusedCellPosition($cell);\n\n    var nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\n\n    $cell = nextCellInfo.$cell;\n\n    if (!$cell || this._handleTabKeyOnMasterDetailCell($cell, direction)) {\n      return false;\n    }\n\n    var columnsController = this._columnsController;\n    var cellIndex = this.getView(\"rowsView\").getCellIndex($cell);\n    var columnIndex = cellIndex + columnsController.getColumnIndexOffset();\n    var column = columnsController.getVisibleColumns(null, true)[columnIndex];\n    var $row = $cell.parent();\n\n    var rowIndex = this._getRowIndex($row);\n\n    var row = this._dataController.items()[rowIndex];\n\n    var editingController = this._editingController;\n\n    if (column && column.allowEditing) {\n      var _isDataRow = !row || \"data\" === row.rowType;\n\n      isEditingAllowed = editingController.allowUpdating({\n        row: row\n      }) ? _isDataRow : row && row.isNewRow;\n    }\n\n    if (!isEditingAllowed) {\n      this._closeEditCell();\n    }\n\n    if (this._focusCell($cell, !nextCellInfo.isHighlighted)) {\n      if (!this._isRowEditMode() && isEditingAllowed) {\n        this._editFocusedCell();\n      } else {\n        this._focusInteractiveElement($cell, eventArgs.shift);\n      }\n    }\n\n    return true;\n  },\n  _targetCellTabHandler: function (eventArgs, direction) {\n    var $event = eventArgs.originalEvent;\n    var eventTarget = $event.target;\n\n    var $cell = this._getCellElementFromTarget(eventTarget);\n\n    var $lastInteractiveElement = this._getInteractiveElement($cell, !eventArgs.shift);\n\n    var isOriginalHandlerRequired = false;\n    var elementType;\n\n    if (!isEditorCell(this, $cell) && $lastInteractiveElement.length && eventTarget !== $lastInteractiveElement.get(0)) {\n      isOriginalHandlerRequired = true;\n    } else {\n      if (void 0 === this._focusedCellPosition.rowIndex && $(eventTarget).hasClass(ROW_CLASS)) {\n        this._updateFocusedCellPosition($cell);\n      }\n\n      elementType = this._getElementType(eventTarget);\n\n      if (this.isRowFocusType()) {\n        this.setCellFocusType();\n\n        if (\"row\" === elementType && isDataRow($(eventTarget))) {\n          eventTarget = this.getFirstValidCellInRow($(eventTarget));\n          elementType = this._getElementType(eventTarget);\n        }\n      }\n\n      var nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\n\n      $cell = nextCellInfo.$cell;\n\n      if (!$cell) {\n        return false;\n      }\n\n      $cell = this._checkNewLineTransition($event, $cell);\n\n      if (!$cell) {\n        return false;\n      }\n\n      this._focusCell($cell, !nextCellInfo.isHighlighted);\n\n      if (!isEditorCell(this, $cell)) {\n        this._focusInteractiveElement($cell, eventArgs.shift);\n      }\n    }\n\n    return isOriginalHandlerRequired;\n  },\n  _getNextCellByTabKey: function ($event, direction, elementType) {\n    var $cell = this._getNextCell(direction, elementType);\n\n    var args = $cell && this._fireFocusedCellChanging($event, $cell, true);\n\n    if (!args || args.cancel) {\n      return {};\n    }\n\n    if (args.$newCellElement) {\n      $cell = args.$newCellElement;\n    }\n\n    return {\n      $cell: $cell,\n      isHighlighted: args.isHighlighted\n    };\n  },\n  _checkNewLineTransition: function ($event, $cell) {\n    var rowIndex = this.getVisibleRowIndex();\n    var $row = $cell.parent();\n\n    if (rowIndex !== this._getRowIndex($row)) {\n      var cellPosition = this._getCellPosition($cell);\n\n      var args = this._fireFocusedRowChanging($event, $row);\n\n      if (args.cancel) {\n        return;\n      }\n\n      if (args.rowIndexChanged) {\n        this.setFocusedColumnIndex(cellPosition.columnIndex);\n        $cell = this._getFocusedCell();\n      }\n    }\n\n    return $cell;\n  },\n  _enterKeyHandler: function (eventArgs, isEditing) {\n    var $cell = this._getFocusedCell();\n\n    var rowIndex = this.getVisibleRowIndex();\n\n    var $row = this._focusedView && this._focusedView.getRow(rowIndex);\n\n    if (this.option(\"grouping.allowCollapsing\") && isGroupRow($row) || this.option(\"masterDetail.enabled\") && $cell && $cell.hasClass(COMMAND_EXPAND_CLASS)) {\n      var key = this._dataController.getKeyByRowIndex(rowIndex);\n\n      var item = this._dataController.items()[rowIndex];\n\n      if (void 0 !== key && item && item.data && !item.data.isContinuation) {\n        this._dataController.changeRowExpand(key);\n      }\n    } else {\n      this._processEnterKeyForDataCell(eventArgs, isEditing);\n    }\n  },\n  _processEnterKeyForDataCell: function (eventArgs, isEditing) {\n    var direction = this._getEnterKeyDirection(eventArgs);\n\n    var allowEditingOnEnterKey = this._allowEditingOnEnterKey();\n\n    if (isEditing || !allowEditingOnEnterKey && direction) {\n      this._handleEnterKeyEditingCell(eventArgs.originalEvent);\n\n      if (\"next\" === direction || \"previous\" === direction) {\n        this._targetCellTabHandler(eventArgs, direction);\n      } else if (\"upArrow\" === direction || \"downArrow\" === direction) {\n        this._navigateNextCell(eventArgs.originalEvent, direction);\n      }\n    } else if (allowEditingOnEnterKey) {\n      this._startEditing(eventArgs);\n    }\n  },\n  _getEnterKeyDirection: function (eventArgs) {\n    var enterKeyDirection = this.option(\"keyboardNavigation.enterKeyDirection\");\n    var isShift = eventArgs.shift;\n\n    if (\"column\" === enterKeyDirection) {\n      return isShift ? \"upArrow\" : \"downArrow\";\n    }\n\n    if (\"row\" === enterKeyDirection) {\n      return isShift ? \"previous\" : \"next\";\n    }\n  },\n  _handleEnterKeyEditingCell: function (event) {\n    var target = event.target;\n\n    var $cell = this._getCellElementFromTarget(target);\n\n    var isRowEditMode = this._isRowEditMode();\n\n    this._updateFocusedCellPosition($cell);\n\n    if (isRowEditMode) {\n      this._focusEditFormCell($cell);\n\n      setTimeout(this._editingController.saveEditData.bind(this._editingController));\n    } else {\n      eventsEngine.trigger($(target), \"change\");\n\n      this._closeEditCell();\n\n      event.preventDefault();\n    }\n  },\n  _escapeKeyHandler: function (eventArgs, isEditing) {\n    var $cell = this._getCellElementFromTarget(eventArgs.originalEvent.target);\n\n    if (isEditing) {\n      this._updateFocusedCellPosition($cell);\n\n      if (!this._isRowEditMode()) {\n        if (\"cell\" === this._editingController.getEditMode()) {\n          this._editingController.cancelEditData();\n        } else {\n          this._closeEditCell();\n        }\n      } else {\n        this._focusEditFormCell($cell);\n\n        this._editingController.cancelEditData();\n\n        if (0 === this._dataController.items().length) {\n          this._resetFocusedCell();\n\n          this._editorFactory.loseFocus();\n        }\n      }\n\n      eventArgs.originalEvent.preventDefault();\n    }\n  },\n  _ctrlFKeyHandler: function (eventArgs) {\n    if (this.option(\"searchPanel.visible\")) {\n      var searchTextEditor = this._headerPanel.getSearchTextEditor();\n\n      if (searchTextEditor) {\n        searchTextEditor.focus();\n        eventArgs.originalEvent.preventDefault();\n      }\n    }\n  },\n  _f2KeyHandler: function () {\n    var isEditing = this._editingController.isEditing();\n\n    var rowIndex = this.getVisibleRowIndex();\n\n    var $row = this._focusedView && this._focusedView.getRow(rowIndex);\n\n    if (!isEditing && isDataRow($row)) {\n      this._startEditing();\n    }\n  },\n  _navigateNextCell: function ($event, keyCode) {\n    var $cell = this._getNextCell(keyCode);\n\n    var directionCode = this._getDirectionCodeByKey(keyCode);\n\n    var isCellValid = $cell && this._isCellValid($cell);\n\n    var result = isCellValid ? this._arrowKeysHandlerFocusCell($event, $cell, directionCode) : false;\n    return result;\n  },\n  _arrowKeysHandlerFocusCell: function ($event, $nextCell, direction) {\n    var isVerticalDirection = \"prevRow\" === direction || \"nextRow\" === direction;\n\n    var args = this._fireFocusChangingEvents($event, $nextCell, isVerticalDirection, true);\n\n    $nextCell = args.$newCellElement;\n\n    if (!args.cancel && this._isCellValid($nextCell)) {\n      this._focus($nextCell, !args.isHighlighted);\n\n      return true;\n    }\n\n    return false;\n  },\n  _beginFastEditing: function (originalEvent, isDeleting) {\n    if (!this._isFastEditingAllowed() || originalEvent.altKey || originalEvent.ctrlKey || this._editingController.isEditing()) {\n      return false;\n    }\n\n    if (isDeleting) {\n      this._startEditing(originalEvent, FAST_EDITING_DELETE_KEY);\n    } else {\n      var key = originalEvent.key;\n      var keyCode = originalEvent.keyCode || originalEvent.which;\n      var fastEditingKey = key || keyCode && String.fromCharCode(keyCode);\n\n      if (fastEditingKey && (1 === fastEditingKey.length || fastEditingKey === FAST_EDITING_DELETE_KEY)) {\n        this._startEditing(originalEvent, fastEditingKey);\n      }\n    }\n\n    return true;\n  },\n  _pointerEventHandler: function (e) {\n    var event = e.event || e;\n    var $target = $(event.currentTarget);\n    var rowsView = this.getView(\"rowsView\");\n    var focusedViewElement = rowsView && rowsView.element();\n    var $parent = $target.parent();\n    var isInteractiveElement = $(event.target).is(INTERACTIVE_ELEMENTS_SELECTOR);\n    var isRevertButton = !!$(event.target).closest(\".\".concat(REVERT_BUTTON_CLASS)).length;\n    var isExpandCommandCell = $target.hasClass(COMMAND_EXPAND_CLASS);\n\n    if (!this._isEventInCurrentGrid(event)) {\n      return;\n    }\n\n    if (!isRevertButton && (this._isCellValid($target, !isInteractiveElement) || isExpandCommandCell)) {\n      $target = this._isInsideEditForm($target) ? $(event.target) : $target;\n\n      this._focusView();\n\n      $(focusedViewElement).removeClass(FOCUS_STATE_CLASS);\n\n      if ($parent.hasClass(FREESPACE_ROW_CLASS)) {\n        this._updateFocusedCellPosition($target);\n\n        this._applyTabIndexToElement(this._focusedView.element());\n\n        this._focusedView.focus();\n      } else if (!this._isMasterDetailCell($target)) {\n        this._clickTargetCellHandler(event, $target);\n      } else {\n        this._updateFocusedCellPosition($target);\n      }\n    } else if ($target.is(\"td\")) {\n      this._resetFocusedCell();\n    }\n  },\n  _clickTargetCellHandler: function (event, $cell) {\n    var columnIndex = this.getView(\"rowsView\").getCellIndex($cell);\n\n    var column = this._columnsController.getVisibleColumns()[columnIndex];\n\n    var isCellEditMode = this._isCellEditMode();\n\n    this.setCellFocusType();\n\n    var args = this._fireFocusChangingEvents(event, $cell, true);\n\n    $cell = args.$newCellElement;\n\n    if (!args.cancel) {\n      if (args.resetFocusedRow) {\n        this.getController(\"focus\")._resetFocusedRow();\n\n        return;\n      }\n\n      if (args.rowIndexChanged) {\n        $cell = this._getFocusedCell();\n      }\n\n      if (!args.isHighlighted && !isCellEditMode) {\n        this.setRowFocusType();\n      }\n\n      this._updateFocusedCellPosition($cell);\n\n      if (this._allowRowUpdating() && isCellEditMode && column && column.allowEditing) {\n        this._isNeedFocus = false;\n        this._isHiddenFocus = false;\n      } else {\n        var $target = event && $(event.target).closest(INTERACTIVE_ELEMENTS_SELECTOR + \", td\");\n        var isInteractiveTarget = $target && $target.not($cell).is(INTERACTIVE_ELEMENTS_SELECTOR);\n        var isEditor = !!column && !column.command && $cell.hasClass(EDITOR_CELL_CLASS);\n        var isDisabled = !isEditor && (!args.isHighlighted || isInteractiveTarget);\n\n        this._focus($cell, isDisabled, isInteractiveTarget);\n      }\n    } else {\n      this.setRowFocusType();\n      this.setFocusedRowIndex(args.prevRowIndex);\n      $cell = this._getFocusedCell();\n\n      if (this._editingController.isEditing() && isCellEditMode) {\n        this._closeEditCell();\n      }\n    }\n  },\n  _allowRowUpdating: function () {\n    var rowIndex = this.getVisibleRowIndex();\n\n    var row = this._dataController.items()[rowIndex];\n\n    return this._editingController.allowUpdating({\n      row: row\n    }, \"click\");\n  },\n  focus: function (element) {\n    var activeElementSelector;\n    var focusedRowEnabled = this.option(\"focusedRowEnabled\");\n    var isHighlighted = isCellElement($(element));\n\n    if (!element) {\n      activeElementSelector = \".dx-datagrid-rowsview .dx-row[tabindex]\";\n\n      if (!focusedRowEnabled) {\n        activeElementSelector += \", .dx-datagrid-rowsview .dx-row > td[tabindex]\";\n      }\n\n      element = this.component.$element().find(activeElementSelector).first();\n    }\n\n    element && this._focusElement($(element), isHighlighted);\n  },\n  getFocusedView: function () {\n    return this._focusedView;\n  },\n  setupFocusedView: function () {\n    if (this.isKeyboardEnabled() && !isDefined(this._focusedView)) {\n      this._focusView();\n    }\n  },\n  _focusElement: function ($element, isHighlighted) {\n    var rowsViewElement = $(this._getRowsViewElement());\n    var $focusedView = $element.closest(rowsViewElement);\n    var isRowFocusType = this.isRowFocusType();\n    var args = {};\n\n    if (!$focusedView.length || isCellElement($element) && !this._isCellValid($element)) {\n      return;\n    }\n\n    this._focusView();\n\n    this._isNeedFocus = true;\n    this._isNeedScroll = true;\n\n    if (isCellElement($element) || isGroupRow($element)) {\n      this.setCellFocusType();\n      args = this._fireFocusChangingEvents(null, $element, false, isHighlighted);\n      $element = args.$newCellElement;\n\n      if (isRowFocusType && !args.isHighlighted) {\n        this.setRowFocusType();\n      }\n    }\n\n    if (!args.cancel) {\n      this._focus($element, !args.isHighlighted);\n\n      this._focusInteractiveElement($element);\n    }\n  },\n  _getFocusedViewByElement: function ($element) {\n    var view = this.getFocusedView();\n    var $view = view && $(view.element());\n    return $element && 0 !== $element.closest($view).length;\n  },\n  _focusView: function () {\n    this._focusedView = this.getView(\"rowsView\");\n  },\n  _resetFocusedView: function () {\n    this.setRowFocusType();\n    this._focusedView = null;\n  },\n  _focusInteractiveElement: function ($cell, isLast) {\n    if (!$cell) {\n      return;\n    }\n\n    var $focusedElement = this._getInteractiveElement($cell, isLast);\n\n    gridCoreUtils.focusAndSelectElement(this, $focusedElement);\n  },\n  _focus: function ($cell, disableFocus, isInteractiveElement) {\n    var $row = $cell && !$cell.hasClass(ROW_CLASS) ? $cell.closest(\".\".concat(ROW_CLASS)) : $cell;\n\n    if ($row && isNotFocusedRow($row)) {\n      return;\n    }\n\n    var focusedView = this._focusedView;\n    var $focusViewElement = focusedView && focusedView.element();\n    var $focusElement;\n    this._isHiddenFocus = disableFocus;\n\n    if (isGroupRow($row) || this.isRowFocusType()) {\n      $focusElement = $row;\n\n      if (focusedView) {\n        this.setFocusedRowIndex(this._getRowIndex($row));\n      }\n    } else if (isCellElement($cell)) {\n      $focusElement = $cell;\n\n      this._updateFocusedCellPosition($cell);\n    }\n\n    if ($focusElement) {\n      if ($focusViewElement) {\n        $focusViewElement.find(\".dx-row[tabindex], .dx-row > td[tabindex]\").not($focusElement).removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabindex\");\n      }\n\n      eventsEngine.one($focusElement, \"blur\", e => {\n        if (e.relatedTarget) {\n          $focusElement.removeClass(CELL_FOCUS_DISABLED_CLASS);\n        }\n      });\n\n      if (!isInteractiveElement) {\n        this._applyTabIndexToElement($focusElement);\n\n        eventsEngine.trigger($focusElement, \"focus\");\n      }\n\n      if (disableFocus) {\n        $focusElement.addClass(CELL_FOCUS_DISABLED_CLASS);\n      } else {\n        this._editorFactory.focus($focusElement);\n      }\n    }\n  },\n  _updateFocus: function (isRenderView) {\n    this._updateFocusTimeout = setTimeout(() => {\n      var editingController = this._editingController;\n      var isCellEditMode = editingController.getEditMode() === EDIT_MODE_CELL;\n\n      if (isCellEditMode && editingController.hasChanges()) {\n        editingController._focusEditingCell();\n\n        return;\n      }\n\n      var $cell = this._getFocusedCell();\n\n      var isEditing = editingController.isEditing();\n\n      if ($cell && !(this._isMasterDetailCell($cell) && !this._isRowEditMode())) {\n        if (this._hasSkipRow($cell.parent())) {\n          var direction = this._focusedCellPosition && this._focusedCellPosition.rowIndex > 0 ? \"upArrow\" : \"downArrow\";\n          $cell = this._getNextCell(direction);\n        }\n\n        if (isElementDefined($cell)) {\n          if (isRenderView && !isEditing && this._checkCellOverlapped($cell)) {\n            return;\n          }\n\n          if ($cell.is(\"td\") || $cell.hasClass(this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS))) {\n            var isCommandCell = $cell.is(COMMAND_CELL_SELECTOR);\n            var $focusedElementInsideCell = $cell.find(\":focus\");\n            var isFocusedElementDefined = isElementDefined($focusedElementInsideCell);\n\n            if ((isRenderView || !isCommandCell) && this._editorFactory.focus()) {\n              if (isCommandCell && isFocusedElementDefined) {\n                gridCoreUtils.focusAndSelectElement(this, $focusedElementInsideCell);\n                return;\n              }\n\n              !isFocusedElementDefined && this._focus($cell);\n            } else if (!isFocusedElementDefined && (this._isNeedFocus || this._isHiddenFocus)) {\n              this._focus($cell, this._isHiddenFocus);\n            }\n\n            if (isEditing) {\n              this._focusInteractiveElement.bind(this)($cell);\n            }\n          } else {\n            eventsEngine.trigger($cell, \"focus\");\n          }\n        }\n      }\n    });\n  },\n  _checkCellOverlapped: function ($cell) {\n    var cellOffset = $cell.offset();\n    var hasScrollable = this.component.getScrollable && this.component.getScrollable();\n    var isOverlapped = false;\n\n    if (hasScrollable) {\n      if (cellOffset.left < 0) {\n        isOverlapped = $cell.width() + cellOffset.left <= 0;\n      } else if (cellOffset.top < 0) {\n        isOverlapped = $cell.height() + cellOffset.top <= 0;\n      }\n    }\n\n    return isOverlapped;\n  },\n  _getFocusedCell: function () {\n    return $(this._getCell(this._focusedCellPosition));\n  },\n  _updateFocusedCellPositionByTarget: function (target) {\n    var _this$_focusedCellPos;\n\n    var elementType = this._getElementType(target);\n\n    if (\"row\" === elementType && isDefined(null === (_this$_focusedCellPos = this._focusedCellPosition) || void 0 === _this$_focusedCellPos ? void 0 : _this$_focusedCellPos.columnIndex)) {\n      var $row = $(target);\n      this._focusedView && isGroupRow($row) && this.setFocusedRowIndex(this._getRowIndex($row));\n    } else {\n      this._updateFocusedCellPosition(this._getCellElementFromTarget(target));\n    }\n  },\n  _updateFocusedCellPosition: function ($cell, direction) {\n    var position = this._getCellPosition($cell, direction);\n\n    if (position) {\n      if (!$cell.length || position.rowIndex >= 0 && position.columnIndex >= 0) {\n        this.setFocusedCellPosition(position.rowIndex, position.columnIndex);\n      }\n    }\n\n    return position;\n  },\n  _getFocusedColumnIndexOffset: function (columnIndex) {\n    var offset = 0;\n\n    var column = this._columnsController.getVisibleColumns()[columnIndex];\n\n    if (column && column.fixed) {\n      offset = this._getFixedColumnIndexOffset(column);\n    } else if (columnIndex >= 0) {\n      offset = this._columnsController.getColumnIndexOffset();\n    }\n\n    return offset;\n  },\n  _getFixedColumnIndexOffset: function (column) {\n    var offset = isFixedColumnIndexOffsetRequired(this, column) ? this._getVisibleColumnCount() - this._columnsController.getVisibleColumns().length : 0;\n    return offset;\n  },\n  _getCellPosition: function ($cell, direction) {\n    var columnIndex;\n    var $row = isElementDefined($cell) && $cell.closest(\"tr\");\n    var rowsView = this.getView(\"rowsView\");\n\n    if (isElementDefined($row)) {\n      var rowIndex = this._getRowIndex($row);\n\n      columnIndex = rowsView.getCellIndex($cell, rowIndex);\n      columnIndex += this._getFocusedColumnIndexOffset(columnIndex);\n\n      if (direction) {\n        columnIndex = \"previous\" === direction ? columnIndex - 1 : columnIndex + 1;\n        columnIndex = this._applyColumnIndexBoundaries(columnIndex);\n      }\n\n      return {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      };\n    }\n  },\n  _focusCell: function ($cell, isDisabled) {\n    if (this._isCellValid($cell)) {\n      this._focus($cell, isDisabled);\n\n      return true;\n    }\n  },\n  _focusEditFormCell: function ($cell) {\n    if ($cell.hasClass(MASTER_DETAIL_CELL_CLASS)) {\n      this._editorFactory.focus($cell, true);\n    }\n  },\n  _resetFocusedCell: function (preventScroll) {\n    var _this$_focusedView;\n\n    var $cell = this._getFocusedCell();\n\n    isElementDefined($cell) && $cell.removeAttr(\"tabindex\");\n    this._isNeedFocus = false;\n    this._isNeedScroll = false;\n    this._focusedCellPosition = {};\n    clearTimeout(this._updateFocusTimeout);\n    null === (_this$_focusedView = this._focusedView) || void 0 === _this$_focusedView ? void 0 : _this$_focusedView.renderFocusState(preventScroll);\n  },\n  restoreFocusableElement: function (rowIndex, $event) {\n    var args;\n    var $rowElement;\n    var isUpArrow = isDefined(rowIndex);\n    var rowsView = this.getView(\"rowsView\");\n    var $rowsViewElement = rowsView.element();\n    var columnIndex = this._focusedCellPosition.columnIndex;\n\n    var rowIndexOffset = this._dataController.getRowIndexOffset();\n\n    rowIndex = isUpArrow ? rowIndex : rowsView.getTopVisibleItemIndex() + rowIndexOffset;\n\n    if (!isUpArrow) {\n      this._editorFactory.loseFocus();\n\n      this._applyTabIndexToElement($rowsViewElement);\n\n      eventsEngine.trigger($rowsViewElement, \"focus\");\n    } else {\n      $rowElement = rowsView.getRow(rowIndex - rowIndexOffset);\n      args = this._fireFocusedRowChanging($event, $rowElement);\n\n      if (!args.cancel && args.rowIndexChanged) {\n        rowIndex = args.newRowIndex;\n      }\n    }\n\n    if (!isUpArrow || !args.cancel) {\n      this.setFocusedCellPosition(rowIndex, columnIndex);\n    }\n\n    isUpArrow && this._updateFocus();\n  },\n  _getNewPositionByCode: function (cellPosition, elementType, code) {\n    var columnIndex = cellPosition.columnIndex;\n    var rowIndex = cellPosition.rowIndex;\n    var visibleColumnsCount;\n\n    if (void 0 === cellPosition.rowIndex && \"next\" === code) {\n      return {\n        columnIndex: 0,\n        rowIndex: 0\n      };\n    }\n\n    switch (code) {\n      case \"nextInRow\":\n      case \"next\":\n        visibleColumnsCount = this._getVisibleColumnCount();\n\n        if (columnIndex < visibleColumnsCount - 1 && \"row\" !== elementType && this._hasValidCellAfterPosition({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        })) {\n          columnIndex++;\n        } else if (!this._isLastRow(rowIndex) && \"next\" === code) {\n          columnIndex = 0;\n          rowIndex++;\n        }\n\n        break;\n\n      case \"previousInRow\":\n      case \"previous\":\n        if (columnIndex > 0 && \"row\" !== elementType && this._hasValidCellBeforePosition({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        })) {\n          columnIndex--;\n        } else if (rowIndex > 0 && \"previous\" === code) {\n          rowIndex--;\n          visibleColumnsCount = this._getVisibleColumnCount();\n          columnIndex = visibleColumnsCount - 1;\n        }\n\n        break;\n\n      case \"upArrow\":\n        rowIndex = rowIndex > 0 ? rowIndex - 1 : rowIndex;\n        break;\n\n      case \"downArrow\":\n        rowIndex = !this._isLastRow(rowIndex) ? rowIndex + 1 : rowIndex;\n    }\n\n    return {\n      columnIndex: columnIndex,\n      rowIndex: rowIndex\n    };\n  },\n  setFocusedCellPosition: function (rowIndex, columnIndex) {\n    this.setFocusedRowIndex(rowIndex);\n    this.setFocusedColumnIndex(columnIndex);\n  },\n  setFocusedRowIndex: function (rowIndex) {\n    if (!this._focusedCellPosition) {\n      this._focusedCellPosition = {};\n    }\n\n    this._focusedCellPosition.rowIndex = rowIndex;\n  },\n  setFocusedColumnIndex: function (columnIndex) {\n    if (!this._focusedCellPosition) {\n      this._focusedCellPosition = {};\n    }\n\n    this._focusedCellPosition.columnIndex = columnIndex;\n  },\n  getRowIndex: function () {\n    return this._focusedCellPosition ? this._focusedCellPosition.rowIndex : -1;\n  },\n  getColumnIndex: function () {\n    return this._focusedCellPosition ? this._focusedCellPosition.columnIndex : -1;\n  },\n  getVisibleRowIndex: function () {\n    var rowIndex = this._focusedCellPosition && this._focusedCellPosition.rowIndex;\n\n    if (!isDefined(rowIndex)) {\n      return -1;\n    }\n\n    return rowIndex - this._dataController.getRowIndexOffset();\n  },\n  getVisibleColumnIndex: function () {\n    var columnIndex = this._focusedCellPosition && this._focusedCellPosition.columnIndex;\n\n    if (!isDefined(columnIndex)) {\n      return -1;\n    }\n\n    return columnIndex - this._columnsController.getColumnIndexOffset();\n  },\n  _applyColumnIndexBoundaries: function (columnIndex) {\n    var visibleColumnsCount = this._getVisibleColumnCount();\n\n    if (columnIndex < 0) {\n      columnIndex = 0;\n    } else if (columnIndex >= visibleColumnsCount) {\n      columnIndex = visibleColumnsCount - 1;\n    }\n\n    return columnIndex;\n  },\n  _isCellByPositionValid: function (cellPosition) {\n    var $cell = $(this._getCell(cellPosition));\n    return this._isCellValid($cell);\n  },\n  _isLastRow: function (rowIndex) {\n    var dataController = this._dataController;\n\n    if (this._isVirtualRowRender()) {\n      return rowIndex >= dataController.getMaxRowIndex();\n    }\n\n    return rowIndex === dataController.items().length - 1;\n  },\n  _isFirstValidCell: function (cellPosition) {\n    var isFirstValidCell = false;\n\n    if (0 === cellPosition.rowIndex && cellPosition.columnIndex >= 0) {\n      isFirstValidCell = isFirstValidCell || !this._hasValidCellBeforePosition(cellPosition);\n    }\n\n    return isFirstValidCell;\n  },\n  _hasValidCellBeforePosition: function (cellPosition) {\n    var columnIndex = cellPosition.columnIndex;\n    var hasValidCells = false;\n\n    while (columnIndex > 0 && !hasValidCells) {\n      var checkingPosition = {\n        columnIndex: --columnIndex,\n        rowIndex: cellPosition.rowIndex\n      };\n      hasValidCells = this._isCellByPositionValid(checkingPosition);\n    }\n\n    return hasValidCells;\n  },\n  _hasValidCellAfterPosition: function (cellPosition) {\n    var columnIndex = cellPosition.columnIndex;\n    var hasValidCells = false;\n\n    var visibleColumnCount = this._getVisibleColumnCount();\n\n    while (columnIndex < visibleColumnCount - 1 && !hasValidCells) {\n      var checkingPosition = {\n        columnIndex: ++columnIndex,\n        rowIndex: cellPosition.rowIndex\n      };\n      hasValidCells = this._isCellByPositionValid(checkingPosition);\n    }\n\n    return hasValidCells;\n  },\n  _isLastValidCell: function (cellPosition) {\n    var nextColumnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex + 1 : 0;\n    var rowIndex = cellPosition.rowIndex;\n    var checkingPosition = {\n      columnIndex: nextColumnIndex,\n      rowIndex: rowIndex\n    };\n\n    var visibleRows = this._dataController.getVisibleRows();\n\n    var row = visibleRows && visibleRows[rowIndex];\n\n    var isLastRow = this._isLastRow(rowIndex);\n\n    if (!isLastRow) {\n      return false;\n    }\n\n    if (row && \"group\" === row.rowType && cellPosition.columnIndex > 0) {\n      return true;\n    }\n\n    if (cellPosition.columnIndex === this._getVisibleColumnCount() - 1) {\n      return true;\n    }\n\n    if (this._isCellByPositionValid(checkingPosition)) {\n      return false;\n    }\n\n    return this._isLastValidCell(checkingPosition);\n  },\n  _isCellValid: function ($cell, isClick) {\n    if (isElementDefined($cell)) {\n      var rowsView = this.getView(\"rowsView\");\n      var $row = $cell.parent();\n      var columnsController = this._columnsController;\n      var columnIndex = rowsView.getCellIndex($cell) + columnsController.getColumnIndexOffset();\n      var column = columnsController.getVisibleColumns(null, true)[columnIndex];\n\n      var visibleColumnCount = this._getVisibleColumnCount();\n\n      var editingController = this._editingController;\n      var isMasterDetailRow = isDetailRow($row);\n      var isShowWhenGrouped = column && column.showWhenGrouped;\n      var isDataCell = column && !$cell.hasClass(COMMAND_EXPAND_CLASS) && isDataRow($row);\n\n      if (this._isMasterDetailCell($cell)) {\n        return true;\n      }\n\n      if (visibleColumnCount > columnIndex && (!isMasterDetailRow && column && (!isDefined(column.groupIndex) || isShowWhenGrouped && isDataCell) || parseInt($cell.attr(\"colspan\")) > 1)) {\n        var rowItems = this._dataController.items();\n\n        var visibleRowIndex = rowsView.getRowIndex($row);\n        var row = rowItems[visibleRowIndex];\n        var isCellEditing = editingController && this._isCellEditMode() && editingController.isEditing();\n        var isRowEditingInCurrentRow = editingController && editingController.isEditRow(visibleRowIndex);\n        var isEditing = isRowEditingInCurrentRow || isCellEditing;\n\n        if (column.command) {\n          if (this._isLegacyNavigation()) {\n            return !isEditing && \"expand\" === column.command;\n          }\n\n          if (isCellEditing) {\n            return false;\n          }\n\n          if (isRowEditingInCurrentRow) {\n            return \"select\" !== column.command;\n          }\n\n          return !isEditing;\n        }\n\n        if (isCellEditing && row && \"data\" !== row.rowType) {\n          return false;\n        }\n\n        return !isEditing || column.allowEditing || isClick;\n      }\n    }\n  },\n  getFirstValidCellInRow: function ($row, columnIndex) {\n    var $cells = $row.find(\"> td\");\n    var $cell;\n    var $result;\n    columnIndex = columnIndex || 0;\n\n    for (var i = columnIndex; i < $cells.length; ++i) {\n      $cell = $cells.eq(i);\n\n      if (this._isCellValid($cell)) {\n        $result = $cell;\n        break;\n      }\n    }\n\n    return $result;\n  },\n  _getNextCell: function (keyCode, elementType, cellPosition) {\n    var focusedCellPosition = cellPosition || this._focusedCellPosition;\n    var isRowFocusType = this.isRowFocusType();\n    var includeCommandCells = isRowFocusType || inArray(keyCode, [\"next\", \"previous\"]) > -1;\n    var $cell;\n    var $row;\n\n    if (this._focusedView && focusedCellPosition) {\n      var newFocusedCellPosition = this._getNewPositionByCode(focusedCellPosition, elementType, keyCode);\n\n      $cell = $(this._getCell(newFocusedCellPosition));\n      var isLastCellOnDirection = \"previous\" === keyCode ? this._isFirstValidCell(newFocusedCellPosition) : this._isLastValidCell(newFocusedCellPosition);\n\n      if (isElementDefined($cell) && !this._isCellValid($cell) && this._isCellInRow(newFocusedCellPosition, includeCommandCells) && !isLastCellOnDirection) {\n        if (isRowFocusType) {\n          $cell = this.getFirstValidCellInRow($cell.parent(), newFocusedCellPosition.columnIndex);\n        } else {\n          $cell = this._getNextCell(keyCode, \"cell\", newFocusedCellPosition);\n        }\n      }\n\n      $row = isElementDefined($cell) && $cell.parent();\n\n      if (this._hasSkipRow($row)) {\n        var rowIndex = this._getRowIndex($row);\n\n        if (!this._isLastRow(rowIndex)) {\n          $cell = this._getNextCell(keyCode, \"row\", {\n            columnIndex: focusedCellPosition.columnIndex,\n            rowIndex: rowIndex\n          });\n        } else {\n          return null;\n        }\n      }\n\n      return isElementDefined($cell) ? $cell : null;\n    }\n\n    return null;\n  },\n  _startEditing: function (eventArgs, fastEditingKey) {\n    var focusedCellPosition = this._focusedCellPosition;\n    var visibleRowIndex = this.getVisibleRowIndex();\n    var visibleColumnIndex = this.getVisibleColumnIndex();\n\n    var row = this._dataController.items()[visibleRowIndex];\n\n    var column = this._columnsController.getVisibleColumns()[visibleColumnIndex];\n\n    if (this._isAllowEditing(row, column)) {\n      if (this._isRowEditMode()) {\n        this._editingController.editRow(visibleRowIndex);\n      } else if (focusedCellPosition) {\n        this._startEditCell(eventArgs, fastEditingKey);\n      }\n    }\n  },\n  _isAllowEditing: function (row, column) {\n    return this._editingController.allowUpdating({\n      row: row\n    }) && column && column.allowEditing;\n  },\n  _editFocusedCell: function () {\n    var rowIndex = this.getVisibleRowIndex();\n    var colIndex = this.getVisibleColumnIndex();\n    return this._editingController.editCell(rowIndex, colIndex);\n  },\n  _startEditCell: function (eventArgs, fastEditingKey) {\n    this._fastEditingStarted = isDefined(fastEditingKey);\n\n    var editResult = this._editFocusedCell();\n\n    if (this._isFastEditingStarted()) {\n      if (true === editResult) {\n        this._editingCellHandler(eventArgs, fastEditingKey);\n      } else if (editResult && editResult.done) {\n        var editorValue = fastEditingKey !== FAST_EDITING_DELETE_KEY ? fastEditingKey : \"\";\n        editResult.done(() => this._editingCellHandler(eventArgs, editorValue));\n      }\n    }\n  },\n  _editingCellHandler: function (eventArgs, editorValue) {\n    var $input = this._getFocusedCell().find(\".dx-texteditor-input\").eq(0);\n\n    var keyDownEvent = createEvent(eventArgs, {\n      type: \"keydown\",\n      target: $input.get(0)\n    });\n    var keyPressEvent = createEvent(eventArgs, {\n      type: \"keypress\",\n      target: $input.get(0)\n    });\n    var inputEvent = createEvent(eventArgs, {\n      type: \"input\",\n      target: $input.get(0)\n    });\n    $input.get(0).select();\n    eventsEngine.trigger($input, keyDownEvent);\n\n    if (!keyDownEvent.isDefaultPrevented()) {\n      eventsEngine.trigger($input, keyPressEvent);\n\n      if (!keyPressEvent.isDefaultPrevented()) {\n        var timeout = browser.mozilla ? 25 : 0;\n        setTimeout(() => {\n          $input.val(editorValue);\n\n          if (browser.msie) {\n            gridCoreUtils.setSelectionRange($input.get(0), {\n              selectionStart: editorValue.length,\n              selectionEnd: editorValue.length\n            });\n          }\n\n          var $widgetContainer = $input.closest(\".\".concat(WIDGET_CLASS));\n          eventsEngine.off($widgetContainer, \"focusout\");\n          eventsEngine.one($widgetContainer, \"focusout\", function () {\n            eventsEngine.trigger($input, \"change\");\n          });\n          eventsEngine.trigger($input, inputEvent);\n        }, timeout);\n      }\n    }\n  },\n  _fireFocusChangingEvents: function ($event, $cell, fireRowEvent, isHighlighted) {\n    var args = {};\n    var cellPosition = this._getCellPosition($cell) || {};\n\n    if (this.isCellFocusType()) {\n      args = this._fireFocusedCellChanging($event, $cell, isHighlighted);\n\n      if (!args.cancel) {\n        cellPosition.columnIndex = args.newColumnIndex;\n        cellPosition.rowIndex = args.newRowIndex;\n        isHighlighted = args.isHighlighted;\n        $cell = $(this._getCell(cellPosition));\n      }\n    }\n\n    if (!args.cancel && fireRowEvent && $cell) {\n      args = this._fireFocusedRowChanging($event, $cell.parent());\n\n      if (!args.cancel) {\n        cellPosition.rowIndex = args.newRowIndex;\n        args.isHighlighted = isHighlighted;\n      }\n    }\n\n    args.$newCellElement = $(this._getCell(cellPosition));\n\n    if (!args.$newCellElement.length) {\n      args.$newCellElement = $cell;\n    }\n\n    return args;\n  },\n  _fireFocusedCellChanging: function ($event, $cellElement, isHighlighted) {\n    var prevCellIndex = this.option(\"focusedColumnIndex\");\n    var prevRowIndex = this.option(\"focusedRowIndex\");\n\n    var cellPosition = this._getCellPosition($cellElement);\n\n    var columnIndex = cellPosition ? cellPosition.columnIndex : -1;\n    var rowIndex = cellPosition ? cellPosition.rowIndex : -1;\n    var args = {\n      cellElement: $cellElement,\n      prevColumnIndex: prevCellIndex,\n      prevRowIndex: prevRowIndex,\n      newColumnIndex: columnIndex,\n      newRowIndex: rowIndex,\n      rows: this._dataController.getVisibleRows(),\n      columns: this._columnsController.getVisibleColumns(),\n      event: $event,\n      isHighlighted: isHighlighted || false,\n      cancel: false\n    };\n    this._canceledCellPosition = null;\n    this.executeAction(\"onFocusedCellChanging\", args);\n\n    if (args.newColumnIndex !== columnIndex || args.newRowIndex !== rowIndex) {\n      args.$newCellElement = $(this._getCell({\n        columnIndex: args.newColumnIndex,\n        rowIndex: args.newRowIndex\n      }));\n    }\n\n    if (args.cancel) {\n      this._canceledCellPosition = {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      };\n    }\n\n    return args;\n  },\n  _fireFocusedCellChanged: function ($cellElement, prevCellIndex, prevRowIndex) {\n    var dataController = this._dataController;\n    var columnIndex = this.getView(\"rowsView\").getCellIndex($cellElement);\n\n    var rowIndex = this._getRowIndex($cellElement && $cellElement.parent());\n\n    var localRowIndex = Math.min(rowIndex - dataController.getRowIndexOffset(), dataController.items().length - 1);\n\n    var isEditingCell = this._editingController.isEditCell(localRowIndex, columnIndex);\n\n    var row = dataController.items()[localRowIndex];\n\n    if (!isEditingCell && (prevCellIndex !== columnIndex || prevRowIndex !== rowIndex)) {\n      this.executeAction(\"onFocusedCellChanged\", {\n        cellElement: $cellElement,\n        columnIndex: columnIndex,\n        rowIndex: rowIndex,\n        row: row,\n        column: this._columnsController.getVisibleColumns()[columnIndex]\n      });\n    }\n  },\n  _fireFocusedRowChanging: function (eventArgs, $newFocusedRow) {\n    var newRowIndex = this._getRowIndex($newFocusedRow);\n\n    var dataController = this._dataController;\n    var prevFocusedRowIndex = this.option(\"focusedRowIndex\");\n    var loadingOperationTypes = dataController.loadingOperationTypes();\n    var args = {\n      rowElement: $newFocusedRow,\n      prevRowIndex: prevFocusedRowIndex,\n      newRowIndex: newRowIndex,\n      event: eventArgs,\n      rows: dataController.getVisibleRows(),\n      cancel: false\n    };\n\n    if (!dataController || dataController.isLoading() && (loadingOperationTypes.reload || loadingOperationTypes.paging)) {\n      args.cancel = true;\n      return args;\n    }\n\n    if (this.option(\"focusedRowEnabled\")) {\n      this.executeAction(\"onFocusedRowChanging\", args);\n\n      if (!args.cancel && args.newRowIndex !== newRowIndex) {\n        args.resetFocusedRow = args.newRowIndex < 0;\n\n        if (!args.resetFocusedRow) {\n          this.setFocusedRowIndex(args.newRowIndex);\n        }\n\n        args.rowIndexChanged = true;\n      }\n    }\n\n    return args;\n  },\n  _fireFocusedRowChanged: function ($rowElement) {\n    var row;\n    var focusedRowKey = this.option(\"focusedRowKey\");\n    var focusController = this.getController(\"focus\");\n    var focusedRowIndex = null === focusController || void 0 === focusController ? void 0 : focusController.getFocusedRowIndexByKey(focusedRowKey);\n\n    if (this.option(\"focusedRowEnabled\")) {\n      if (focusedRowIndex >= 0) {\n        var dataController = this._dataController;\n        row = focusedRowIndex >= 0 && dataController.getVisibleRows()[focusedRowIndex - dataController.getRowIndexOffset()];\n      }\n\n      this.executeAction(\"onFocusedRowChanged\", {\n        rowElement: $rowElement,\n        rowIndex: focusedRowIndex,\n        row: row\n      });\n    }\n  },\n  _isEventInCurrentGrid: function (event) {\n    return gridCoreUtils.isElementInCurrentGrid(this, $(event.target));\n  },\n  _isRowEditMode: function () {\n    var editMode = this._editingController.getEditMode();\n\n    return editMode === EDIT_MODE_ROW || editMode === EDIT_MODE_FORM;\n  },\n  _isCellEditMode: function () {\n    var editMode = this._editingController.getEditMode();\n\n    return editMode === EDIT_MODE_CELL || editMode === EDIT_MODE_BATCH;\n  },\n  _isFastEditingAllowed: function () {\n    return this._isCellEditMode() && this.option(\"keyboardNavigation.editOnKeyPress\");\n  },\n  _getInteractiveElement: function ($cell, isLast) {\n    var $focusedElement = $cell.find(INTERACTIVE_ELEMENTS_SELECTOR).filter(\":visible\");\n    return isLast ? $focusedElement.last() : $focusedElement.first();\n  },\n  _applyTabIndexToElement: function ($element) {\n    var tabIndex = this.option(\"tabIndex\") || 0;\n    $element.attr(\"tabindex\", isDefined(tabIndex) ? tabIndex : 0);\n  },\n  _getCell: function (cellPosition) {\n    if (this._focusedView && cellPosition) {\n      var rowIndexOffset = this._dataController.getRowIndexOffset();\n\n      var column = this._columnsController.getVisibleColumns(null, true)[cellPosition.columnIndex];\n\n      var columnIndexOffset = column && column.fixed ? this._getFixedColumnIndexOffset(column) : this._columnsController.getColumnIndexOffset();\n      var rowIndex = cellPosition.rowIndex >= 0 ? cellPosition.rowIndex - rowIndexOffset : -1;\n      var columnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex - columnIndexOffset : -1;\n      return this._focusedView.getCell({\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      });\n    }\n  },\n  _getRowIndex: function ($row) {\n    var rowsView = this.getView(\"rowsView\");\n    var rowIndex = rowsView.getRowIndex($row);\n\n    if (rowIndex >= 0) {\n      rowIndex += this._dataController.getRowIndexOffset();\n    }\n\n    return rowIndex;\n  },\n  _hasSkipRow: function ($row) {\n    var row = $row && $row.get(0);\n    return row && (\"none\" === row.style.display || $row.hasClass(this.addWidgetPrefix(GROUP_FOOTER_CLASS)) || isDetailRow($row) && !$row.hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS)));\n  },\n  _allowEditingOnEnterKey: function () {\n    return \"startEdit\" === this.option(\"keyboardNavigation.enterKeyAction\");\n  },\n  _isLegacyNavigation: function () {\n    return this.option(\"useLegacyKeyboardNavigation\");\n  },\n  _getDirectionCodeByKey: function (key) {\n    var directionCode;\n\n    switch (key) {\n      case \"upArrow\":\n        directionCode = \"prevRow\";\n        break;\n\n      case \"downArrow\":\n        directionCode = \"nextRow\";\n        break;\n\n      case \"leftArrow\":\n        directionCode = this.option(\"rtlEnabled\") ? \"nextInRow\" : \"previousInRow\";\n        break;\n\n      case \"rightArrow\":\n        directionCode = this.option(\"rtlEnabled\") ? \"previousInRow\" : \"nextInRow\";\n    }\n\n    return directionCode;\n  },\n  _isVirtualScrolling: function () {\n    var scrollingMode = this.option(\"scrolling.mode\");\n    return \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\n  },\n  _isVirtualRowRender: function () {\n    return this._isVirtualScrolling() || \"virtual\" === this.option(\"scrolling.rowRenderingMode\");\n  },\n  _isVirtualColumnRender: function () {\n    return \"virtual\" === this.option(\"scrolling.columnRenderingMode\");\n  },\n  _scrollBy: function (left, top, rowIndex, $event) {\n    var that = this;\n    var scrollable = this.getView(\"rowsView\").getScrollable();\n\n    if (that._focusedCellPosition) {\n      scrollable.on(\"scroll\", function scrollHandler() {\n        scrollable.off(\"scroll\", scrollHandler);\n        setTimeout(that.restoreFocusableElement.bind(that, rowIndex, $event));\n      });\n    }\n\n    return scrollable.scrollBy({\n      left: left,\n      top: top\n    });\n  },\n  _isInsideEditForm: function (element) {\n    return $(element).closest(\".\" + this.addWidgetPrefix(EDIT_FORM_CLASS)).length > 0;\n  },\n  _isMasterDetailCell: function (element) {\n    var $masterDetailCell = $(element).closest(\".\" + MASTER_DETAIL_CELL_CLASS);\n    var $masterDetailGrid = $masterDetailCell.closest(\".\" + this.getWidgetContainerClass()).parent();\n    return $masterDetailCell.length && $masterDetailGrid.is(this.component.$element());\n  },\n  _processNextCellInMasterDetail: function ($nextCell) {\n    if (!this._isInsideEditForm($nextCell) && $nextCell) {\n      this._applyTabIndexToElement($nextCell);\n    }\n  },\n  _handleTabKeyOnMasterDetailCell: function (target, direction) {\n    if (this._isMasterDetailCell(target)) {\n      this._updateFocusedCellPosition($(target), direction);\n\n      var $nextCell = this._getNextCell(direction, \"row\");\n\n      this._processNextCellInMasterDetail($nextCell);\n\n      return true;\n    }\n\n    return false;\n  },\n  _getElementType: function (target) {\n    return $(target).is(\"tr\") ? \"row\" : \"cell\";\n  },\n  _isFastEditingStarted: function () {\n    return this._isFastEditingAllowed() && this._fastEditingStarted;\n  },\n  _getVisibleColumnCount: function () {\n    return this._columnsController.getVisibleColumns(null, true).length;\n  },\n  _isCellInRow: function (cellPosition, includeCommandCells) {\n    var columnIndex = cellPosition.columnIndex;\n\n    var visibleColumnsCount = this._getVisibleColumnCount();\n\n    return includeCommandCells ? columnIndex >= 0 && columnIndex <= visibleColumnsCount - 1 : columnIndex > 0 && columnIndex < visibleColumnsCount - 1;\n  },\n  _getCellElementFromTarget: function (target) {\n    var elementType = this._getElementType(target);\n\n    var $targetElement = $(target);\n    var $cell;\n\n    if (\"cell\" === elementType) {\n      $cell = $targetElement.closest(\".\".concat(ROW_CLASS, \" > td\"));\n    } else {\n      $cell = $targetElement.children().not(\".\" + COMMAND_EXPAND_CLASS).first();\n    }\n\n    return $cell;\n  },\n  _getRowsViewElement: function () {\n    var rowsView = this.getView(\"rowsView\");\n    return rowsView && rowsView.element();\n  },\n  isKeyboardEnabled: function () {\n    return this.option(\"keyboardNavigation.enabled\");\n  },\n  _processCanceledEditCellPosition: function (rowIndex, columnIndex) {\n    if (this._canceledCellPosition) {\n      var isCanceled = this._canceledCellPosition.rowIndex === rowIndex && this._canceledCellPosition.columnIndex === columnIndex;\n      this._canceledCellPosition = null;\n      return isCanceled;\n    }\n  }\n});\nexport var keyboardNavigationModule = {\n  defaultOptions: function () {\n    return {\n      useLegacyKeyboardNavigation: false,\n      keyboardNavigation: {\n        enabled: true,\n        enterKeyAction: \"startEdit\",\n        enterKeyDirection: \"none\",\n        editOnKeyPress: false\n      }\n    };\n  },\n  controllers: {\n    keyboardNavigation: KeyboardNavigationController\n  },\n  extenders: {\n    views: {\n      rowsView: {\n        _rowClick: function (e) {\n          var editRowIndex = this.getController(\"editing\").getEditRowIndex();\n          var keyboardController = this.getController(\"keyboardNavigation\");\n\n          if (editRowIndex === e.rowIndex) {\n            keyboardController.setCellFocusType();\n          }\n\n          var needTriggerPointerEventHandler = isMobile() && this.option(\"focusedRowEnabled\");\n\n          if (needTriggerPointerEventHandler) {\n            this._triggerPointerDownEventHandler(e);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _triggerPointerDownEventHandler: function (e) {\n          var originalEvent = e.event.originalEvent;\n\n          if (originalEvent) {\n            var keyboardController = this.getController(\"keyboardNavigation\");\n            var $cell = $(originalEvent.target);\n            var columnIndex = this.getCellIndex($cell);\n            var column = this.getController(\"columns\").getVisibleColumns()[columnIndex];\n            var row = this.getController(\"data\").items()[e.rowIndex];\n\n            if (keyboardController._isAllowEditing(row, column)) {\n              var eventArgs = createEvent(originalEvent, {\n                currentTarget: originalEvent.target\n              });\n\n              keyboardController._pointerEventHandler(eventArgs);\n            }\n          }\n        },\n        renderFocusState: function (preventScroll) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var $rowsViewElement = this.element();\n\n          if ($rowsViewElement && !focused($rowsViewElement)) {\n            $rowsViewElement.attr(\"tabindex\", null);\n          }\n\n          var rowIndex = keyboardController.getVisibleRowIndex();\n\n          if (!isDefined(rowIndex) || rowIndex < 0) {\n            rowIndex = 0;\n          }\n\n          var cellElements = this.getCellElements(rowIndex);\n\n          if (keyboardController.isKeyboardEnabled() && cellElements.length) {\n            this.updateFocusElementTabIndex(cellElements, preventScroll);\n          }\n        },\n        updateFocusElementTabIndex: function (cellElements) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var $row = cellElements.eq(0).parent();\n\n          if (isGroupRow($row)) {\n            keyboardController._applyTabIndexToElement($row);\n          } else {\n            var columnIndex = keyboardController.getColumnIndex();\n\n            if (!isDefined(columnIndex) || columnIndex < 0) {\n              columnIndex = 0;\n            }\n\n            this._updateFocusedCellTabIndex(cellElements, columnIndex);\n          }\n        },\n        _updateFocusedCellTabIndex: function (cellElements, columnIndex) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var cellElementsLength = cellElements ? cellElements.length : -1;\n\n          var updateCellTabIndex = function ($cell) {\n            var isMasterDetailCell = keyboardController._isMasterDetailCell($cell);\n\n            var isValidCell = keyboardController._isCellValid($cell);\n\n            if (!isMasterDetailCell && isValidCell && isCellElement($cell)) {\n              keyboardController._applyTabIndexToElement($cell);\n\n              keyboardController.setCellFocusType();\n              return true;\n            }\n          };\n\n          var $cell = cellElements.filter(\"[aria-colindex='\".concat(columnIndex + 1, \"']\"));\n\n          if ($cell.length) {\n            updateCellTabIndex($cell);\n          } else {\n            if (cellElementsLength <= columnIndex) {\n              columnIndex = cellElementsLength - 1;\n            }\n\n            for (var i = columnIndex; i < cellElementsLength; ++i) {\n              if (updateCellTabIndex($(cellElements[i]))) {\n                break;\n              }\n            }\n          }\n        },\n        renderDelayedTemplates: function (change) {\n          this.callBase.apply(this, arguments);\n\n          this._renderFocusByChange(change);\n        },\n\n        _renderFocusByChange(change) {\n          if (!change || !change.repaintChangesOnly) {\n            var preventScroll = shouldPreventScroll(this);\n            this.renderFocusState(preventScroll);\n          }\n        },\n\n        _renderCore: function (change) {\n          this.callBase.apply(this, arguments);\n\n          this._renderFocusByChange(change);\n        },\n        _editCellPrepared: function ($cell) {\n          var editorInstance = this._getEditorInstance($cell);\n\n          var keyboardController = this.getController(\"keyboardNavigation\");\n\n          var isEditingNavigationMode = keyboardController && keyboardController._isFastEditingStarted();\n\n          if (editorInstance && isEditingNavigationMode) {\n            this._handleEditingNavigationMode(editorInstance);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _handleEditingNavigationMode: function (editorInstance) {\n          [\"downArrow\", \"upArrow\"].forEach(function (keyName) {\n            var originalKeyHandler = editorInstance._supportedKeys()[keyName];\n\n            editorInstance.registerKeyHandler(keyName, e => {\n              var isDropDownOpened = \"true\" === editorInstance._input().attr(\"aria-expanded\");\n\n              if (isDropDownOpened) {\n                return originalKeyHandler && originalKeyHandler.call(editorInstance, e);\n              }\n            });\n          });\n          editorInstance.registerKeyHandler(\"leftArrow\", noop);\n          editorInstance.registerKeyHandler(\"rightArrow\", noop);\n          var isDateBoxWithMask = editorInstance.NAME === DATEBOX_WIDGET_NAME && editorInstance.option(\"useMaskBehavior\");\n\n          if (isDateBoxWithMask) {\n            editorInstance.registerKeyHandler(\"enter\", noop);\n          }\n        },\n        _getEditorInstance: function ($cell) {\n          var $editor = $cell.find(\".dx-texteditor\").eq(0);\n          return gridCoreUtils.getWidgetInstance($editor);\n        }\n      }\n    },\n    controllers: {\n      editing: {\n        editCell: function (rowIndex, columnIndex) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n\n          if (keyboardController._processCanceledEditCellPosition(rowIndex, columnIndex)) {\n            return false;\n          }\n\n          var isCellEditing = this.callBase(rowIndex, columnIndex);\n\n          if (isCellEditing) {\n            keyboardController.setupFocusedView();\n          }\n\n          return isCellEditing;\n        },\n        editRow: function (rowIndex) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var visibleColumnIndex = keyboardController.getVisibleColumnIndex();\n\n          var column = this._columnsController.getVisibleColumns()[visibleColumnIndex];\n\n          if (column && column.type || this.option(\"editing.mode\") === EDIT_MODE_FORM) {\n            keyboardController._resetFocusedCell();\n          }\n\n          this.callBase(rowIndex);\n        },\n        addRow: function (parentKey) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          keyboardController.setupFocusedView();\n          keyboardController.setCellFocusType();\n          return this.callBase.apply(this, arguments);\n        },\n        getFocusedCellInRow: function (rowIndex) {\n          var keyboardNavigationController = this.getController(\"keyboardNavigation\");\n          var $cell = this.callBase(rowIndex);\n\n          if (keyboardNavigationController.isKeyboardEnabled() && keyboardNavigationController._focusedCellPosition.rowIndex === rowIndex) {\n            var $focusedCell = keyboardNavigationController._getFocusedCell();\n\n            if (isElementDefined($focusedCell) && !$focusedCell.hasClass(COMMAND_EDIT_CLASS)) {\n              $cell = $focusedCell;\n            }\n          }\n\n          return $cell;\n        },\n        _processCanceledEditingCell: function () {\n          this.closeEditCell().done(() => {\n            var keyboardNavigation = this.getController(\"keyboardNavigation\");\n\n            keyboardNavigation._updateFocus();\n          });\n        },\n        init: function () {\n          this.callBase();\n          this._keyboardNavigationController = this.getController(\"keyboardNavigation\");\n        },\n        closeEditCell: function () {\n          var keyboardNavigation = this._keyboardNavigationController;\n          keyboardNavigation._fastEditingStarted = false;\n          var result = this.callBase.apply(this, arguments);\n\n          keyboardNavigation._updateFocus();\n\n          return result;\n        },\n        _delayedInputFocus: function () {\n          this._keyboardNavigationController._isNeedScroll = true;\n          this.callBase.apply(this, arguments);\n        },\n        _isEditingStart: function () {\n          var keyboardNavigation = this.getController(\"keyboardNavigation\");\n          var cancel = this.callBase.apply(this, arguments);\n\n          if (cancel && !keyboardNavigation._isNeedFocus) {\n            var $cell = keyboardNavigation._getFocusedCell();\n\n            keyboardNavigation._focus($cell, true);\n          }\n\n          return cancel;\n        }\n      },\n      data: {\n        _correctRowIndices: function (getRowIndexCorrection) {\n          var that = this;\n          var keyboardNavigationController = that.getController(\"keyboardNavigation\");\n          var editorFactory = that.getController(\"editorFactory\");\n          var focusedCellPosition = keyboardNavigationController._focusedCellPosition;\n          that.callBase.apply(that, arguments);\n\n          if (focusedCellPosition && focusedCellPosition.rowIndex >= 0) {\n            var focusedRowIndexCorrection = getRowIndexCorrection(focusedCellPosition.rowIndex);\n\n            if (focusedRowIndexCorrection) {\n              focusedCellPosition.rowIndex += focusedRowIndexCorrection;\n              editorFactory.refocus();\n            }\n          }\n        },\n        getMaxRowIndex: function () {\n          var result = this.items().length - 1;\n          var virtualItemsCount = this.virtualItemsCount();\n\n          if (virtualItemsCount) {\n            result += virtualItemsCount.begin + virtualItemsCount.end;\n          }\n\n          return result;\n        }\n      },\n      adaptiveColumns: {\n        _showHiddenCellsInView: function (_ref) {\n          var {\n            viewName: viewName,\n            $cells: $cells,\n            isCommandColumn: isCommandColumn\n          } = _ref;\n          this.callBase.apply(this, arguments);\n          viewName === COLUMN_HEADERS_VIEW && !isCommandColumn && $cells.each((_, cellElement) => {\n            var $cell = $(cellElement);\n            isCellInHeaderRow($cell) && $cell.attr(\"tabindex\", 0);\n          });\n        },\n        _hideVisibleCellInView: function (_ref2) {\n          var {\n            viewName: viewName,\n            $cell: $cell,\n            isCommandColumn: isCommandColumn\n          } = _ref2;\n          this.callBase.apply(this, arguments);\n\n          if (viewName === COLUMN_HEADERS_VIEW && !isCommandColumn && isCellInHeaderRow($cell)) {\n            $cell.removeAttr(\"tabindex\");\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.keyboard_navigation.js"],"names":["$","domAdapter","eventsEngine","core","gridCoreUtils","isDefined","isEmptyObject","inArray","focused","addNamespace","createEvent","isCommandKeyPressed","pointerEvents","name","clickEventName","noop","accessibility","browser","keyboard","devices","ROWS_VIEW_CLASS","EDIT_FORM_CLASS","GROUP_FOOTER_CLASS","ROW_CLASS","DATA_ROW_CLASS","GROUP_ROW_CLASS","HEADER_ROW_CLASS","EDIT_FORM_ITEM_CLASS","MASTER_DETAIL_ROW_CLASS","FREESPACE_ROW_CLASS","VIRTUAL_ROW_CLASS","MASTER_DETAIL_CELL_CLASS","EDITOR_CELL_CLASS","DROPDOWN_EDITOR_OVERLAY_CLASS","COMMAND_EXPAND_CLASS","COMMAND_SELECT_CLASS","COMMAND_EDIT_CLASS","COMMAND_CELL_SELECTOR","CELL_FOCUS_DISABLED_CLASS","DATEBOX_WIDGET_NAME","FOCUS_STATE_CLASS","WIDGET_CLASS","REVERT_BUTTON_CLASS","FAST_EDITING_DELETE_KEY","INTERACTIVE_ELEMENTS_SELECTOR","EDIT_MODE_ROW","EDIT_MODE_FORM","EDIT_MODE_BATCH","EDIT_MODE_CELL","FOCUS_TYPE_ROW","FOCUS_TYPE_CELL","COLUMN_HEADERS_VIEW","isGroupRow","$row","hasClass","isDetailRow","isDataRow","isNotFocusedRow","isCellElement","$element","length","tagName","isEditorCell","that","$cell","_isRowEditMode","isElementDefined","isMobile","current","deviceType","isCellInHeaderRow","parent","concat","isFixedColumnIndexOffsetRequired","column","rtlEnabled","option","result","fixedPosition","command","shouldPreventScroll","keyboardController","getController","_isVirtualScrolling","getRowIndex","KeyboardNavigationController","ViewController","inherit","init","_dataController","_selectionController","_editingController","_headerPanel","getView","_columnsController","_editorFactory","isKeyboardEnabled","subscribeVisibilityChange","_updateFocusTimeout","_fastEditingStarted","_focusedCellPosition","_canceledCellPosition","add","setupFocusedView","_isNeedScroll","is","_focusedView","getScrollable","_scrollToElement","_initViewHandlers","_initDocumentHandlers","createAction","rowsView","rowsViewFocusHandler","event","target","isRelatedTargetInRowsView","relatedTarget","closest","element","isCommandButton","_isEventInCurrentGrid","$focusedCell","_getFocusedCell","getCellElements","filter","eq","preventDefault","trigger","renderCompleted","e","$rowsView","isFullUpdate","changeType","isFocusedViewCorrect","needUpdateFocus","isAppend","$focusedElement","isFocusedElementCorrect","msie","off","on","_initPointerEventHandler","_initKeyDownHandler","_setRowsViewAttributes","_isNeedFocus","_isHiddenFocus","_updateFocus","document","getDocument","_documentClickHandler","$target","isCurrentRowsViewClick","addWidgetPrefix","isEditorOverlay","columnsResizerController","isColumnResizing","isResizing","targetInsideFocusedView","parents","_resetFocusedCell","_resetFocusedView","down","_getRowsViewElement","isGridEmpty","getVisibleRows","_applyTabIndexToElement","pointerEventName","clickSelector","_pointerEventAction","_pointerEventHandler","_keyDownListener","_keyDownHandler","dispose","callBase","clearTimeout","unsubscribeVisibilityChange","optionChanged","args","handled","isRowFocusType","focusType","isCellFocusType","setRowFocusType","setCellFocusType","isEditing","needStopPropagation","originalEvent","isHandled","_processOnKeyDown","isDefaultPrevented","_updateFocusedCellPositionByTarget","keyName","_leftRightKeysHandler","ctrl","selectView","_upDownKeysHandler","_pageUpDownKeyHandler","_spaceKeyHandler","_ctrlAKeyHandler","_beginFastEditing","_tabKeyHandler","_enterKeyHandler","_escapeKeyHandler","_ctrlFKeyHandler","_f2KeyHandler","_isFastEditingAllowed","_isFastEditingStarted","stopPropagation","eventArgs","executeAction","ctrlKey","alt","altKey","shift","shiftKey","_closeEditCell","setTimeout","closeEditCell","rowIndex","getVisibleRowIndex","$event","getRow","directionCode","_getDirectionCodeByKey","isEditingNavigationMode","allowNavigate","_isVirtualColumnRender","_processVirtualHorizontalPosition","_getNextCell","_arrowKeysHandlerFocusCell","visibleRowIndex","isUpArrow","dataSource","_navigateNextCell","_isVirtualRowRender","isLoading","rowHeight","outerHeight","_scrollBy","pageIndex","pageCount","pagingEnabled","isPageUp","pageStep","scrollable","_container","height","$content","mode","isFocusedRowElement","_getElementType","isFocusedSelectionCell","startSelectionWithCheckboxes","changeItemSelection","control","selectAll","editingOptions","direction","isCellPositionDefined","isOriginalHandlerRequired","_isLastValidCell","_isFirstValidCell","eventTarget","focusedViewElement","_handleTabKeyOnMasterDetailCell","addClass","_editingCellTabHandler","_targetCellTabHandler","loseFocus","_getMaxHorizontalOffset","component","offset","scrollWidth","width","_isColumnRendered","columnIndex","allVisibleColumns","getVisibleColumns","renderedVisibleColumns","indexOf","_isFixedColumn","fixed","_isColumnVirtual","localColumnIndex","getColumnIndexOffset","visibleColumns","getColumnIndex","nextColumnIndex","horizontalScrollPosition","needToScroll","columnsCount","_getVisibleColumnCount","columnIndexOffset","leftEdgePosition","scrollTo","left","_getHorizontalScrollPositionOffset","scrollBy","top","positionOffset","$currentCell","_getCell","currentCellWidth","outerWidth","rtlMultiplier","_getCellElementFromTarget","isEditingAllowed","elementType","_updateFocusedCellPosition","nextCellInfo","_getNextCellByTabKey","columnsController","cellIndex","getCellIndex","_getRowIndex","row","items","editingController","allowEditing","_isDataRow","rowType","allowUpdating","isNewRow","_focusCell","isHighlighted","_editFocusedCell","_focusInteractiveElement","$lastInteractiveElement","_getInteractiveElement","get","getFirstValidCellInRow","_checkNewLineTransition","_fireFocusedCellChanging","cancel","$newCellElement","cellPosition","_getCellPosition","_fireFocusedRowChanging","rowIndexChanged","setFocusedColumnIndex","key","getKeyByRowIndex","item","data","isContinuation","changeRowExpand","_processEnterKeyForDataCell","_getEnterKeyDirection","allowEditingOnEnterKey","_allowEditingOnEnterKey","_handleEnterKeyEditingCell","_startEditing","enterKeyDirection","isShift","isRowEditMode","_focusEditFormCell","saveEditData","bind","getEditMode","cancelEditData","searchTextEditor","getSearchTextEditor","focus","keyCode","isCellValid","_isCellValid","$nextCell","isVerticalDirection","_fireFocusChangingEvents","_focus","isDeleting","which","fastEditingKey","String","fromCharCode","currentTarget","$parent","isInteractiveElement","isRevertButton","isExpandCommandCell","_isInsideEditForm","_focusView","removeClass","_isMasterDetailCell","_clickTargetCellHandler","isCellEditMode","_isCellEditMode","resetFocusedRow","_resetFocusedRow","_allowRowUpdating","isInteractiveTarget","not","isEditor","isDisabled","setFocusedRowIndex","prevRowIndex","activeElementSelector","focusedRowEnabled","find","first","_focusElement","getFocusedView","rowsViewElement","$focusedView","_getFocusedViewByElement","view","$view","isLast","focusAndSelectElement","disableFocus","focusedView","$focusViewElement","$focusElement","removeAttr","one","isRenderView","hasChanges","_focusEditingCell","_hasSkipRow","_checkCellOverlapped","isCommandCell","$focusedElementInsideCell","isFocusedElementDefined","cellOffset","hasScrollable","isOverlapped","_this$_focusedCellPos","position","setFocusedCellPosition","_getFocusedColumnIndexOffset","_getFixedColumnIndexOffset","_applyColumnIndexBoundaries","preventScroll","_this$_focusedView","renderFocusState","restoreFocusableElement","$rowElement","$rowsViewElement","rowIndexOffset","getRowIndexOffset","getTopVisibleItemIndex","newRowIndex","_getNewPositionByCode","code","visibleColumnsCount","_hasValidCellAfterPosition","_isLastRow","_hasValidCellBeforePosition","getVisibleColumnIndex","_isCellByPositionValid","dataController","getMaxRowIndex","isFirstValidCell","hasValidCells","checkingPosition","visibleColumnCount","visibleRows","isLastRow","isClick","isMasterDetailRow","isShowWhenGrouped","showWhenGrouped","isDataCell","groupIndex","parseInt","attr","rowItems","isCellEditing","isRowEditingInCurrentRow","isEditRow","_isLegacyNavigation","$cells","$result","i","focusedCellPosition","includeCommandCells","newFocusedCellPosition","isLastCellOnDirection","_isCellInRow","visibleColumnIndex","_isAllowEditing","editRow","_startEditCell","colIndex","editCell","editResult","_editingCellHandler","done","editorValue","$input","keyDownEvent","type","keyPressEvent","inputEvent","select","timeout","mozilla","val","setSelectionRange","selectionStart","selectionEnd","$widgetContainer","fireRowEvent","newColumnIndex","$cellElement","prevCellIndex","cellElement","prevColumnIndex","rows","columns","_fireFocusedCellChanged","localRowIndex","Math","min","isEditingCell","isEditCell","$newFocusedRow","prevFocusedRowIndex","loadingOperationTypes","rowElement","reload","paging","_fireFocusedRowChanged","focusedRowKey","focusController","focusedRowIndex","getFocusedRowIndexByKey","isElementInCurrentGrid","editMode","last","tabIndex","getCell","style","display","scrollingMode","scrollHandler","$masterDetailCell","$masterDetailGrid","getWidgetContainerClass","_processNextCellInMasterDetail","$targetElement","children","_processCanceledEditCellPosition","isCanceled","keyboardNavigationModule","defaultOptions","useLegacyKeyboardNavigation","keyboardNavigation","enabled","enterKeyAction","editOnKeyPress","controllers","extenders","views","_rowClick","editRowIndex","getEditRowIndex","needTriggerPointerEventHandler","_triggerPointerDownEventHandler","apply","arguments","cellElements","updateFocusElementTabIndex","_updateFocusedCellTabIndex","cellElementsLength","updateCellTabIndex","isMasterDetailCell","isValidCell","renderDelayedTemplates","change","_renderFocusByChange","repaintChangesOnly","_renderCore","_editCellPrepared","editorInstance","_getEditorInstance","_handleEditingNavigationMode","forEach","originalKeyHandler","_supportedKeys","registerKeyHandler","isDropDownOpened","_input","call","isDateBoxWithMask","NAME","$editor","getWidgetInstance","editing","addRow","parentKey","getFocusedCellInRow","keyboardNavigationController","_processCanceledEditingCell","_keyboardNavigationController","_delayedInputFocus","_isEditingStart","_correctRowIndices","getRowIndexCorrection","editorFactory","focusedRowIndexCorrection","refocus","virtualItemsCount","begin","end","adaptiveColumns","_showHiddenCellsInView","_ref","viewName","isCommandColumn","each","_","_hideVisibleCellInView","_ref2"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.keyboard_navigation.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport domAdapter from \"../../core/dom_adapter\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport core from \"./ui.grid_core.modules\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    isDefined,\r\n    isEmptyObject\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    inArray\r\n} from \"../../core/utils/array\";\r\nimport {\r\n    focused\r\n} from \"../widget/selectors\";\r\nimport {\r\n    addNamespace,\r\n    createEvent,\r\n    isCommandKeyPressed\r\n} from \"../../events/utils/index\";\r\nimport pointerEvents from \"../../events/pointer\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../events/click\";\r\nimport {\r\n    noop\r\n} from \"../../core/utils/common\";\r\nimport * as accessibility from \"../shared/accessibility\";\r\nimport browser from \"../../core/utils/browser\";\r\nimport {\r\n    keyboard\r\n} from \"../../events/short\";\r\nimport devices from \"../../core/devices\";\r\nvar ROWS_VIEW_CLASS = \"rowsview\";\r\nvar EDIT_FORM_CLASS = \"edit-form\";\r\nvar GROUP_FOOTER_CLASS = \"group-footer\";\r\nvar ROW_CLASS = \"dx-row\";\r\nvar DATA_ROW_CLASS = \"dx-data-row\";\r\nvar GROUP_ROW_CLASS = \"dx-group-row\";\r\nvar HEADER_ROW_CLASS = \"dx-header-row\";\r\nvar EDIT_FORM_ITEM_CLASS = \"edit-form-item\";\r\nvar MASTER_DETAIL_ROW_CLASS = \"dx-master-detail-row\";\r\nvar FREESPACE_ROW_CLASS = \"dx-freespace-row\";\r\nvar VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\r\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\r\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\r\nvar DROPDOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\r\nvar COMMAND_EXPAND_CLASS = \"dx-command-expand\";\r\nvar COMMAND_SELECT_CLASS = \"dx-command-select\";\r\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\r\nvar COMMAND_CELL_SELECTOR = \"[class^=dx-command]\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar DATEBOX_WIDGET_NAME = \"dxDateBox\";\r\nvar FOCUS_STATE_CLASS = \"dx-state-focused\";\r\nvar WIDGET_CLASS = \"dx-widget\";\r\nvar REVERT_BUTTON_CLASS = \"dx-revert-button\";\r\nvar FAST_EDITING_DELETE_KEY = \"delete\";\r\nvar INTERACTIVE_ELEMENTS_SELECTOR = \"input:not([type='hidden']), textarea, a, select, button, [tabindex], .dx-dropdowneditor-icon\";\r\nvar EDIT_MODE_ROW = \"row\";\r\nvar EDIT_MODE_FORM = \"form\";\r\nvar EDIT_MODE_BATCH = \"batch\";\r\nvar EDIT_MODE_CELL = \"cell\";\r\nvar FOCUS_TYPE_ROW = \"row\";\r\nvar FOCUS_TYPE_CELL = \"cell\";\r\nvar COLUMN_HEADERS_VIEW = \"columnHeadersView\";\r\n\r\nfunction isGroupRow($row) {\r\n    return $row && $row.hasClass(GROUP_ROW_CLASS)\r\n}\r\n\r\nfunction isDetailRow($row) {\r\n    return $row && $row.hasClass(MASTER_DETAIL_ROW_CLASS)\r\n}\r\n\r\nfunction isDataRow($row) {\r\n    return $row && !isGroupRow($row) && !isDetailRow($row)\r\n}\r\n\r\nfunction isNotFocusedRow($row) {\r\n    return !$row || $row.hasClass(FREESPACE_ROW_CLASS) || $row.hasClass(VIRTUAL_ROW_CLASS)\r\n}\r\n\r\nfunction isCellElement($element) {\r\n    return $element.length && \"TD\" === $element[0].tagName\r\n}\r\n\r\nfunction isEditorCell(that, $cell) {\r\n    return !that._isRowEditMode() && $cell && !$cell.hasClass(COMMAND_SELECT_CLASS) && $cell.hasClass(EDITOR_CELL_CLASS)\r\n}\r\n\r\nfunction isElementDefined($element) {\r\n    return isDefined($element) && $element.length > 0\r\n}\r\n\r\nfunction isMobile() {\r\n    return \"desktop\" !== devices.current().deviceType\r\n}\r\n\r\nfunction isCellInHeaderRow($cell) {\r\n    return !!$cell.parent(\".\".concat(HEADER_ROW_CLASS)).length\r\n}\r\n\r\nfunction isFixedColumnIndexOffsetRequired(that, column) {\r\n    var rtlEnabled = that.option(\"rtlEnabled\");\r\n    var result = false;\r\n    if (rtlEnabled) {\r\n        result = !(\"right\" === column.fixedPosition || isDefined(column.command) && !isDefined(column.fixedPosition))\r\n    } else {\r\n        result = !(!isDefined(column.fixedPosition) || \"left\" === column.fixedPosition)\r\n    }\r\n    return result\r\n}\r\n\r\nfunction shouldPreventScroll(that) {\r\n    var keyboardController = that.getController(\"keyboardNavigation\");\r\n    return keyboardController._isVirtualScrolling() ? that.option(\"focusedRowIndex\") === keyboardController.getRowIndex() : false\r\n}\r\nvar KeyboardNavigationController = core.ViewController.inherit({\r\n    init: function() {\r\n        this._dataController = this.getController(\"data\");\r\n        this._selectionController = this.getController(\"selection\");\r\n        this._editingController = this.getController(\"editing\");\r\n        this._headerPanel = this.getView(\"headerPanel\");\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._editorFactory = this.getController(\"editorFactory\");\r\n        if (this.isKeyboardEnabled()) {\r\n            accessibility.subscribeVisibilityChange();\r\n            this._updateFocusTimeout = null;\r\n            this._fastEditingStarted = false;\r\n            this._focusedCellPosition = {};\r\n            this._canceledCellPosition = null;\r\n            this._editorFactory.focused.add($element => {\r\n                this.setupFocusedView();\r\n                if (this._isNeedScroll) {\r\n                    if ($element.is(\":visible\") && this._focusedView && this._focusedView.getScrollable) {\r\n                        this._focusedView._scrollToElement($element);\r\n                        this._isNeedScroll = false\r\n                    }\r\n                }\r\n            });\r\n            this._initViewHandlers();\r\n            this._initDocumentHandlers();\r\n            this.createAction(\"onKeyDown\")\r\n        }\r\n    },\r\n    _initViewHandlers: function() {\r\n        var rowsView = this.getView(\"rowsView\");\r\n        var rowsViewFocusHandler = event => {\r\n            var $element = $(event.target);\r\n            var isRelatedTargetInRowsView = $(event.relatedTarget).closest(rowsView.element()).length;\r\n            var isCommandButton = $element.hasClass(\"dx-link\");\r\n            if (isCommandButton && !isRelatedTargetInRowsView && this._isEventInCurrentGrid(event)) {\r\n                var $focusedCell = this._getFocusedCell();\r\n                $focusedCell = !isElementDefined($focusedCell) ? rowsView.getCellElements(0).filter(\"[tabindex]\").eq(0) : $focusedCell;\r\n                if (!$element.closest($focusedCell).length) {\r\n                    event.preventDefault();\r\n                    eventsEngine.trigger($focusedCell, \"focus\")\r\n                }\r\n            }\r\n        };\r\n        rowsView.renderCompleted.add(e => {\r\n            var $rowsView = rowsView.element();\r\n            var isFullUpdate = !e || \"refresh\" === e.changeType;\r\n            var isFocusedViewCorrect = this._focusedView && this._focusedView.name === rowsView.name;\r\n            var needUpdateFocus = false;\r\n            var isAppend = e && (\"append\" === e.changeType || \"prepend\" === e.changeType);\r\n            var $focusedElement = $(\":focus\");\r\n            var isFocusedElementCorrect = !$focusedElement.length || $focusedElement.closest($rowsView).length || browser.msie && $focusedElement.is(\"body\");\r\n            eventsEngine.off($rowsView, \"focusin\", rowsViewFocusHandler);\r\n            eventsEngine.on($rowsView, \"focusin\", rowsViewFocusHandler);\r\n            this._initPointerEventHandler();\r\n            this._initKeyDownHandler();\r\n            this._setRowsViewAttributes();\r\n            if (isFocusedViewCorrect && isFocusedElementCorrect) {\r\n                needUpdateFocus = this._isNeedFocus ? !isAppend : this._isHiddenFocus && isFullUpdate;\r\n                needUpdateFocus && this._updateFocus(true)\r\n            }\r\n        })\r\n    },\r\n    _initDocumentHandlers: function() {\r\n        var document = domAdapter.getDocument();\r\n        this._documentClickHandler = this.createAction(e => {\r\n            var $target = $(e.event.target);\r\n            var isCurrentRowsViewClick = this._isEventInCurrentGrid(e.event) && $target.closest(\".\".concat(this.addWidgetPrefix(ROWS_VIEW_CLASS))).length;\r\n            var isEditorOverlay = $target.closest(\".\".concat(DROPDOWN_EDITOR_OVERLAY_CLASS)).length;\r\n            var columnsResizerController = this.getController(\"columnsResizer\");\r\n            var isColumnResizing = !!columnsResizerController && columnsResizerController.isResizing();\r\n            if (!isCurrentRowsViewClick && !isEditorOverlay && !isColumnResizing) {\r\n                var targetInsideFocusedView = this._focusedView ? $target.parents().filter(this._focusedView.element()).length > 0 : false;\r\n                !targetInsideFocusedView && this._resetFocusedCell(true);\r\n                this._resetFocusedView()\r\n            }\r\n        });\r\n        eventsEngine.on(document, addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler)\r\n    },\r\n    _setRowsViewAttributes: function() {\r\n        var $rowsView = this._getRowsViewElement();\r\n        var isGridEmpty = !this._dataController.getVisibleRows().length;\r\n        if (isGridEmpty) {\r\n            this._applyTabIndexToElement($rowsView)\r\n        }\r\n    },\r\n    _initPointerEventHandler: function() {\r\n        var pointerEventName = !isMobile() ? pointerEvents.down : clickEventName;\r\n        var clickSelector = \".\".concat(ROW_CLASS, \" > td, .\").concat(ROW_CLASS);\r\n        var $rowsView = this._getRowsViewElement();\r\n        if (!isDefined(this._pointerEventAction)) {\r\n            this._pointerEventAction = this.createAction(this._pointerEventHandler)\r\n        }\r\n        eventsEngine.off($rowsView, addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), this._pointerEventAction);\r\n        eventsEngine.on($rowsView, addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), clickSelector, this._pointerEventAction)\r\n    },\r\n    _initKeyDownHandler: function() {\r\n        var $rowsView = this._getRowsViewElement();\r\n        keyboard.off(this._keyDownListener);\r\n        this._keyDownListener = keyboard.on($rowsView, null, e => this._keyDownHandler(e))\r\n    },\r\n    dispose: function() {\r\n        this.callBase();\r\n        this._resetFocusedView();\r\n        keyboard.off(this._keyDownListener);\r\n        eventsEngine.off(domAdapter.getDocument(), addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler);\r\n        clearTimeout(this._updateFocusTimeout);\r\n        accessibility.unsubscribeVisibilityChange()\r\n    },\r\n    optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"keyboardNavigation\":\r\n            case \"useLegacyKeyboardNavigation\":\r\n                args.handled = true;\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    isRowFocusType: function() {\r\n        return this.focusType === FOCUS_TYPE_ROW\r\n    },\r\n    isCellFocusType: function() {\r\n        return this.focusType === FOCUS_TYPE_CELL\r\n    },\r\n    setRowFocusType: function() {\r\n        if (this.option(\"focusedRowEnabled\")) {\r\n            this.focusType = FOCUS_TYPE_ROW\r\n        }\r\n    },\r\n    setCellFocusType: function() {\r\n        this.focusType = FOCUS_TYPE_CELL\r\n    },\r\n    _keyDownHandler: function(e) {\r\n        var isEditing = this._editingController.isEditing();\r\n        var needStopPropagation = true;\r\n        var originalEvent = e.originalEvent;\r\n        var isHandled = this._processOnKeyDown(e);\r\n        if (originalEvent.isDefaultPrevented()) {\r\n            return\r\n        }\r\n        this._isNeedFocus = true;\r\n        this._isNeedScroll = true;\r\n        this._updateFocusedCellPositionByTarget(originalEvent.target);\r\n        if (!isHandled) {\r\n            switch (e.keyName) {\r\n                case \"leftArrow\":\r\n                case \"rightArrow\":\r\n                    this._leftRightKeysHandler(e, isEditing);\r\n                    break;\r\n                case \"upArrow\":\r\n                case \"downArrow\":\r\n                    if (e.ctrl) {\r\n                        accessibility.selectView(\"rowsView\", this, originalEvent)\r\n                    } else {\r\n                        this._upDownKeysHandler(e, isEditing)\r\n                    }\r\n                    break;\r\n                case \"pageUp\":\r\n                case \"pageDown\":\r\n                    this._pageUpDownKeyHandler(e);\r\n                    break;\r\n                case \"space\":\r\n                    this._spaceKeyHandler(e, isEditing);\r\n                    break;\r\n                case \"A\":\r\n                    if (isCommandKeyPressed(e.originalEvent)) {\r\n                        this._ctrlAKeyHandler(e, isEditing)\r\n                    } else {\r\n                        this._beginFastEditing(e.originalEvent)\r\n                    }\r\n                    break;\r\n                case \"tab\":\r\n                    this._tabKeyHandler(e, isEditing);\r\n                    break;\r\n                case \"enter\":\r\n                    this._enterKeyHandler(e, isEditing);\r\n                    break;\r\n                case \"escape\":\r\n                    this._escapeKeyHandler(e, isEditing);\r\n                    break;\r\n                case \"F\":\r\n                    if (isCommandKeyPressed(e.originalEvent)) {\r\n                        this._ctrlFKeyHandler(e)\r\n                    } else {\r\n                        this._beginFastEditing(e.originalEvent)\r\n                    }\r\n                    break;\r\n                case \"F2\":\r\n                    this._f2KeyHandler();\r\n                    break;\r\n                case \"del\":\r\n                case \"backspace\":\r\n                    if (this._isFastEditingAllowed() && !this._isFastEditingStarted()) {\r\n                        this._beginFastEditing(originalEvent, true)\r\n                    }\r\n                    break;\r\n                default:\r\n                    if (!this._beginFastEditing(originalEvent)) {\r\n                        this._isNeedFocus = false;\r\n                        this._isNeedScroll = false;\r\n                        needStopPropagation = false\r\n                    }\r\n            }\r\n            if (needStopPropagation) {\r\n                originalEvent.stopPropagation()\r\n            }\r\n        }\r\n    },\r\n    _processOnKeyDown: function(eventArgs) {\r\n        var originalEvent = eventArgs.originalEvent;\r\n        var args = {\r\n            handled: false,\r\n            event: originalEvent\r\n        };\r\n        this.executeAction(\"onKeyDown\", args);\r\n        eventArgs.ctrl = originalEvent.ctrlKey;\r\n        eventArgs.alt = originalEvent.altKey;\r\n        eventArgs.shift = originalEvent.shiftKey;\r\n        return !!args.handled\r\n    },\r\n    _closeEditCell: function() {\r\n        setTimeout(() => {\r\n            this._editingController.closeEditCell()\r\n        })\r\n    },\r\n    _leftRightKeysHandler: function(eventArgs, isEditing) {\r\n        var rowIndex = this.getVisibleRowIndex();\r\n        var $event = eventArgs.originalEvent;\r\n        var $row = this._focusedView && this._focusedView.getRow(rowIndex);\r\n        var directionCode = this._getDirectionCodeByKey(eventArgs.keyName);\r\n        var isEditingNavigationMode = this._isFastEditingStarted();\r\n        var allowNavigate = (!isEditing || isEditingNavigationMode) && isDataRow($row);\r\n        if (allowNavigate) {\r\n            this.setCellFocusType();\r\n            isEditingNavigationMode && this._closeEditCell();\r\n            if (this._isVirtualColumnRender()) {\r\n                this._processVirtualHorizontalPosition(directionCode)\r\n            }\r\n            var $cell = this._getNextCell(directionCode);\r\n            if (isElementDefined($cell)) {\r\n                this._arrowKeysHandlerFocusCell($event, $cell, directionCode)\r\n            }\r\n            $event && $event.preventDefault()\r\n        }\r\n    },\r\n    _upDownKeysHandler: function(eventArgs, isEditing) {\r\n        var rowIndex = this._focusedCellPosition.rowIndex;\r\n        var visibleRowIndex = this.getVisibleRowIndex();\r\n        var $row = this._focusedView && this._focusedView.getRow(visibleRowIndex);\r\n        var $event = eventArgs.originalEvent;\r\n        var isUpArrow = \"upArrow\" === eventArgs.keyName;\r\n        var dataSource = this._dataController.dataSource();\r\n        var isEditingNavigationMode = this._isFastEditingStarted();\r\n        var allowNavigate = (!isEditing || isEditingNavigationMode) && $row && !isDetailRow($row);\r\n        if (allowNavigate) {\r\n            isEditingNavigationMode && this._closeEditCell();\r\n            if (!this._navigateNextCell($event, eventArgs.keyName)) {\r\n                if (this._isVirtualRowRender() && isUpArrow && dataSource && !dataSource.isLoading()) {\r\n                    var rowHeight = $row.outerHeight();\r\n                    rowIndex = this._focusedCellPosition.rowIndex - 1;\r\n                    this._scrollBy(0, -rowHeight, rowIndex, $event)\r\n                }\r\n            }\r\n            $event && $event.preventDefault()\r\n        }\r\n    },\r\n    _pageUpDownKeyHandler: function(eventArgs) {\r\n        var pageIndex = this._dataController.pageIndex();\r\n        var pageCount = this._dataController.pageCount();\r\n        var pagingEnabled = this.option(\"paging.enabled\");\r\n        var isPageUp = \"pageUp\" === eventArgs.keyName;\r\n        var pageStep = isPageUp ? -1 : 1;\r\n        var scrollable = this.getView(\"rowsView\").getScrollable();\r\n        if (pagingEnabled && !this._isVirtualScrolling()) {\r\n            if ((isPageUp ? pageIndex > 0 : pageIndex < pageCount - 1) && !this._isVirtualScrolling()) {\r\n                this._dataController.pageIndex(pageIndex + pageStep);\r\n                eventArgs.originalEvent.preventDefault()\r\n            }\r\n        } else if (scrollable && scrollable._container().height() < scrollable.$content().height()) {\r\n            this._scrollBy(0, scrollable._container().height() * pageStep);\r\n            eventArgs.originalEvent.preventDefault()\r\n        }\r\n    },\r\n    _spaceKeyHandler: function(eventArgs, isEditing) {\r\n        var rowIndex = this.getVisibleRowIndex();\r\n        var $target = $(eventArgs.originalEvent && eventArgs.originalEvent.target);\r\n        if (this.option(\"selection\") && \"none\" !== this.option(\"selection\").mode && !isEditing) {\r\n            var isFocusedRowElement = \"row\" === this._getElementType($target) && this.isRowFocusType() && isDataRow($target);\r\n            var isFocusedSelectionCell = $target.hasClass(COMMAND_SELECT_CLASS);\r\n            if (isFocusedSelectionCell && \"onClick\" === this.option(\"selection.showCheckBoxesMode\")) {\r\n                this._selectionController.startSelectionWithCheckboxes()\r\n            }\r\n            if (isFocusedRowElement || $target.parent().hasClass(DATA_ROW_CLASS) || $target.hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS))) {\r\n                this._selectionController.changeItemSelection(rowIndex, {\r\n                    shift: eventArgs.shift,\r\n                    control: eventArgs.ctrl\r\n                });\r\n                eventArgs.originalEvent.preventDefault()\r\n            }\r\n        } else {\r\n            this._beginFastEditing(eventArgs.originalEvent)\r\n        }\r\n    },\r\n    _ctrlAKeyHandler: function(eventArgs, isEditing) {\r\n        if (!isEditing && !eventArgs.alt && \"multiple\" === this.option(\"selection.mode\") && this.option(\"selection.allowSelectAll\")) {\r\n            this._selectionController.selectAll();\r\n            eventArgs.originalEvent.preventDefault()\r\n        }\r\n    },\r\n    _tabKeyHandler: function(eventArgs, isEditing) {\r\n        var editingOptions = this.option(\"editing\");\r\n        var direction = eventArgs.shift ? \"previous\" : \"next\";\r\n        var isCellPositionDefined = isDefined(this._focusedCellPosition) && !isEmptyObject(this._focusedCellPosition);\r\n        var isOriginalHandlerRequired = !isCellPositionDefined || !eventArgs.shift && this._isLastValidCell(this._focusedCellPosition) || eventArgs.shift && this._isFirstValidCell(this._focusedCellPosition);\r\n        var eventTarget = eventArgs.originalEvent.target;\r\n        var focusedViewElement = this._focusedView && this._focusedView.element();\r\n        if (this._handleTabKeyOnMasterDetailCell(eventTarget, direction)) {\r\n            return\r\n        }\r\n        $(focusedViewElement).addClass(FOCUS_STATE_CLASS);\r\n        if (editingOptions && eventTarget && !isOriginalHandlerRequired) {\r\n            if ($(eventTarget).hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS))) {\r\n                this._resetFocusedCell()\r\n            }\r\n            if (this._isVirtualColumnRender()) {\r\n                this._processVirtualHorizontalPosition(direction)\r\n            }\r\n            if (isEditing) {\r\n                if (!this._editingCellTabHandler(eventArgs, direction)) {\r\n                    return\r\n                }\r\n            } else if (this._targetCellTabHandler(eventArgs, direction)) {\r\n                isOriginalHandlerRequired = true\r\n            }\r\n        }\r\n        if (isOriginalHandlerRequired) {\r\n            this._editorFactory.loseFocus();\r\n            if (this._editingController.isEditing() && !this._isRowEditMode()) {\r\n                this._resetFocusedCell(true);\r\n                this._resetFocusedView();\r\n                this._closeEditCell()\r\n            }\r\n        } else {\r\n            eventArgs.originalEvent.preventDefault()\r\n        }\r\n    },\r\n    _getMaxHorizontalOffset: function() {\r\n        var scrollable = this.component.getScrollable();\r\n        var rowsView = this.getView(\"rowsView\");\r\n        var offset = scrollable ? scrollable.scrollWidth() - $(rowsView.element()).width() : 0;\r\n        return offset\r\n    },\r\n    _isColumnRendered: function(columnIndex) {\r\n        var allVisibleColumns = this._columnsController.getVisibleColumns(null, true);\r\n        var renderedVisibleColumns = this._columnsController.getVisibleColumns();\r\n        var column = allVisibleColumns[columnIndex];\r\n        var result = false;\r\n        if (column) {\r\n            result = renderedVisibleColumns.indexOf(column) >= 0\r\n        }\r\n        return result\r\n    },\r\n    _isFixedColumn: function(columnIndex) {\r\n        var allVisibleColumns = this._columnsController.getVisibleColumns(null, true);\r\n        var column = allVisibleColumns[columnIndex];\r\n        return !!column && !!column.fixed\r\n    },\r\n    _isColumnVirtual: function(columnIndex) {\r\n        var localColumnIndex = columnIndex - this._columnsController.getColumnIndexOffset();\r\n        var visibleColumns = this._columnsController.getVisibleColumns();\r\n        var column = visibleColumns[localColumnIndex];\r\n        return !!column && \"virtual\" === column.command\r\n    },\r\n    _processVirtualHorizontalPosition: function(direction) {\r\n        var scrollable = this.component.getScrollable();\r\n        var columnIndex = this.getColumnIndex();\r\n        var nextColumnIndex;\r\n        var horizontalScrollPosition = 0;\r\n        var needToScroll = false;\r\n        switch (direction) {\r\n            case \"next\":\r\n            case \"nextInRow\":\r\n                var columnsCount = this._getVisibleColumnCount();\r\n                nextColumnIndex = columnIndex + 1;\r\n                horizontalScrollPosition = this.option(\"rtlEnabled\") ? this._getMaxHorizontalOffset() : 0;\r\n                if (\"next\" === direction) {\r\n                    needToScroll = columnsCount === nextColumnIndex || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)\r\n                } else {\r\n                    needToScroll = columnsCount > nextColumnIndex && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)\r\n                }\r\n                break;\r\n            case \"previous\":\r\n            case \"previousInRow\":\r\n                nextColumnIndex = columnIndex - 1;\r\n                horizontalScrollPosition = this.option(\"rtlEnabled\") ? 0 : this._getMaxHorizontalOffset();\r\n                if (\"previous\" === direction) {\r\n                    var columnIndexOffset = this._columnsController.getColumnIndexOffset();\r\n                    var leftEdgePosition = nextColumnIndex < 0 && 0 === columnIndexOffset;\r\n                    needToScroll = leftEdgePosition || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)\r\n                } else {\r\n                    needToScroll = nextColumnIndex >= 0 && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)\r\n                }\r\n        }\r\n        if (needToScroll) {\r\n            scrollable.scrollTo({\r\n                left: horizontalScrollPosition\r\n            })\r\n        } else if (isDefined(nextColumnIndex) && isDefined(direction) && this._isColumnVirtual(nextColumnIndex)) {\r\n            horizontalScrollPosition = this._getHorizontalScrollPositionOffset(direction);\r\n            0 !== horizontalScrollPosition && scrollable.scrollBy({\r\n                left: horizontalScrollPosition,\r\n                top: 0\r\n            })\r\n        }\r\n    },\r\n    _getHorizontalScrollPositionOffset: function(direction) {\r\n        var positionOffset = 0;\r\n        var $currentCell = this._getCell(this._focusedCellPosition);\r\n        var currentCellWidth = $currentCell && $currentCell.outerWidth();\r\n        if (currentCellWidth > 0) {\r\n            var rtlMultiplier = this.option(\"rtlEnabled\") ? -1 : 1;\r\n            positionOffset = \"nextInRow\" === direction || \"next\" === direction ? currentCellWidth * rtlMultiplier : currentCellWidth * rtlMultiplier * -1\r\n        }\r\n        return positionOffset\r\n    },\r\n    _editingCellTabHandler: function(eventArgs, direction) {\r\n        var eventTarget = eventArgs.originalEvent.target;\r\n        var $cell = this._getCellElementFromTarget(eventTarget);\r\n        var isEditingAllowed;\r\n        var $event = eventArgs.originalEvent;\r\n        var elementType = this._getElementType(eventTarget);\r\n        if ($cell.is(COMMAND_CELL_SELECTOR)) {\r\n            return !this._targetCellTabHandler(eventArgs, direction)\r\n        }\r\n        this._updateFocusedCellPosition($cell);\r\n        var nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\r\n        $cell = nextCellInfo.$cell;\r\n        if (!$cell || this._handleTabKeyOnMasterDetailCell($cell, direction)) {\r\n            return false\r\n        }\r\n        var columnsController = this._columnsController;\r\n        var cellIndex = this.getView(\"rowsView\").getCellIndex($cell);\r\n        var columnIndex = cellIndex + columnsController.getColumnIndexOffset();\r\n        var column = columnsController.getVisibleColumns(null, true)[columnIndex];\r\n        var $row = $cell.parent();\r\n        var rowIndex = this._getRowIndex($row);\r\n        var row = this._dataController.items()[rowIndex];\r\n        var editingController = this._editingController;\r\n        if (column && column.allowEditing) {\r\n            var _isDataRow = !row || \"data\" === row.rowType;\r\n            isEditingAllowed = editingController.allowUpdating({\r\n                row: row\r\n            }) ? _isDataRow : row && row.isNewRow\r\n        }\r\n        if (!isEditingAllowed) {\r\n            this._closeEditCell()\r\n        }\r\n        if (this._focusCell($cell, !nextCellInfo.isHighlighted)) {\r\n            if (!this._isRowEditMode() && isEditingAllowed) {\r\n                this._editFocusedCell()\r\n            } else {\r\n                this._focusInteractiveElement($cell, eventArgs.shift)\r\n            }\r\n        }\r\n        return true\r\n    },\r\n    _targetCellTabHandler: function(eventArgs, direction) {\r\n        var $event = eventArgs.originalEvent;\r\n        var eventTarget = $event.target;\r\n        var $cell = this._getCellElementFromTarget(eventTarget);\r\n        var $lastInteractiveElement = this._getInteractiveElement($cell, !eventArgs.shift);\r\n        var isOriginalHandlerRequired = false;\r\n        var elementType;\r\n        if (!isEditorCell(this, $cell) && $lastInteractiveElement.length && eventTarget !== $lastInteractiveElement.get(0)) {\r\n            isOriginalHandlerRequired = true\r\n        } else {\r\n            if (void 0 === this._focusedCellPosition.rowIndex && $(eventTarget).hasClass(ROW_CLASS)) {\r\n                this._updateFocusedCellPosition($cell)\r\n            }\r\n            elementType = this._getElementType(eventTarget);\r\n            if (this.isRowFocusType()) {\r\n                this.setCellFocusType();\r\n                if (\"row\" === elementType && isDataRow($(eventTarget))) {\r\n                    eventTarget = this.getFirstValidCellInRow($(eventTarget));\r\n                    elementType = this._getElementType(eventTarget)\r\n                }\r\n            }\r\n            var nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\r\n            $cell = nextCellInfo.$cell;\r\n            if (!$cell) {\r\n                return false\r\n            }\r\n            $cell = this._checkNewLineTransition($event, $cell);\r\n            if (!$cell) {\r\n                return false\r\n            }\r\n            this._focusCell($cell, !nextCellInfo.isHighlighted);\r\n            if (!isEditorCell(this, $cell)) {\r\n                this._focusInteractiveElement($cell, eventArgs.shift)\r\n            }\r\n        }\r\n        return isOriginalHandlerRequired\r\n    },\r\n    _getNextCellByTabKey: function($event, direction, elementType) {\r\n        var $cell = this._getNextCell(direction, elementType);\r\n        var args = $cell && this._fireFocusedCellChanging($event, $cell, true);\r\n        if (!args || args.cancel) {\r\n            return {}\r\n        }\r\n        if (args.$newCellElement) {\r\n            $cell = args.$newCellElement\r\n        }\r\n        return {\r\n            $cell: $cell,\r\n            isHighlighted: args.isHighlighted\r\n        }\r\n    },\r\n    _checkNewLineTransition: function($event, $cell) {\r\n        var rowIndex = this.getVisibleRowIndex();\r\n        var $row = $cell.parent();\r\n        if (rowIndex !== this._getRowIndex($row)) {\r\n            var cellPosition = this._getCellPosition($cell);\r\n            var args = this._fireFocusedRowChanging($event, $row);\r\n            if (args.cancel) {\r\n                return\r\n            }\r\n            if (args.rowIndexChanged) {\r\n                this.setFocusedColumnIndex(cellPosition.columnIndex);\r\n                $cell = this._getFocusedCell()\r\n            }\r\n        }\r\n        return $cell\r\n    },\r\n    _enterKeyHandler: function(eventArgs, isEditing) {\r\n        var $cell = this._getFocusedCell();\r\n        var rowIndex = this.getVisibleRowIndex();\r\n        var $row = this._focusedView && this._focusedView.getRow(rowIndex);\r\n        if (this.option(\"grouping.allowCollapsing\") && isGroupRow($row) || this.option(\"masterDetail.enabled\") && $cell && $cell.hasClass(COMMAND_EXPAND_CLASS)) {\r\n            var key = this._dataController.getKeyByRowIndex(rowIndex);\r\n            var item = this._dataController.items()[rowIndex];\r\n            if (void 0 !== key && item && item.data && !item.data.isContinuation) {\r\n                this._dataController.changeRowExpand(key)\r\n            }\r\n        } else {\r\n            this._processEnterKeyForDataCell(eventArgs, isEditing)\r\n        }\r\n    },\r\n    _processEnterKeyForDataCell: function(eventArgs, isEditing) {\r\n        var direction = this._getEnterKeyDirection(eventArgs);\r\n        var allowEditingOnEnterKey = this._allowEditingOnEnterKey();\r\n        if (isEditing || !allowEditingOnEnterKey && direction) {\r\n            this._handleEnterKeyEditingCell(eventArgs.originalEvent);\r\n            if (\"next\" === direction || \"previous\" === direction) {\r\n                this._targetCellTabHandler(eventArgs, direction)\r\n            } else if (\"upArrow\" === direction || \"downArrow\" === direction) {\r\n                this._navigateNextCell(eventArgs.originalEvent, direction)\r\n            }\r\n        } else if (allowEditingOnEnterKey) {\r\n            this._startEditing(eventArgs)\r\n        }\r\n    },\r\n    _getEnterKeyDirection: function(eventArgs) {\r\n        var enterKeyDirection = this.option(\"keyboardNavigation.enterKeyDirection\");\r\n        var isShift = eventArgs.shift;\r\n        if (\"column\" === enterKeyDirection) {\r\n            return isShift ? \"upArrow\" : \"downArrow\"\r\n        }\r\n        if (\"row\" === enterKeyDirection) {\r\n            return isShift ? \"previous\" : \"next\"\r\n        }\r\n    },\r\n    _handleEnterKeyEditingCell: function(event) {\r\n        var target = event.target;\r\n        var $cell = this._getCellElementFromTarget(target);\r\n        var isRowEditMode = this._isRowEditMode();\r\n        this._updateFocusedCellPosition($cell);\r\n        if (isRowEditMode) {\r\n            this._focusEditFormCell($cell);\r\n            setTimeout(this._editingController.saveEditData.bind(this._editingController))\r\n        } else {\r\n            eventsEngine.trigger($(target), \"change\");\r\n            this._closeEditCell();\r\n            event.preventDefault()\r\n        }\r\n    },\r\n    _escapeKeyHandler: function(eventArgs, isEditing) {\r\n        var $cell = this._getCellElementFromTarget(eventArgs.originalEvent.target);\r\n        if (isEditing) {\r\n            this._updateFocusedCellPosition($cell);\r\n            if (!this._isRowEditMode()) {\r\n                if (\"cell\" === this._editingController.getEditMode()) {\r\n                    this._editingController.cancelEditData()\r\n                } else {\r\n                    this._closeEditCell()\r\n                }\r\n            } else {\r\n                this._focusEditFormCell($cell);\r\n                this._editingController.cancelEditData();\r\n                if (0 === this._dataController.items().length) {\r\n                    this._resetFocusedCell();\r\n                    this._editorFactory.loseFocus()\r\n                }\r\n            }\r\n            eventArgs.originalEvent.preventDefault()\r\n        }\r\n    },\r\n    _ctrlFKeyHandler: function(eventArgs) {\r\n        if (this.option(\"searchPanel.visible\")) {\r\n            var searchTextEditor = this._headerPanel.getSearchTextEditor();\r\n            if (searchTextEditor) {\r\n                searchTextEditor.focus();\r\n                eventArgs.originalEvent.preventDefault()\r\n            }\r\n        }\r\n    },\r\n    _f2KeyHandler: function() {\r\n        var isEditing = this._editingController.isEditing();\r\n        var rowIndex = this.getVisibleRowIndex();\r\n        var $row = this._focusedView && this._focusedView.getRow(rowIndex);\r\n        if (!isEditing && isDataRow($row)) {\r\n            this._startEditing()\r\n        }\r\n    },\r\n    _navigateNextCell: function($event, keyCode) {\r\n        var $cell = this._getNextCell(keyCode);\r\n        var directionCode = this._getDirectionCodeByKey(keyCode);\r\n        var isCellValid = $cell && this._isCellValid($cell);\r\n        var result = isCellValid ? this._arrowKeysHandlerFocusCell($event, $cell, directionCode) : false;\r\n        return result\r\n    },\r\n    _arrowKeysHandlerFocusCell: function($event, $nextCell, direction) {\r\n        var isVerticalDirection = \"prevRow\" === direction || \"nextRow\" === direction;\r\n        var args = this._fireFocusChangingEvents($event, $nextCell, isVerticalDirection, true);\r\n        $nextCell = args.$newCellElement;\r\n        if (!args.cancel && this._isCellValid($nextCell)) {\r\n            this._focus($nextCell, !args.isHighlighted);\r\n            return true\r\n        }\r\n        return false\r\n    },\r\n    _beginFastEditing: function(originalEvent, isDeleting) {\r\n        if (!this._isFastEditingAllowed() || originalEvent.altKey || originalEvent.ctrlKey || this._editingController.isEditing()) {\r\n            return false\r\n        }\r\n        if (isDeleting) {\r\n            this._startEditing(originalEvent, FAST_EDITING_DELETE_KEY)\r\n        } else {\r\n            var key = originalEvent.key;\r\n            var keyCode = originalEvent.keyCode || originalEvent.which;\r\n            var fastEditingKey = key || keyCode && String.fromCharCode(keyCode);\r\n            if (fastEditingKey && (1 === fastEditingKey.length || fastEditingKey === FAST_EDITING_DELETE_KEY)) {\r\n                this._startEditing(originalEvent, fastEditingKey)\r\n            }\r\n        }\r\n        return true\r\n    },\r\n    _pointerEventHandler: function(e) {\r\n        var event = e.event || e;\r\n        var $target = $(event.currentTarget);\r\n        var rowsView = this.getView(\"rowsView\");\r\n        var focusedViewElement = rowsView && rowsView.element();\r\n        var $parent = $target.parent();\r\n        var isInteractiveElement = $(event.target).is(INTERACTIVE_ELEMENTS_SELECTOR);\r\n        var isRevertButton = !!$(event.target).closest(\".\".concat(REVERT_BUTTON_CLASS)).length;\r\n        var isExpandCommandCell = $target.hasClass(COMMAND_EXPAND_CLASS);\r\n        if (!this._isEventInCurrentGrid(event)) {\r\n            return\r\n        }\r\n        if (!isRevertButton && (this._isCellValid($target, !isInteractiveElement) || isExpandCommandCell)) {\r\n            $target = this._isInsideEditForm($target) ? $(event.target) : $target;\r\n            this._focusView();\r\n            $(focusedViewElement).removeClass(FOCUS_STATE_CLASS);\r\n            if ($parent.hasClass(FREESPACE_ROW_CLASS)) {\r\n                this._updateFocusedCellPosition($target);\r\n                this._applyTabIndexToElement(this._focusedView.element());\r\n                this._focusedView.focus()\r\n            } else if (!this._isMasterDetailCell($target)) {\r\n                this._clickTargetCellHandler(event, $target)\r\n            } else {\r\n                this._updateFocusedCellPosition($target)\r\n            }\r\n        } else if ($target.is(\"td\")) {\r\n            this._resetFocusedCell()\r\n        }\r\n    },\r\n    _clickTargetCellHandler: function(event, $cell) {\r\n        var columnIndex = this.getView(\"rowsView\").getCellIndex($cell);\r\n        var column = this._columnsController.getVisibleColumns()[columnIndex];\r\n        var isCellEditMode = this._isCellEditMode();\r\n        this.setCellFocusType();\r\n        var args = this._fireFocusChangingEvents(event, $cell, true);\r\n        $cell = args.$newCellElement;\r\n        if (!args.cancel) {\r\n            if (args.resetFocusedRow) {\r\n                this.getController(\"focus\")._resetFocusedRow();\r\n                return\r\n            }\r\n            if (args.rowIndexChanged) {\r\n                $cell = this._getFocusedCell()\r\n            }\r\n            if (!args.isHighlighted && !isCellEditMode) {\r\n                this.setRowFocusType()\r\n            }\r\n            this._updateFocusedCellPosition($cell);\r\n            if (this._allowRowUpdating() && isCellEditMode && column && column.allowEditing) {\r\n                this._isNeedFocus = false;\r\n                this._isHiddenFocus = false\r\n            } else {\r\n                var $target = event && $(event.target).closest(INTERACTIVE_ELEMENTS_SELECTOR + \", td\");\r\n                var isInteractiveTarget = $target && $target.not($cell).is(INTERACTIVE_ELEMENTS_SELECTOR);\r\n                var isEditor = !!column && !column.command && $cell.hasClass(EDITOR_CELL_CLASS);\r\n                var isDisabled = !isEditor && (!args.isHighlighted || isInteractiveTarget);\r\n                this._focus($cell, isDisabled, isInteractiveTarget)\r\n            }\r\n        } else {\r\n            this.setRowFocusType();\r\n            this.setFocusedRowIndex(args.prevRowIndex);\r\n            $cell = this._getFocusedCell();\r\n            if (this._editingController.isEditing() && isCellEditMode) {\r\n                this._closeEditCell()\r\n            }\r\n        }\r\n    },\r\n    _allowRowUpdating: function() {\r\n        var rowIndex = this.getVisibleRowIndex();\r\n        var row = this._dataController.items()[rowIndex];\r\n        return this._editingController.allowUpdating({\r\n            row: row\r\n        }, \"click\")\r\n    },\r\n    focus: function(element) {\r\n        var activeElementSelector;\r\n        var focusedRowEnabled = this.option(\"focusedRowEnabled\");\r\n        var isHighlighted = isCellElement($(element));\r\n        if (!element) {\r\n            activeElementSelector = \".dx-datagrid-rowsview .dx-row[tabindex]\";\r\n            if (!focusedRowEnabled) {\r\n                activeElementSelector += \", .dx-datagrid-rowsview .dx-row > td[tabindex]\"\r\n            }\r\n            element = this.component.$element().find(activeElementSelector).first()\r\n        }\r\n        element && this._focusElement($(element), isHighlighted)\r\n    },\r\n    getFocusedView: function() {\r\n        return this._focusedView\r\n    },\r\n    setupFocusedView: function() {\r\n        if (this.isKeyboardEnabled() && !isDefined(this._focusedView)) {\r\n            this._focusView()\r\n        }\r\n    },\r\n    _focusElement: function($element, isHighlighted) {\r\n        var rowsViewElement = $(this._getRowsViewElement());\r\n        var $focusedView = $element.closest(rowsViewElement);\r\n        var isRowFocusType = this.isRowFocusType();\r\n        var args = {};\r\n        if (!$focusedView.length || isCellElement($element) && !this._isCellValid($element)) {\r\n            return\r\n        }\r\n        this._focusView();\r\n        this._isNeedFocus = true;\r\n        this._isNeedScroll = true;\r\n        if (isCellElement($element) || isGroupRow($element)) {\r\n            this.setCellFocusType();\r\n            args = this._fireFocusChangingEvents(null, $element, false, isHighlighted);\r\n            $element = args.$newCellElement;\r\n            if (isRowFocusType && !args.isHighlighted) {\r\n                this.setRowFocusType()\r\n            }\r\n        }\r\n        if (!args.cancel) {\r\n            this._focus($element, !args.isHighlighted);\r\n            this._focusInteractiveElement($element)\r\n        }\r\n    },\r\n    _getFocusedViewByElement: function($element) {\r\n        var view = this.getFocusedView();\r\n        var $view = view && $(view.element());\r\n        return $element && 0 !== $element.closest($view).length\r\n    },\r\n    _focusView: function() {\r\n        this._focusedView = this.getView(\"rowsView\")\r\n    },\r\n    _resetFocusedView: function() {\r\n        this.setRowFocusType();\r\n        this._focusedView = null\r\n    },\r\n    _focusInteractiveElement: function($cell, isLast) {\r\n        if (!$cell) {\r\n            return\r\n        }\r\n        var $focusedElement = this._getInteractiveElement($cell, isLast);\r\n        gridCoreUtils.focusAndSelectElement(this, $focusedElement)\r\n    },\r\n    _focus: function($cell, disableFocus, isInteractiveElement) {\r\n        var $row = $cell && !$cell.hasClass(ROW_CLASS) ? $cell.closest(\".\".concat(ROW_CLASS)) : $cell;\r\n        if ($row && isNotFocusedRow($row)) {\r\n            return\r\n        }\r\n        var focusedView = this._focusedView;\r\n        var $focusViewElement = focusedView && focusedView.element();\r\n        var $focusElement;\r\n        this._isHiddenFocus = disableFocus;\r\n        if (isGroupRow($row) || this.isRowFocusType()) {\r\n            $focusElement = $row;\r\n            if (focusedView) {\r\n                this.setFocusedRowIndex(this._getRowIndex($row))\r\n            }\r\n        } else if (isCellElement($cell)) {\r\n            $focusElement = $cell;\r\n            this._updateFocusedCellPosition($cell)\r\n        }\r\n        if ($focusElement) {\r\n            if ($focusViewElement) {\r\n                $focusViewElement.find(\".dx-row[tabindex], .dx-row > td[tabindex]\").not($focusElement).removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabindex\")\r\n            }\r\n            eventsEngine.one($focusElement, \"blur\", e => {\r\n                if (e.relatedTarget) {\r\n                    $focusElement.removeClass(CELL_FOCUS_DISABLED_CLASS)\r\n                }\r\n            });\r\n            if (!isInteractiveElement) {\r\n                this._applyTabIndexToElement($focusElement);\r\n                eventsEngine.trigger($focusElement, \"focus\")\r\n            }\r\n            if (disableFocus) {\r\n                $focusElement.addClass(CELL_FOCUS_DISABLED_CLASS)\r\n            } else {\r\n                this._editorFactory.focus($focusElement)\r\n            }\r\n        }\r\n    },\r\n    _updateFocus: function(isRenderView) {\r\n        this._updateFocusTimeout = setTimeout(() => {\r\n            var editingController = this._editingController;\r\n            var isCellEditMode = editingController.getEditMode() === EDIT_MODE_CELL;\r\n            if (isCellEditMode && editingController.hasChanges()) {\r\n                editingController._focusEditingCell();\r\n                return\r\n            }\r\n            var $cell = this._getFocusedCell();\r\n            var isEditing = editingController.isEditing();\r\n            if ($cell && !(this._isMasterDetailCell($cell) && !this._isRowEditMode())) {\r\n                if (this._hasSkipRow($cell.parent())) {\r\n                    var direction = this._focusedCellPosition && this._focusedCellPosition.rowIndex > 0 ? \"upArrow\" : \"downArrow\";\r\n                    $cell = this._getNextCell(direction)\r\n                }\r\n                if (isElementDefined($cell)) {\r\n                    if (isRenderView && !isEditing && this._checkCellOverlapped($cell)) {\r\n                        return\r\n                    }\r\n                    if ($cell.is(\"td\") || $cell.hasClass(this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS))) {\r\n                        var isCommandCell = $cell.is(COMMAND_CELL_SELECTOR);\r\n                        var $focusedElementInsideCell = $cell.find(\":focus\");\r\n                        var isFocusedElementDefined = isElementDefined($focusedElementInsideCell);\r\n                        if ((isRenderView || !isCommandCell) && this._editorFactory.focus()) {\r\n                            if (isCommandCell && isFocusedElementDefined) {\r\n                                gridCoreUtils.focusAndSelectElement(this, $focusedElementInsideCell);\r\n                                return\r\n                            }!isFocusedElementDefined && this._focus($cell)\r\n                        } else if (!isFocusedElementDefined && (this._isNeedFocus || this._isHiddenFocus)) {\r\n                            this._focus($cell, this._isHiddenFocus)\r\n                        }\r\n                        if (isEditing) {\r\n                            this._focusInteractiveElement.bind(this)($cell)\r\n                        }\r\n                    } else {\r\n                        eventsEngine.trigger($cell, \"focus\")\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    },\r\n    _checkCellOverlapped: function($cell) {\r\n        var cellOffset = $cell.offset();\r\n        var hasScrollable = this.component.getScrollable && this.component.getScrollable();\r\n        var isOverlapped = false;\r\n        if (hasScrollable) {\r\n            if (cellOffset.left < 0) {\r\n                isOverlapped = $cell.width() + cellOffset.left <= 0\r\n            } else if (cellOffset.top < 0) {\r\n                isOverlapped = $cell.height() + cellOffset.top <= 0\r\n            }\r\n        }\r\n        return isOverlapped\r\n    },\r\n    _getFocusedCell: function() {\r\n        return $(this._getCell(this._focusedCellPosition))\r\n    },\r\n    _updateFocusedCellPositionByTarget: function(target) {\r\n        var _this$_focusedCellPos;\r\n        var elementType = this._getElementType(target);\r\n        if (\"row\" === elementType && isDefined(null === (_this$_focusedCellPos = this._focusedCellPosition) || void 0 === _this$_focusedCellPos ? void 0 : _this$_focusedCellPos.columnIndex)) {\r\n            var $row = $(target);\r\n            this._focusedView && isGroupRow($row) && this.setFocusedRowIndex(this._getRowIndex($row))\r\n        } else {\r\n            this._updateFocusedCellPosition(this._getCellElementFromTarget(target))\r\n        }\r\n    },\r\n    _updateFocusedCellPosition: function($cell, direction) {\r\n        var position = this._getCellPosition($cell, direction);\r\n        if (position) {\r\n            if (!$cell.length || position.rowIndex >= 0 && position.columnIndex >= 0) {\r\n                this.setFocusedCellPosition(position.rowIndex, position.columnIndex)\r\n            }\r\n        }\r\n        return position\r\n    },\r\n    _getFocusedColumnIndexOffset: function(columnIndex) {\r\n        var offset = 0;\r\n        var column = this._columnsController.getVisibleColumns()[columnIndex];\r\n        if (column && column.fixed) {\r\n            offset = this._getFixedColumnIndexOffset(column)\r\n        } else if (columnIndex >= 0) {\r\n            offset = this._columnsController.getColumnIndexOffset()\r\n        }\r\n        return offset\r\n    },\r\n    _getFixedColumnIndexOffset: function(column) {\r\n        var offset = isFixedColumnIndexOffsetRequired(this, column) ? this._getVisibleColumnCount() - this._columnsController.getVisibleColumns().length : 0;\r\n        return offset\r\n    },\r\n    _getCellPosition: function($cell, direction) {\r\n        var columnIndex;\r\n        var $row = isElementDefined($cell) && $cell.closest(\"tr\");\r\n        var rowsView = this.getView(\"rowsView\");\r\n        if (isElementDefined($row)) {\r\n            var rowIndex = this._getRowIndex($row);\r\n            columnIndex = rowsView.getCellIndex($cell, rowIndex);\r\n            columnIndex += this._getFocusedColumnIndexOffset(columnIndex);\r\n            if (direction) {\r\n                columnIndex = \"previous\" === direction ? columnIndex - 1 : columnIndex + 1;\r\n                columnIndex = this._applyColumnIndexBoundaries(columnIndex)\r\n            }\r\n            return {\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex\r\n            }\r\n        }\r\n    },\r\n    _focusCell: function($cell, isDisabled) {\r\n        if (this._isCellValid($cell)) {\r\n            this._focus($cell, isDisabled);\r\n            return true\r\n        }\r\n    },\r\n    _focusEditFormCell: function($cell) {\r\n        if ($cell.hasClass(MASTER_DETAIL_CELL_CLASS)) {\r\n            this._editorFactory.focus($cell, true)\r\n        }\r\n    },\r\n    _resetFocusedCell: function(preventScroll) {\r\n        var _this$_focusedView;\r\n        var $cell = this._getFocusedCell();\r\n        isElementDefined($cell) && $cell.removeAttr(\"tabindex\");\r\n        this._isNeedFocus = false;\r\n        this._isNeedScroll = false;\r\n        this._focusedCellPosition = {};\r\n        clearTimeout(this._updateFocusTimeout);\r\n        null === (_this$_focusedView = this._focusedView) || void 0 === _this$_focusedView ? void 0 : _this$_focusedView.renderFocusState(preventScroll)\r\n    },\r\n    restoreFocusableElement: function(rowIndex, $event) {\r\n        var args;\r\n        var $rowElement;\r\n        var isUpArrow = isDefined(rowIndex);\r\n        var rowsView = this.getView(\"rowsView\");\r\n        var $rowsViewElement = rowsView.element();\r\n        var columnIndex = this._focusedCellPosition.columnIndex;\r\n        var rowIndexOffset = this._dataController.getRowIndexOffset();\r\n        rowIndex = isUpArrow ? rowIndex : rowsView.getTopVisibleItemIndex() + rowIndexOffset;\r\n        if (!isUpArrow) {\r\n            this._editorFactory.loseFocus();\r\n            this._applyTabIndexToElement($rowsViewElement);\r\n            eventsEngine.trigger($rowsViewElement, \"focus\")\r\n        } else {\r\n            $rowElement = rowsView.getRow(rowIndex - rowIndexOffset);\r\n            args = this._fireFocusedRowChanging($event, $rowElement);\r\n            if (!args.cancel && args.rowIndexChanged) {\r\n                rowIndex = args.newRowIndex\r\n            }\r\n        }\r\n        if (!isUpArrow || !args.cancel) {\r\n            this.setFocusedCellPosition(rowIndex, columnIndex)\r\n        }\r\n        isUpArrow && this._updateFocus()\r\n    },\r\n    _getNewPositionByCode: function(cellPosition, elementType, code) {\r\n        var columnIndex = cellPosition.columnIndex;\r\n        var rowIndex = cellPosition.rowIndex;\r\n        var visibleColumnsCount;\r\n        if (void 0 === cellPosition.rowIndex && \"next\" === code) {\r\n            return {\r\n                columnIndex: 0,\r\n                rowIndex: 0\r\n            }\r\n        }\r\n        switch (code) {\r\n            case \"nextInRow\":\r\n            case \"next\":\r\n                visibleColumnsCount = this._getVisibleColumnCount();\r\n                if (columnIndex < visibleColumnsCount - 1 && \"row\" !== elementType && this._hasValidCellAfterPosition({\r\n                        columnIndex: columnIndex,\r\n                        rowIndex: rowIndex\r\n                    })) {\r\n                    columnIndex++\r\n                } else if (!this._isLastRow(rowIndex) && \"next\" === code) {\r\n                    columnIndex = 0;\r\n                    rowIndex++\r\n                }\r\n                break;\r\n            case \"previousInRow\":\r\n            case \"previous\":\r\n                if (columnIndex > 0 && \"row\" !== elementType && this._hasValidCellBeforePosition({\r\n                        columnIndex: columnIndex,\r\n                        rowIndex: rowIndex\r\n                    })) {\r\n                    columnIndex--\r\n                } else if (rowIndex > 0 && \"previous\" === code) {\r\n                    rowIndex--;\r\n                    visibleColumnsCount = this._getVisibleColumnCount();\r\n                    columnIndex = visibleColumnsCount - 1\r\n                }\r\n                break;\r\n            case \"upArrow\":\r\n                rowIndex = rowIndex > 0 ? rowIndex - 1 : rowIndex;\r\n                break;\r\n            case \"downArrow\":\r\n                rowIndex = !this._isLastRow(rowIndex) ? rowIndex + 1 : rowIndex\r\n        }\r\n        return {\r\n            columnIndex: columnIndex,\r\n            rowIndex: rowIndex\r\n        }\r\n    },\r\n    setFocusedCellPosition: function(rowIndex, columnIndex) {\r\n        this.setFocusedRowIndex(rowIndex);\r\n        this.setFocusedColumnIndex(columnIndex)\r\n    },\r\n    setFocusedRowIndex: function(rowIndex) {\r\n        if (!this._focusedCellPosition) {\r\n            this._focusedCellPosition = {}\r\n        }\r\n        this._focusedCellPosition.rowIndex = rowIndex\r\n    },\r\n    setFocusedColumnIndex: function(columnIndex) {\r\n        if (!this._focusedCellPosition) {\r\n            this._focusedCellPosition = {}\r\n        }\r\n        this._focusedCellPosition.columnIndex = columnIndex\r\n    },\r\n    getRowIndex: function() {\r\n        return this._focusedCellPosition ? this._focusedCellPosition.rowIndex : -1\r\n    },\r\n    getColumnIndex: function() {\r\n        return this._focusedCellPosition ? this._focusedCellPosition.columnIndex : -1\r\n    },\r\n    getVisibleRowIndex: function() {\r\n        var rowIndex = this._focusedCellPosition && this._focusedCellPosition.rowIndex;\r\n        if (!isDefined(rowIndex)) {\r\n            return -1\r\n        }\r\n        return rowIndex - this._dataController.getRowIndexOffset()\r\n    },\r\n    getVisibleColumnIndex: function() {\r\n        var columnIndex = this._focusedCellPosition && this._focusedCellPosition.columnIndex;\r\n        if (!isDefined(columnIndex)) {\r\n            return -1\r\n        }\r\n        return columnIndex - this._columnsController.getColumnIndexOffset()\r\n    },\r\n    _applyColumnIndexBoundaries: function(columnIndex) {\r\n        var visibleColumnsCount = this._getVisibleColumnCount();\r\n        if (columnIndex < 0) {\r\n            columnIndex = 0\r\n        } else if (columnIndex >= visibleColumnsCount) {\r\n            columnIndex = visibleColumnsCount - 1\r\n        }\r\n        return columnIndex\r\n    },\r\n    _isCellByPositionValid: function(cellPosition) {\r\n        var $cell = $(this._getCell(cellPosition));\r\n        return this._isCellValid($cell)\r\n    },\r\n    _isLastRow: function(rowIndex) {\r\n        var dataController = this._dataController;\r\n        if (this._isVirtualRowRender()) {\r\n            return rowIndex >= dataController.getMaxRowIndex()\r\n        }\r\n        return rowIndex === dataController.items().length - 1\r\n    },\r\n    _isFirstValidCell: function(cellPosition) {\r\n        var isFirstValidCell = false;\r\n        if (0 === cellPosition.rowIndex && cellPosition.columnIndex >= 0) {\r\n            isFirstValidCell = isFirstValidCell || !this._hasValidCellBeforePosition(cellPosition)\r\n        }\r\n        return isFirstValidCell\r\n    },\r\n    _hasValidCellBeforePosition: function(cellPosition) {\r\n        var columnIndex = cellPosition.columnIndex;\r\n        var hasValidCells = false;\r\n        while (columnIndex > 0 && !hasValidCells) {\r\n            var checkingPosition = {\r\n                columnIndex: --columnIndex,\r\n                rowIndex: cellPosition.rowIndex\r\n            };\r\n            hasValidCells = this._isCellByPositionValid(checkingPosition)\r\n        }\r\n        return hasValidCells\r\n    },\r\n    _hasValidCellAfterPosition: function(cellPosition) {\r\n        var columnIndex = cellPosition.columnIndex;\r\n        var hasValidCells = false;\r\n        var visibleColumnCount = this._getVisibleColumnCount();\r\n        while (columnIndex < visibleColumnCount - 1 && !hasValidCells) {\r\n            var checkingPosition = {\r\n                columnIndex: ++columnIndex,\r\n                rowIndex: cellPosition.rowIndex\r\n            };\r\n            hasValidCells = this._isCellByPositionValid(checkingPosition)\r\n        }\r\n        return hasValidCells\r\n    },\r\n    _isLastValidCell: function(cellPosition) {\r\n        var nextColumnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex + 1 : 0;\r\n        var rowIndex = cellPosition.rowIndex;\r\n        var checkingPosition = {\r\n            columnIndex: nextColumnIndex,\r\n            rowIndex: rowIndex\r\n        };\r\n        var visibleRows = this._dataController.getVisibleRows();\r\n        var row = visibleRows && visibleRows[rowIndex];\r\n        var isLastRow = this._isLastRow(rowIndex);\r\n        if (!isLastRow) {\r\n            return false\r\n        }\r\n        if (row && \"group\" === row.rowType && cellPosition.columnIndex > 0) {\r\n            return true\r\n        }\r\n        if (cellPosition.columnIndex === this._getVisibleColumnCount() - 1) {\r\n            return true\r\n        }\r\n        if (this._isCellByPositionValid(checkingPosition)) {\r\n            return false\r\n        }\r\n        return this._isLastValidCell(checkingPosition)\r\n    },\r\n    _isCellValid: function($cell, isClick) {\r\n        if (isElementDefined($cell)) {\r\n            var rowsView = this.getView(\"rowsView\");\r\n            var $row = $cell.parent();\r\n            var columnsController = this._columnsController;\r\n            var columnIndex = rowsView.getCellIndex($cell) + columnsController.getColumnIndexOffset();\r\n            var column = columnsController.getVisibleColumns(null, true)[columnIndex];\r\n            var visibleColumnCount = this._getVisibleColumnCount();\r\n            var editingController = this._editingController;\r\n            var isMasterDetailRow = isDetailRow($row);\r\n            var isShowWhenGrouped = column && column.showWhenGrouped;\r\n            var isDataCell = column && !$cell.hasClass(COMMAND_EXPAND_CLASS) && isDataRow($row);\r\n            if (this._isMasterDetailCell($cell)) {\r\n                return true\r\n            }\r\n            if (visibleColumnCount > columnIndex && (!isMasterDetailRow && column && (!isDefined(column.groupIndex) || isShowWhenGrouped && isDataCell) || parseInt($cell.attr(\"colspan\")) > 1)) {\r\n                var rowItems = this._dataController.items();\r\n                var visibleRowIndex = rowsView.getRowIndex($row);\r\n                var row = rowItems[visibleRowIndex];\r\n                var isCellEditing = editingController && this._isCellEditMode() && editingController.isEditing();\r\n                var isRowEditingInCurrentRow = editingController && editingController.isEditRow(visibleRowIndex);\r\n                var isEditing = isRowEditingInCurrentRow || isCellEditing;\r\n                if (column.command) {\r\n                    if (this._isLegacyNavigation()) {\r\n                        return !isEditing && \"expand\" === column.command\r\n                    }\r\n                    if (isCellEditing) {\r\n                        return false\r\n                    }\r\n                    if (isRowEditingInCurrentRow) {\r\n                        return \"select\" !== column.command\r\n                    }\r\n                    return !isEditing\r\n                }\r\n                if (isCellEditing && row && \"data\" !== row.rowType) {\r\n                    return false\r\n                }\r\n                return !isEditing || column.allowEditing || isClick\r\n            }\r\n        }\r\n    },\r\n    getFirstValidCellInRow: function($row, columnIndex) {\r\n        var $cells = $row.find(\"> td\");\r\n        var $cell;\r\n        var $result;\r\n        columnIndex = columnIndex || 0;\r\n        for (var i = columnIndex; i < $cells.length; ++i) {\r\n            $cell = $cells.eq(i);\r\n            if (this._isCellValid($cell)) {\r\n                $result = $cell;\r\n                break\r\n            }\r\n        }\r\n        return $result\r\n    },\r\n    _getNextCell: function(keyCode, elementType, cellPosition) {\r\n        var focusedCellPosition = cellPosition || this._focusedCellPosition;\r\n        var isRowFocusType = this.isRowFocusType();\r\n        var includeCommandCells = isRowFocusType || inArray(keyCode, [\"next\", \"previous\"]) > -1;\r\n        var $cell;\r\n        var $row;\r\n        if (this._focusedView && focusedCellPosition) {\r\n            var newFocusedCellPosition = this._getNewPositionByCode(focusedCellPosition, elementType, keyCode);\r\n            $cell = $(this._getCell(newFocusedCellPosition));\r\n            var isLastCellOnDirection = \"previous\" === keyCode ? this._isFirstValidCell(newFocusedCellPosition) : this._isLastValidCell(newFocusedCellPosition);\r\n            if (isElementDefined($cell) && !this._isCellValid($cell) && this._isCellInRow(newFocusedCellPosition, includeCommandCells) && !isLastCellOnDirection) {\r\n                if (isRowFocusType) {\r\n                    $cell = this.getFirstValidCellInRow($cell.parent(), newFocusedCellPosition.columnIndex)\r\n                } else {\r\n                    $cell = this._getNextCell(keyCode, \"cell\", newFocusedCellPosition)\r\n                }\r\n            }\r\n            $row = isElementDefined($cell) && $cell.parent();\r\n            if (this._hasSkipRow($row)) {\r\n                var rowIndex = this._getRowIndex($row);\r\n                if (!this._isLastRow(rowIndex)) {\r\n                    $cell = this._getNextCell(keyCode, \"row\", {\r\n                        columnIndex: focusedCellPosition.columnIndex,\r\n                        rowIndex: rowIndex\r\n                    })\r\n                } else {\r\n                    return null\r\n                }\r\n            }\r\n            return isElementDefined($cell) ? $cell : null\r\n        }\r\n        return null\r\n    },\r\n    _startEditing: function(eventArgs, fastEditingKey) {\r\n        var focusedCellPosition = this._focusedCellPosition;\r\n        var visibleRowIndex = this.getVisibleRowIndex();\r\n        var visibleColumnIndex = this.getVisibleColumnIndex();\r\n        var row = this._dataController.items()[visibleRowIndex];\r\n        var column = this._columnsController.getVisibleColumns()[visibleColumnIndex];\r\n        if (this._isAllowEditing(row, column)) {\r\n            if (this._isRowEditMode()) {\r\n                this._editingController.editRow(visibleRowIndex)\r\n            } else if (focusedCellPosition) {\r\n                this._startEditCell(eventArgs, fastEditingKey)\r\n            }\r\n        }\r\n    },\r\n    _isAllowEditing: function(row, column) {\r\n        return this._editingController.allowUpdating({\r\n            row: row\r\n        }) && column && column.allowEditing\r\n    },\r\n    _editFocusedCell: function() {\r\n        var rowIndex = this.getVisibleRowIndex();\r\n        var colIndex = this.getVisibleColumnIndex();\r\n        return this._editingController.editCell(rowIndex, colIndex)\r\n    },\r\n    _startEditCell: function(eventArgs, fastEditingKey) {\r\n        this._fastEditingStarted = isDefined(fastEditingKey);\r\n        var editResult = this._editFocusedCell();\r\n        if (this._isFastEditingStarted()) {\r\n            if (true === editResult) {\r\n                this._editingCellHandler(eventArgs, fastEditingKey)\r\n            } else if (editResult && editResult.done) {\r\n                var editorValue = fastEditingKey !== FAST_EDITING_DELETE_KEY ? fastEditingKey : \"\";\r\n                editResult.done(() => this._editingCellHandler(eventArgs, editorValue))\r\n            }\r\n        }\r\n    },\r\n    _editingCellHandler: function(eventArgs, editorValue) {\r\n        var $input = this._getFocusedCell().find(\".dx-texteditor-input\").eq(0);\r\n        var keyDownEvent = createEvent(eventArgs, {\r\n            type: \"keydown\",\r\n            target: $input.get(0)\r\n        });\r\n        var keyPressEvent = createEvent(eventArgs, {\r\n            type: \"keypress\",\r\n            target: $input.get(0)\r\n        });\r\n        var inputEvent = createEvent(eventArgs, {\r\n            type: \"input\",\r\n            target: $input.get(0)\r\n        });\r\n        $input.get(0).select();\r\n        eventsEngine.trigger($input, keyDownEvent);\r\n        if (!keyDownEvent.isDefaultPrevented()) {\r\n            eventsEngine.trigger($input, keyPressEvent);\r\n            if (!keyPressEvent.isDefaultPrevented()) {\r\n                var timeout = browser.mozilla ? 25 : 0;\r\n                setTimeout(() => {\r\n                    $input.val(editorValue);\r\n                    if (browser.msie) {\r\n                        gridCoreUtils.setSelectionRange($input.get(0), {\r\n                            selectionStart: editorValue.length,\r\n                            selectionEnd: editorValue.length\r\n                        })\r\n                    }\r\n                    var $widgetContainer = $input.closest(\".\".concat(WIDGET_CLASS));\r\n                    eventsEngine.off($widgetContainer, \"focusout\");\r\n                    eventsEngine.one($widgetContainer, \"focusout\", (function() {\r\n                        eventsEngine.trigger($input, \"change\")\r\n                    }));\r\n                    eventsEngine.trigger($input, inputEvent)\r\n                }, timeout)\r\n            }\r\n        }\r\n    },\r\n    _fireFocusChangingEvents: function($event, $cell, fireRowEvent, isHighlighted) {\r\n        var args = {};\r\n        var cellPosition = this._getCellPosition($cell) || {};\r\n        if (this.isCellFocusType()) {\r\n            args = this._fireFocusedCellChanging($event, $cell, isHighlighted);\r\n            if (!args.cancel) {\r\n                cellPosition.columnIndex = args.newColumnIndex;\r\n                cellPosition.rowIndex = args.newRowIndex;\r\n                isHighlighted = args.isHighlighted;\r\n                $cell = $(this._getCell(cellPosition))\r\n            }\r\n        }\r\n        if (!args.cancel && fireRowEvent && $cell) {\r\n            args = this._fireFocusedRowChanging($event, $cell.parent());\r\n            if (!args.cancel) {\r\n                cellPosition.rowIndex = args.newRowIndex;\r\n                args.isHighlighted = isHighlighted\r\n            }\r\n        }\r\n        args.$newCellElement = $(this._getCell(cellPosition));\r\n        if (!args.$newCellElement.length) {\r\n            args.$newCellElement = $cell\r\n        }\r\n        return args\r\n    },\r\n    _fireFocusedCellChanging: function($event, $cellElement, isHighlighted) {\r\n        var prevCellIndex = this.option(\"focusedColumnIndex\");\r\n        var prevRowIndex = this.option(\"focusedRowIndex\");\r\n        var cellPosition = this._getCellPosition($cellElement);\r\n        var columnIndex = cellPosition ? cellPosition.columnIndex : -1;\r\n        var rowIndex = cellPosition ? cellPosition.rowIndex : -1;\r\n        var args = {\r\n            cellElement: $cellElement,\r\n            prevColumnIndex: prevCellIndex,\r\n            prevRowIndex: prevRowIndex,\r\n            newColumnIndex: columnIndex,\r\n            newRowIndex: rowIndex,\r\n            rows: this._dataController.getVisibleRows(),\r\n            columns: this._columnsController.getVisibleColumns(),\r\n            event: $event,\r\n            isHighlighted: isHighlighted || false,\r\n            cancel: false\r\n        };\r\n        this._canceledCellPosition = null;\r\n        this.executeAction(\"onFocusedCellChanging\", args);\r\n        if (args.newColumnIndex !== columnIndex || args.newRowIndex !== rowIndex) {\r\n            args.$newCellElement = $(this._getCell({\r\n                columnIndex: args.newColumnIndex,\r\n                rowIndex: args.newRowIndex\r\n            }))\r\n        }\r\n        if (args.cancel) {\r\n            this._canceledCellPosition = {\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex\r\n            }\r\n        }\r\n        return args\r\n    },\r\n    _fireFocusedCellChanged: function($cellElement, prevCellIndex, prevRowIndex) {\r\n        var dataController = this._dataController;\r\n        var columnIndex = this.getView(\"rowsView\").getCellIndex($cellElement);\r\n        var rowIndex = this._getRowIndex($cellElement && $cellElement.parent());\r\n        var localRowIndex = Math.min(rowIndex - dataController.getRowIndexOffset(), dataController.items().length - 1);\r\n        var isEditingCell = this._editingController.isEditCell(localRowIndex, columnIndex);\r\n        var row = dataController.items()[localRowIndex];\r\n        if (!isEditingCell && (prevCellIndex !== columnIndex || prevRowIndex !== rowIndex)) {\r\n            this.executeAction(\"onFocusedCellChanged\", {\r\n                cellElement: $cellElement,\r\n                columnIndex: columnIndex,\r\n                rowIndex: rowIndex,\r\n                row: row,\r\n                column: this._columnsController.getVisibleColumns()[columnIndex]\r\n            })\r\n        }\r\n    },\r\n    _fireFocusedRowChanging: function(eventArgs, $newFocusedRow) {\r\n        var newRowIndex = this._getRowIndex($newFocusedRow);\r\n        var dataController = this._dataController;\r\n        var prevFocusedRowIndex = this.option(\"focusedRowIndex\");\r\n        var loadingOperationTypes = dataController.loadingOperationTypes();\r\n        var args = {\r\n            rowElement: $newFocusedRow,\r\n            prevRowIndex: prevFocusedRowIndex,\r\n            newRowIndex: newRowIndex,\r\n            event: eventArgs,\r\n            rows: dataController.getVisibleRows(),\r\n            cancel: false\r\n        };\r\n        if (!dataController || dataController.isLoading() && (loadingOperationTypes.reload || loadingOperationTypes.paging)) {\r\n            args.cancel = true;\r\n            return args\r\n        }\r\n        if (this.option(\"focusedRowEnabled\")) {\r\n            this.executeAction(\"onFocusedRowChanging\", args);\r\n            if (!args.cancel && args.newRowIndex !== newRowIndex) {\r\n                args.resetFocusedRow = args.newRowIndex < 0;\r\n                if (!args.resetFocusedRow) {\r\n                    this.setFocusedRowIndex(args.newRowIndex)\r\n                }\r\n                args.rowIndexChanged = true\r\n            }\r\n        }\r\n        return args\r\n    },\r\n    _fireFocusedRowChanged: function($rowElement) {\r\n        var row;\r\n        var focusedRowKey = this.option(\"focusedRowKey\");\r\n        var focusController = this.getController(\"focus\");\r\n        var focusedRowIndex = null === focusController || void 0 === focusController ? void 0 : focusController.getFocusedRowIndexByKey(focusedRowKey);\r\n        if (this.option(\"focusedRowEnabled\")) {\r\n            if (focusedRowIndex >= 0) {\r\n                var dataController = this._dataController;\r\n                row = focusedRowIndex >= 0 && dataController.getVisibleRows()[focusedRowIndex - dataController.getRowIndexOffset()]\r\n            }\r\n            this.executeAction(\"onFocusedRowChanged\", {\r\n                rowElement: $rowElement,\r\n                rowIndex: focusedRowIndex,\r\n                row: row\r\n            })\r\n        }\r\n    },\r\n    _isEventInCurrentGrid: function(event) {\r\n        return gridCoreUtils.isElementInCurrentGrid(this, $(event.target))\r\n    },\r\n    _isRowEditMode: function() {\r\n        var editMode = this._editingController.getEditMode();\r\n        return editMode === EDIT_MODE_ROW || editMode === EDIT_MODE_FORM\r\n    },\r\n    _isCellEditMode: function() {\r\n        var editMode = this._editingController.getEditMode();\r\n        return editMode === EDIT_MODE_CELL || editMode === EDIT_MODE_BATCH\r\n    },\r\n    _isFastEditingAllowed: function() {\r\n        return this._isCellEditMode() && this.option(\"keyboardNavigation.editOnKeyPress\")\r\n    },\r\n    _getInteractiveElement: function($cell, isLast) {\r\n        var $focusedElement = $cell.find(INTERACTIVE_ELEMENTS_SELECTOR).filter(\":visible\");\r\n        return isLast ? $focusedElement.last() : $focusedElement.first()\r\n    },\r\n    _applyTabIndexToElement: function($element) {\r\n        var tabIndex = this.option(\"tabIndex\") || 0;\r\n        $element.attr(\"tabindex\", isDefined(tabIndex) ? tabIndex : 0)\r\n    },\r\n    _getCell: function(cellPosition) {\r\n        if (this._focusedView && cellPosition) {\r\n            var rowIndexOffset = this._dataController.getRowIndexOffset();\r\n            var column = this._columnsController.getVisibleColumns(null, true)[cellPosition.columnIndex];\r\n            var columnIndexOffset = column && column.fixed ? this._getFixedColumnIndexOffset(column) : this._columnsController.getColumnIndexOffset();\r\n            var rowIndex = cellPosition.rowIndex >= 0 ? cellPosition.rowIndex - rowIndexOffset : -1;\r\n            var columnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex - columnIndexOffset : -1;\r\n            return this._focusedView.getCell({\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex\r\n            })\r\n        }\r\n    },\r\n    _getRowIndex: function($row) {\r\n        var rowsView = this.getView(\"rowsView\");\r\n        var rowIndex = rowsView.getRowIndex($row);\r\n        if (rowIndex >= 0) {\r\n            rowIndex += this._dataController.getRowIndexOffset()\r\n        }\r\n        return rowIndex\r\n    },\r\n    _hasSkipRow: function($row) {\r\n        var row = $row && $row.get(0);\r\n        return row && (\"none\" === row.style.display || $row.hasClass(this.addWidgetPrefix(GROUP_FOOTER_CLASS)) || isDetailRow($row) && !$row.hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS)))\r\n    },\r\n    _allowEditingOnEnterKey: function() {\r\n        return \"startEdit\" === this.option(\"keyboardNavigation.enterKeyAction\")\r\n    },\r\n    _isLegacyNavigation: function() {\r\n        return this.option(\"useLegacyKeyboardNavigation\")\r\n    },\r\n    _getDirectionCodeByKey: function(key) {\r\n        var directionCode;\r\n        switch (key) {\r\n            case \"upArrow\":\r\n                directionCode = \"prevRow\";\r\n                break;\r\n            case \"downArrow\":\r\n                directionCode = \"nextRow\";\r\n                break;\r\n            case \"leftArrow\":\r\n                directionCode = this.option(\"rtlEnabled\") ? \"nextInRow\" : \"previousInRow\";\r\n                break;\r\n            case \"rightArrow\":\r\n                directionCode = this.option(\"rtlEnabled\") ? \"previousInRow\" : \"nextInRow\"\r\n        }\r\n        return directionCode\r\n    },\r\n    _isVirtualScrolling: function() {\r\n        var scrollingMode = this.option(\"scrolling.mode\");\r\n        return \"virtual\" === scrollingMode || \"infinite\" === scrollingMode\r\n    },\r\n    _isVirtualRowRender: function() {\r\n        return this._isVirtualScrolling() || \"virtual\" === this.option(\"scrolling.rowRenderingMode\")\r\n    },\r\n    _isVirtualColumnRender: function() {\r\n        return \"virtual\" === this.option(\"scrolling.columnRenderingMode\")\r\n    },\r\n    _scrollBy: function(left, top, rowIndex, $event) {\r\n        var that = this;\r\n        var scrollable = this.getView(\"rowsView\").getScrollable();\r\n        if (that._focusedCellPosition) {\r\n            scrollable.on(\"scroll\", (function scrollHandler() {\r\n                scrollable.off(\"scroll\", scrollHandler);\r\n                setTimeout(that.restoreFocusableElement.bind(that, rowIndex, $event))\r\n            }))\r\n        }\r\n        return scrollable.scrollBy({\r\n            left: left,\r\n            top: top\r\n        })\r\n    },\r\n    _isInsideEditForm: function(element) {\r\n        return $(element).closest(\".\" + this.addWidgetPrefix(EDIT_FORM_CLASS)).length > 0\r\n    },\r\n    _isMasterDetailCell: function(element) {\r\n        var $masterDetailCell = $(element).closest(\".\" + MASTER_DETAIL_CELL_CLASS);\r\n        var $masterDetailGrid = $masterDetailCell.closest(\".\" + this.getWidgetContainerClass()).parent();\r\n        return $masterDetailCell.length && $masterDetailGrid.is(this.component.$element())\r\n    },\r\n    _processNextCellInMasterDetail: function($nextCell) {\r\n        if (!this._isInsideEditForm($nextCell) && $nextCell) {\r\n            this._applyTabIndexToElement($nextCell)\r\n        }\r\n    },\r\n    _handleTabKeyOnMasterDetailCell: function(target, direction) {\r\n        if (this._isMasterDetailCell(target)) {\r\n            this._updateFocusedCellPosition($(target), direction);\r\n            var $nextCell = this._getNextCell(direction, \"row\");\r\n            this._processNextCellInMasterDetail($nextCell);\r\n            return true\r\n        }\r\n        return false\r\n    },\r\n    _getElementType: function(target) {\r\n        return $(target).is(\"tr\") ? \"row\" : \"cell\"\r\n    },\r\n    _isFastEditingStarted: function() {\r\n        return this._isFastEditingAllowed() && this._fastEditingStarted\r\n    },\r\n    _getVisibleColumnCount: function() {\r\n        return this._columnsController.getVisibleColumns(null, true).length\r\n    },\r\n    _isCellInRow: function(cellPosition, includeCommandCells) {\r\n        var columnIndex = cellPosition.columnIndex;\r\n        var visibleColumnsCount = this._getVisibleColumnCount();\r\n        return includeCommandCells ? columnIndex >= 0 && columnIndex <= visibleColumnsCount - 1 : columnIndex > 0 && columnIndex < visibleColumnsCount - 1\r\n    },\r\n    _getCellElementFromTarget: function(target) {\r\n        var elementType = this._getElementType(target);\r\n        var $targetElement = $(target);\r\n        var $cell;\r\n        if (\"cell\" === elementType) {\r\n            $cell = $targetElement.closest(\".\".concat(ROW_CLASS, \" > td\"))\r\n        } else {\r\n            $cell = $targetElement.children().not(\".\" + COMMAND_EXPAND_CLASS).first()\r\n        }\r\n        return $cell\r\n    },\r\n    _getRowsViewElement: function() {\r\n        var rowsView = this.getView(\"rowsView\");\r\n        return rowsView && rowsView.element()\r\n    },\r\n    isKeyboardEnabled: function() {\r\n        return this.option(\"keyboardNavigation.enabled\")\r\n    },\r\n    _processCanceledEditCellPosition: function(rowIndex, columnIndex) {\r\n        if (this._canceledCellPosition) {\r\n            var isCanceled = this._canceledCellPosition.rowIndex === rowIndex && this._canceledCellPosition.columnIndex === columnIndex;\r\n            this._canceledCellPosition = null;\r\n            return isCanceled\r\n        }\r\n    }\r\n});\r\nexport var keyboardNavigationModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            useLegacyKeyboardNavigation: false,\r\n            keyboardNavigation: {\r\n                enabled: true,\r\n                enterKeyAction: \"startEdit\",\r\n                enterKeyDirection: \"none\",\r\n                editOnKeyPress: false\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        keyboardNavigation: KeyboardNavigationController\r\n    },\r\n    extenders: {\r\n        views: {\r\n            rowsView: {\r\n                _rowClick: function(e) {\r\n                    var editRowIndex = this.getController(\"editing\").getEditRowIndex();\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    if (editRowIndex === e.rowIndex) {\r\n                        keyboardController.setCellFocusType()\r\n                    }\r\n                    var needTriggerPointerEventHandler = isMobile() && this.option(\"focusedRowEnabled\");\r\n                    if (needTriggerPointerEventHandler) {\r\n                        this._triggerPointerDownEventHandler(e)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _triggerPointerDownEventHandler: function(e) {\r\n                    var originalEvent = e.event.originalEvent;\r\n                    if (originalEvent) {\r\n                        var keyboardController = this.getController(\"keyboardNavigation\");\r\n                        var $cell = $(originalEvent.target);\r\n                        var columnIndex = this.getCellIndex($cell);\r\n                        var column = this.getController(\"columns\").getVisibleColumns()[columnIndex];\r\n                        var row = this.getController(\"data\").items()[e.rowIndex];\r\n                        if (keyboardController._isAllowEditing(row, column)) {\r\n                            var eventArgs = createEvent(originalEvent, {\r\n                                currentTarget: originalEvent.target\r\n                            });\r\n                            keyboardController._pointerEventHandler(eventArgs)\r\n                        }\r\n                    }\r\n                },\r\n                renderFocusState: function(preventScroll) {\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    var $rowsViewElement = this.element();\r\n                    if ($rowsViewElement && !focused($rowsViewElement)) {\r\n                        $rowsViewElement.attr(\"tabindex\", null)\r\n                    }\r\n                    var rowIndex = keyboardController.getVisibleRowIndex();\r\n                    if (!isDefined(rowIndex) || rowIndex < 0) {\r\n                        rowIndex = 0\r\n                    }\r\n                    var cellElements = this.getCellElements(rowIndex);\r\n                    if (keyboardController.isKeyboardEnabled() && cellElements.length) {\r\n                        this.updateFocusElementTabIndex(cellElements, preventScroll)\r\n                    }\r\n                },\r\n                updateFocusElementTabIndex: function(cellElements) {\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    var $row = cellElements.eq(0).parent();\r\n                    if (isGroupRow($row)) {\r\n                        keyboardController._applyTabIndexToElement($row)\r\n                    } else {\r\n                        var columnIndex = keyboardController.getColumnIndex();\r\n                        if (!isDefined(columnIndex) || columnIndex < 0) {\r\n                            columnIndex = 0\r\n                        }\r\n                        this._updateFocusedCellTabIndex(cellElements, columnIndex)\r\n                    }\r\n                },\r\n                _updateFocusedCellTabIndex: function(cellElements, columnIndex) {\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    var cellElementsLength = cellElements ? cellElements.length : -1;\r\n                    var updateCellTabIndex = function($cell) {\r\n                        var isMasterDetailCell = keyboardController._isMasterDetailCell($cell);\r\n                        var isValidCell = keyboardController._isCellValid($cell);\r\n                        if (!isMasterDetailCell && isValidCell && isCellElement($cell)) {\r\n                            keyboardController._applyTabIndexToElement($cell);\r\n                            keyboardController.setCellFocusType();\r\n                            return true\r\n                        }\r\n                    };\r\n                    var $cell = cellElements.filter(\"[aria-colindex='\".concat(columnIndex + 1, \"']\"));\r\n                    if ($cell.length) {\r\n                        updateCellTabIndex($cell)\r\n                    } else {\r\n                        if (cellElementsLength <= columnIndex) {\r\n                            columnIndex = cellElementsLength - 1\r\n                        }\r\n                        for (var i = columnIndex; i < cellElementsLength; ++i) {\r\n                            if (updateCellTabIndex($(cellElements[i]))) {\r\n                                break\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                renderDelayedTemplates: function(change) {\r\n                    this.callBase.apply(this, arguments);\r\n                    this._renderFocusByChange(change)\r\n                },\r\n                _renderFocusByChange(change) {\r\n                    if (!change || !change.repaintChangesOnly) {\r\n                        var preventScroll = shouldPreventScroll(this);\r\n                        this.renderFocusState(preventScroll)\r\n                    }\r\n                },\r\n                _renderCore: function(change) {\r\n                    this.callBase.apply(this, arguments);\r\n                    this._renderFocusByChange(change)\r\n                },\r\n                _editCellPrepared: function($cell) {\r\n                    var editorInstance = this._getEditorInstance($cell);\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    var isEditingNavigationMode = keyboardController && keyboardController._isFastEditingStarted();\r\n                    if (editorInstance && isEditingNavigationMode) {\r\n                        this._handleEditingNavigationMode(editorInstance)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _handleEditingNavigationMode: function(editorInstance) {\r\n                    [\"downArrow\", \"upArrow\"].forEach((function(keyName) {\r\n                        var originalKeyHandler = editorInstance._supportedKeys()[keyName];\r\n                        editorInstance.registerKeyHandler(keyName, e => {\r\n                            var isDropDownOpened = \"true\" === editorInstance._input().attr(\"aria-expanded\");\r\n                            if (isDropDownOpened) {\r\n                                return originalKeyHandler && originalKeyHandler.call(editorInstance, e)\r\n                            }\r\n                        })\r\n                    }));\r\n                    editorInstance.registerKeyHandler(\"leftArrow\", noop);\r\n                    editorInstance.registerKeyHandler(\"rightArrow\", noop);\r\n                    var isDateBoxWithMask = editorInstance.NAME === DATEBOX_WIDGET_NAME && editorInstance.option(\"useMaskBehavior\");\r\n                    if (isDateBoxWithMask) {\r\n                        editorInstance.registerKeyHandler(\"enter\", noop)\r\n                    }\r\n                },\r\n                _getEditorInstance: function($cell) {\r\n                    var $editor = $cell.find(\".dx-texteditor\").eq(0);\r\n                    return gridCoreUtils.getWidgetInstance($editor)\r\n                }\r\n            }\r\n        },\r\n        controllers: {\r\n            editing: {\r\n                editCell: function(rowIndex, columnIndex) {\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    if (keyboardController._processCanceledEditCellPosition(rowIndex, columnIndex)) {\r\n                        return false\r\n                    }\r\n                    var isCellEditing = this.callBase(rowIndex, columnIndex);\r\n                    if (isCellEditing) {\r\n                        keyboardController.setupFocusedView()\r\n                    }\r\n                    return isCellEditing\r\n                },\r\n                editRow: function(rowIndex) {\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    var visibleColumnIndex = keyboardController.getVisibleColumnIndex();\r\n                    var column = this._columnsController.getVisibleColumns()[visibleColumnIndex];\r\n                    if (column && column.type || this.option(\"editing.mode\") === EDIT_MODE_FORM) {\r\n                        keyboardController._resetFocusedCell()\r\n                    }\r\n                    this.callBase(rowIndex)\r\n                },\r\n                addRow: function(parentKey) {\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    keyboardController.setupFocusedView();\r\n                    keyboardController.setCellFocusType();\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                getFocusedCellInRow: function(rowIndex) {\r\n                    var keyboardNavigationController = this.getController(\"keyboardNavigation\");\r\n                    var $cell = this.callBase(rowIndex);\r\n                    if (keyboardNavigationController.isKeyboardEnabled() && keyboardNavigationController._focusedCellPosition.rowIndex === rowIndex) {\r\n                        var $focusedCell = keyboardNavigationController._getFocusedCell();\r\n                        if (isElementDefined($focusedCell) && !$focusedCell.hasClass(COMMAND_EDIT_CLASS)) {\r\n                            $cell = $focusedCell\r\n                        }\r\n                    }\r\n                    return $cell\r\n                },\r\n                _processCanceledEditingCell: function() {\r\n                    this.closeEditCell().done(() => {\r\n                        var keyboardNavigation = this.getController(\"keyboardNavigation\");\r\n                        keyboardNavigation._updateFocus()\r\n                    })\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._keyboardNavigationController = this.getController(\"keyboardNavigation\")\r\n                },\r\n                closeEditCell: function() {\r\n                    var keyboardNavigation = this._keyboardNavigationController;\r\n                    keyboardNavigation._fastEditingStarted = false;\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    keyboardNavigation._updateFocus();\r\n                    return result\r\n                },\r\n                _delayedInputFocus: function() {\r\n                    this._keyboardNavigationController._isNeedScroll = true;\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _isEditingStart: function() {\r\n                    var keyboardNavigation = this.getController(\"keyboardNavigation\");\r\n                    var cancel = this.callBase.apply(this, arguments);\r\n                    if (cancel && !keyboardNavigation._isNeedFocus) {\r\n                        var $cell = keyboardNavigation._getFocusedCell();\r\n                        keyboardNavigation._focus($cell, true)\r\n                    }\r\n                    return cancel\r\n                }\r\n            },\r\n            data: {\r\n                _correctRowIndices: function(getRowIndexCorrection) {\r\n                    var that = this;\r\n                    var keyboardNavigationController = that.getController(\"keyboardNavigation\");\r\n                    var editorFactory = that.getController(\"editorFactory\");\r\n                    var focusedCellPosition = keyboardNavigationController._focusedCellPosition;\r\n                    that.callBase.apply(that, arguments);\r\n                    if (focusedCellPosition && focusedCellPosition.rowIndex >= 0) {\r\n                        var focusedRowIndexCorrection = getRowIndexCorrection(focusedCellPosition.rowIndex);\r\n                        if (focusedRowIndexCorrection) {\r\n                            focusedCellPosition.rowIndex += focusedRowIndexCorrection;\r\n                            editorFactory.refocus()\r\n                        }\r\n                    }\r\n                },\r\n                getMaxRowIndex: function() {\r\n                    var result = this.items().length - 1;\r\n                    var virtualItemsCount = this.virtualItemsCount();\r\n                    if (virtualItemsCount) {\r\n                        result += virtualItemsCount.begin + virtualItemsCount.end\r\n                    }\r\n                    return result\r\n                }\r\n            },\r\n            adaptiveColumns: {\r\n                _showHiddenCellsInView: function(_ref) {\r\n                    var {\r\n                        viewName: viewName,\r\n                        $cells: $cells,\r\n                        isCommandColumn: isCommandColumn\r\n                    } = _ref;\r\n                    this.callBase.apply(this, arguments);\r\n                    viewName === COLUMN_HEADERS_VIEW && !isCommandColumn && $cells.each((_, cellElement) => {\r\n                        var $cell = $(cellElement);\r\n                        isCellInHeaderRow($cell) && $cell.attr(\"tabindex\", 0)\r\n                    })\r\n                },\r\n                _hideVisibleCellInView: function(_ref2) {\r\n                    var {\r\n                        viewName: viewName,\r\n                        $cell: $cell,\r\n                        isCommandColumn: isCommandColumn\r\n                    } = _ref2;\r\n                    this.callBase.apply(this, arguments);\r\n                    if (viewName === COLUMN_HEADERS_VIEW && !isCommandColumn && isCellInHeaderRow($cell)) {\r\n                        $cell.removeAttr(\"tabindex\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}