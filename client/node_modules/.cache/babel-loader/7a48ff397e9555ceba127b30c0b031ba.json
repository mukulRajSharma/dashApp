{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/pager/resizable_container.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"contentTemplate\", \"pagerProps\"];\nimport { createComponentVNode, normalizeProps } from \"inferno\";\nimport { InfernoEffect, InfernoComponent } from \"@devextreme/vdom\";\nimport resizeCallbacks from \"../../../core/utils/resize_callbacks\";\nimport { getElementWidth, getElementStyle } from \"./utils/get_element_width\";\nimport { isDefined } from \"../../../core/utils/type\";\nexport var viewFunction = _ref => {\n  var {\n    infoTextRef: infoTextRef,\n    infoTextVisible: infoTextVisible,\n    isLargeDisplayMode: isLargeDisplayMode,\n    pageSizesRef: pageSizesRef,\n    pagesRef: pagesRef,\n    parentRef: parentRef,\n    props: {\n      contentTemplate: Content,\n      pagerProps: pagerProps\n    },\n    restAttributes: restAttributes\n  } = _ref;\n  return Content(_extends({\n    rootElementRef: parentRef,\n    pageSizesRef: pageSizesRef,\n    infoTextRef: infoTextRef,\n    pagesRef: pagesRef,\n    infoTextVisible: infoTextVisible,\n    isLargeDisplayMode: isLargeDisplayMode\n  }, _extends({}, pagerProps, restAttributes)));\n};\nexport function calculateAdaptivityProps(_ref2) {\n  var {\n    info: infoWidth,\n    pageSizes: pageSizesWidth,\n    pages: pagesWidth,\n    parent: parentWidth\n  } = _ref2;\n  var minimalWidth = pageSizesWidth + pagesWidth + infoWidth;\n  var infoTextVisible = parentWidth - minimalWidth > 0;\n  var isLargeDisplayMode = parentWidth - (pageSizesWidth + pagesWidth) > 0;\n  return {\n    infoTextVisible: infoTextVisible,\n    isLargeDisplayMode: isLargeDisplayMode\n  };\n}\n\nfunction getElementsWidth(_ref3) {\n  var {\n    info: info,\n    pageSizes: pageSizes,\n    pages: pages,\n    parent: parent\n  } = _ref3;\n  var parentWidth = getElementWidth(parent);\n  var pageSizesWidth = getElementWidth(pageSizes);\n  var infoWidth = getElementWidth(info);\n  var pagesHtmlWidth = getElementWidth(pages);\n  return {\n    parent: parentWidth,\n    pageSizes: pageSizesWidth,\n    info: infoWidth + getElementStyle(\"marginLeft\", info) + getElementStyle(\"marginRight\", info),\n    pages: pagesHtmlWidth\n  };\n}\n\nexport var ResizableContainerProps = {};\nimport { createRef as infernoCreateRef } from \"inferno\";\n\nvar getTemplate = TemplateProp => TemplateProp && (TemplateProp.defaultProps ? props => normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props))) : TemplateProp);\n\nexport class ResizableContainer extends InfernoComponent {\n  constructor(props) {\n    super(props);\n    this._currentState = null;\n    this.parentRef = infernoCreateRef();\n    this.pageSizesRef = infernoCreateRef();\n    this.infoTextRef = infernoCreateRef();\n    this.pagesRef = infernoCreateRef();\n    this.state = {\n      infoTextVisible: true,\n      isLargeDisplayMode: true\n    };\n    this.subscribeToResize = this.subscribeToResize.bind(this);\n    this.effectUpdateChildProps = this.effectUpdateChildProps.bind(this);\n    this.updateAdaptivityProps = this.updateAdaptivityProps.bind(this);\n  }\n\n  createEffects() {\n    return [new InfernoEffect(this.subscribeToResize, [this.infoTextVisible, this.isLargeDisplayMode]), new InfernoEffect(this.effectUpdateChildProps, [this.infoTextVisible, this.isLargeDisplayMode, this.props.pagerProps, this.props.contentTemplate])];\n  }\n\n  updateEffects() {\n    var _this$_effects$, _this$_effects$2;\n\n    null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.infoTextVisible, this.isLargeDisplayMode]);\n    null === (_this$_effects$2 = this._effects[1]) || void 0 === _this$_effects$2 ? void 0 : _this$_effects$2.update([this.infoTextVisible, this.isLargeDisplayMode, this.props.pagerProps, this.props.contentTemplate]);\n  }\n\n  get infoTextVisible() {\n    var state = this._currentState || this.state;\n    return state.infoTextVisible;\n  }\n\n  set_infoTextVisible(value) {\n    this.setState(state => {\n      this._currentState = state;\n      var newValue = value();\n      this._currentState = null;\n      return {\n        infoTextVisible: newValue\n      };\n    });\n  }\n\n  get isLargeDisplayMode() {\n    var state = this._currentState || this.state;\n    return state.isLargeDisplayMode;\n  }\n\n  set_isLargeDisplayMode(value) {\n    this.setState(state => {\n      this._currentState = state;\n      var newValue = value();\n      this._currentState = null;\n      return {\n        isLargeDisplayMode: newValue\n      };\n    });\n  }\n\n  subscribeToResize() {\n    var callback = () => {\n      this.updateAdaptivityProps();\n    };\n\n    resizeCallbacks.add(callback);\n    return () => {\n      resizeCallbacks.remove(callback);\n    };\n  }\n\n  effectUpdateChildProps() {\n    var parentWidth = this.parentRef.current ? getElementWidth(this.parentRef.current) : 0;\n\n    if (parentWidth > 0) {\n      this.updateAdaptivityProps();\n    }\n  }\n\n  updateAdaptivityProps() {\n    var currentElementsWidth = getElementsWidth({\n      parent: this.parentRef.current,\n      pageSizes: this.pageSizesRef.current,\n      info: this.infoTextRef.current,\n      pages: this.pagesRef.current\n    });\n\n    if (isDefined(this.actualAdaptivityProps) && (this.actualAdaptivityProps.infoTextVisible !== this.infoTextVisible || this.actualAdaptivityProps.isLargeDisplayMode !== this.isLargeDisplayMode)) {\n      return;\n    }\n\n    var isEmpty = !isDefined(this.elementsWidth);\n\n    if (isEmpty) {\n      this.elementsWidth = {};\n    }\n\n    if (isEmpty || this.isLargeDisplayMode) {\n      this.elementsWidth.pageSizes = currentElementsWidth.pageSizes;\n      this.elementsWidth.pages = currentElementsWidth.pages;\n    }\n\n    if (isEmpty || this.infoTextVisible) {\n      this.elementsWidth.info = currentElementsWidth.info;\n    }\n\n    this.actualAdaptivityProps = calculateAdaptivityProps(_extends({\n      parent: currentElementsWidth.parent\n    }, this.elementsWidth));\n    this.set_infoTextVisible(() => this.actualAdaptivityProps.infoTextVisible);\n    this.set_isLargeDisplayMode(() => this.actualAdaptivityProps.isLargeDisplayMode);\n  }\n\n  get restAttributes() {\n    var _this$props = this.props,\n        restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    return restProps;\n  }\n\n  render() {\n    var props = this.props;\n    return viewFunction({\n      props: _extends({}, props, {\n        contentTemplate: getTemplate(props.contentTemplate)\n      }),\n      infoTextVisible: this.infoTextVisible,\n      isLargeDisplayMode: this.isLargeDisplayMode,\n      parentRef: this.parentRef,\n      pageSizesRef: this.pageSizesRef,\n      infoTextRef: this.infoTextRef,\n      pagesRef: this.pagesRef,\n      updateAdaptivityProps: this.updateAdaptivityProps,\n      restAttributes: this.restAttributes\n    });\n  }\n\n}\nResizableContainer.defaultProps = _extends({}, ResizableContainerProps);","map":{"version":3,"sources":["/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/node_modules/devextreme/esm/renovation/ui/pager/resizable_container.js"],"names":["_objectWithoutPropertiesLoose","_extends","_excluded","createComponentVNode","normalizeProps","InfernoEffect","InfernoComponent","resizeCallbacks","getElementWidth","getElementStyle","isDefined","viewFunction","_ref","infoTextRef","infoTextVisible","isLargeDisplayMode","pageSizesRef","pagesRef","parentRef","props","contentTemplate","Content","pagerProps","restAttributes","rootElementRef","calculateAdaptivityProps","_ref2","info","infoWidth","pageSizes","pageSizesWidth","pages","pagesWidth","parent","parentWidth","minimalWidth","getElementsWidth","_ref3","pagesHtmlWidth","ResizableContainerProps","createRef","infernoCreateRef","getTemplate","TemplateProp","defaultProps","ResizableContainer","constructor","_currentState","state","subscribeToResize","bind","effectUpdateChildProps","updateAdaptivityProps","createEffects","updateEffects","_this$_effects$","_this$_effects$2","_effects","update","set_infoTextVisible","value","setState","newValue","set_isLargeDisplayMode","callback","add","remove","current","currentElementsWidth","actualAdaptivityProps","isEmpty","elementsWidth","_this$props","restProps","render"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/renovation/ui/pager/resizable_container.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nvar _excluded = [\"contentTemplate\", \"pagerProps\"];\r\nimport {\r\n    createComponentVNode,\r\n    normalizeProps\r\n} from \"inferno\";\r\nimport {\r\n    InfernoEffect,\r\n    InfernoComponent\r\n} from \"@devextreme/vdom\";\r\nimport resizeCallbacks from \"../../../core/utils/resize_callbacks\";\r\nimport {\r\n    getElementWidth,\r\n    getElementStyle\r\n} from \"./utils/get_element_width\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nexport var viewFunction = _ref => {\r\n    var {\r\n        infoTextRef: infoTextRef,\r\n        infoTextVisible: infoTextVisible,\r\n        isLargeDisplayMode: isLargeDisplayMode,\r\n        pageSizesRef: pageSizesRef,\r\n        pagesRef: pagesRef,\r\n        parentRef: parentRef,\r\n        props: {\r\n            contentTemplate: Content,\r\n            pagerProps: pagerProps\r\n        },\r\n        restAttributes: restAttributes\r\n    } = _ref;\r\n    return Content(_extends({\r\n        rootElementRef: parentRef,\r\n        pageSizesRef: pageSizesRef,\r\n        infoTextRef: infoTextRef,\r\n        pagesRef: pagesRef,\r\n        infoTextVisible: infoTextVisible,\r\n        isLargeDisplayMode: isLargeDisplayMode\r\n    }, _extends({}, pagerProps, restAttributes)))\r\n};\r\nexport function calculateAdaptivityProps(_ref2) {\r\n    var {\r\n        info: infoWidth,\r\n        pageSizes: pageSizesWidth,\r\n        pages: pagesWidth,\r\n        parent: parentWidth\r\n    } = _ref2;\r\n    var minimalWidth = pageSizesWidth + pagesWidth + infoWidth;\r\n    var infoTextVisible = parentWidth - minimalWidth > 0;\r\n    var isLargeDisplayMode = parentWidth - (pageSizesWidth + pagesWidth) > 0;\r\n    return {\r\n        infoTextVisible: infoTextVisible,\r\n        isLargeDisplayMode: isLargeDisplayMode\r\n    }\r\n}\r\n\r\nfunction getElementsWidth(_ref3) {\r\n    var {\r\n        info: info,\r\n        pageSizes: pageSizes,\r\n        pages: pages,\r\n        parent: parent\r\n    } = _ref3;\r\n    var parentWidth = getElementWidth(parent);\r\n    var pageSizesWidth = getElementWidth(pageSizes);\r\n    var infoWidth = getElementWidth(info);\r\n    var pagesHtmlWidth = getElementWidth(pages);\r\n    return {\r\n        parent: parentWidth,\r\n        pageSizes: pageSizesWidth,\r\n        info: infoWidth + getElementStyle(\"marginLeft\", info) + getElementStyle(\"marginRight\", info),\r\n        pages: pagesHtmlWidth\r\n    }\r\n}\r\nexport var ResizableContainerProps = {};\r\nimport {\r\n    createRef as infernoCreateRef\r\n} from \"inferno\";\r\nvar getTemplate = TemplateProp => TemplateProp && (TemplateProp.defaultProps ? props => normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props))) : TemplateProp);\r\nexport class ResizableContainer extends InfernoComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this._currentState = null;\r\n        this.parentRef = infernoCreateRef();\r\n        this.pageSizesRef = infernoCreateRef();\r\n        this.infoTextRef = infernoCreateRef();\r\n        this.pagesRef = infernoCreateRef();\r\n        this.state = {\r\n            infoTextVisible: true,\r\n            isLargeDisplayMode: true\r\n        };\r\n        this.subscribeToResize = this.subscribeToResize.bind(this);\r\n        this.effectUpdateChildProps = this.effectUpdateChildProps.bind(this);\r\n        this.updateAdaptivityProps = this.updateAdaptivityProps.bind(this)\r\n    }\r\n    createEffects() {\r\n        return [new InfernoEffect(this.subscribeToResize, [this.infoTextVisible, this.isLargeDisplayMode]), new InfernoEffect(this.effectUpdateChildProps, [this.infoTextVisible, this.isLargeDisplayMode, this.props.pagerProps, this.props.contentTemplate])]\r\n    }\r\n    updateEffects() {\r\n        var _this$_effects$, _this$_effects$2;\r\n        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.infoTextVisible, this.isLargeDisplayMode]);\r\n        null === (_this$_effects$2 = this._effects[1]) || void 0 === _this$_effects$2 ? void 0 : _this$_effects$2.update([this.infoTextVisible, this.isLargeDisplayMode, this.props.pagerProps, this.props.contentTemplate])\r\n    }\r\n    get infoTextVisible() {\r\n        var state = this._currentState || this.state;\r\n        return state.infoTextVisible\r\n    }\r\n    set_infoTextVisible(value) {\r\n        this.setState(state => {\r\n            this._currentState = state;\r\n            var newValue = value();\r\n            this._currentState = null;\r\n            return {\r\n                infoTextVisible: newValue\r\n            }\r\n        })\r\n    }\r\n    get isLargeDisplayMode() {\r\n        var state = this._currentState || this.state;\r\n        return state.isLargeDisplayMode\r\n    }\r\n    set_isLargeDisplayMode(value) {\r\n        this.setState(state => {\r\n            this._currentState = state;\r\n            var newValue = value();\r\n            this._currentState = null;\r\n            return {\r\n                isLargeDisplayMode: newValue\r\n            }\r\n        })\r\n    }\r\n    subscribeToResize() {\r\n        var callback = () => {\r\n            this.updateAdaptivityProps()\r\n        };\r\n        resizeCallbacks.add(callback);\r\n        return () => {\r\n            resizeCallbacks.remove(callback)\r\n        }\r\n    }\r\n    effectUpdateChildProps() {\r\n        var parentWidth = this.parentRef.current ? getElementWidth(this.parentRef.current) : 0;\r\n        if (parentWidth > 0) {\r\n            this.updateAdaptivityProps()\r\n        }\r\n    }\r\n    updateAdaptivityProps() {\r\n        var currentElementsWidth = getElementsWidth({\r\n            parent: this.parentRef.current,\r\n            pageSizes: this.pageSizesRef.current,\r\n            info: this.infoTextRef.current,\r\n            pages: this.pagesRef.current\r\n        });\r\n        if (isDefined(this.actualAdaptivityProps) && (this.actualAdaptivityProps.infoTextVisible !== this.infoTextVisible || this.actualAdaptivityProps.isLargeDisplayMode !== this.isLargeDisplayMode)) {\r\n            return\r\n        }\r\n        var isEmpty = !isDefined(this.elementsWidth);\r\n        if (isEmpty) {\r\n            this.elementsWidth = {}\r\n        }\r\n        if (isEmpty || this.isLargeDisplayMode) {\r\n            this.elementsWidth.pageSizes = currentElementsWidth.pageSizes;\r\n            this.elementsWidth.pages = currentElementsWidth.pages\r\n        }\r\n        if (isEmpty || this.infoTextVisible) {\r\n            this.elementsWidth.info = currentElementsWidth.info\r\n        }\r\n        this.actualAdaptivityProps = calculateAdaptivityProps(_extends({\r\n            parent: currentElementsWidth.parent\r\n        }, this.elementsWidth));\r\n        this.set_infoTextVisible(() => this.actualAdaptivityProps.infoTextVisible);\r\n        this.set_isLargeDisplayMode(() => this.actualAdaptivityProps.isLargeDisplayMode)\r\n    }\r\n    get restAttributes() {\r\n        var _this$props = this.props,\r\n            restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\r\n        return restProps\r\n    }\r\n    render() {\r\n        var props = this.props;\r\n        return viewFunction({\r\n            props: _extends({}, props, {\r\n                contentTemplate: getTemplate(props.contentTemplate)\r\n            }),\r\n            infoTextVisible: this.infoTextVisible,\r\n            isLargeDisplayMode: this.isLargeDisplayMode,\r\n            parentRef: this.parentRef,\r\n            pageSizesRef: this.pageSizesRef,\r\n            infoTextRef: this.infoTextRef,\r\n            pagesRef: this.pagesRef,\r\n            updateAdaptivityProps: this.updateAdaptivityProps,\r\n            restAttributes: this.restAttributes\r\n        })\r\n    }\r\n}\r\nResizableContainer.defaultProps = _extends({}, ResizableContainerProps);\r\n"]},"metadata":{},"sourceType":"module"}