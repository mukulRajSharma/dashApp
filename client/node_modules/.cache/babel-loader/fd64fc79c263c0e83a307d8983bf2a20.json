{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.grid_view.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport modules from \"./ui.grid_core.modules\";\nimport { deferRender, deferUpdate } from \"../../core/utils/common\";\nimport { hasWindow, getWindow } from \"../../core/utils/window\";\nimport { each } from \"../../core/utils/iterator\";\nimport { isString, isDefined, isNumeric } from \"../../core/utils/type\";\nimport { getBoundingRect } from \"../../core/utils/position\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport messageLocalization from \"../../localization/message\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport browser from \"../../core/utils/browser\";\nimport * as accessibility from \"../shared/accessibility\";\nvar BORDERS_CLASS = \"borders\";\nvar TABLE_FIXED_CLASS = \"table-fixed\";\nvar IMPORTANT_MARGIN_CLASS = \"important-margin\";\nvar GRIDBASE_CONTAINER_CLASS = \"dx-gridbase-container\";\nvar HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\nvar VIEW_NAMES = [\"columnsSeparatorView\", \"blockSeparatorView\", \"trackerView\", \"headerPanel\", \"columnHeadersView\", \"rowsView\", \"footerView\", \"columnChooserView\", \"filterPanelView\", \"pagerView\", \"draggingHeaderView\", \"contextMenuView\", \"errorView\", \"headerFilterView\", \"filterBuilderView\"];\n\nvar isPercentWidth = function (width) {\n  return isString(width) && \"%\" === width.slice(-1);\n};\n\nvar isPixelWidth = function (width) {\n  return isString(width) && \"px\" === width.slice(-2);\n};\n\nvar getContainerHeight = function ($container) {\n  var clientHeight = $container.get(0).clientHeight;\n  var paddingTop = parseFloat($container.css(\"paddingTop\"));\n  var paddingBottom = parseFloat($container.css(\"paddingBottom\"));\n  return clientHeight - paddingTop - paddingBottom;\n};\n\nvar calculateFreeWidth = function (that, widths) {\n  var contentWidth = that._rowsView.contentWidth();\n\n  var totalWidth = that._getTotalWidth(widths, contentWidth);\n\n  return contentWidth - totalWidth;\n};\n\nvar calculateFreeWidthWithCurrentMinWidth = function (that, columnIndex, currentMinWidth, widths) {\n  return calculateFreeWidth(that, widths.map(function (width, index) {\n    return index === columnIndex ? currentMinWidth : width;\n  }));\n};\n\nvar restoreFocus = function (focusedElement, selectionRange) {\n  accessibility.hiddenFocus(focusedElement);\n  gridCoreUtils.setSelectionRange(focusedElement, selectionRange);\n};\n\nvar ResizingController = modules.ViewController.inherit({\n  _initPostRenderHandlers: function () {\n    var that = this;\n    var dataController = that._dataController;\n\n    if (!that._refreshSizesHandler) {\n      that._refreshSizesHandler = function (e) {\n        dataController.changed.remove(that._refreshSizesHandler);\n        var resizeDeferred;\n        var changeType = e && e.changeType;\n        var isDelayed = e && e.isDelayed;\n        var items = dataController.items();\n\n        if (!e || \"refresh\" === changeType || \"prepend\" === changeType || \"append\" === changeType) {\n          if (!isDelayed) {\n            resizeDeferred = that.resize();\n          }\n        } else if (\"update\" === changeType && e.changeTypes) {\n          if ((items.length > 1 || \"insert\" !== e.changeTypes[0]) && !(0 === items.length && \"remove\" === e.changeTypes[0]) && !e.needUpdateDimensions) {\n            deferUpdate(() => deferRender(() => deferUpdate(() => {\n              that._setScrollerSpacing(that._hasHeight);\n\n              that._rowsView.resize();\n            })));\n          } else {\n            resizeDeferred = that.resize();\n          }\n        }\n\n        if (changeType && \"updateSelection\" !== changeType && \"updateFocusedRow\" !== changeType && !isDelayed) {\n          when(resizeDeferred).done(function () {\n            that._setAriaRowColCount();\n\n            that.fireContentReadyAction();\n          });\n        }\n      };\n\n      that._dataController.changed.add(function () {\n        that._dataController.changed.add(that._refreshSizesHandler);\n      });\n    }\n  },\n  fireContentReadyAction: function () {\n    this.component._fireContentReadyAction();\n  },\n  _setAriaRowColCount: function () {\n    var component = this.component;\n    component.setAria({\n      rowCount: this._dataController.totalItemsCount(),\n      colCount: component.columnCount()\n    }, component.$element().children(\".\" + GRIDBASE_CONTAINER_CLASS));\n  },\n  _getBestFitWidths: function () {\n    var _widths;\n\n    var rowsView = this._rowsView;\n    var columnHeadersView = this._columnHeadersView;\n    var widths = rowsView.getColumnWidths();\n\n    if (!(null !== (_widths = widths) && void 0 !== _widths && _widths.length)) {\n      var _rowsView$getTableEle;\n\n      var headersTableElement = columnHeadersView.getTableElement();\n      columnHeadersView.setTableElement(null === (_rowsView$getTableEle = rowsView.getTableElement()) || void 0 === _rowsView$getTableEle ? void 0 : _rowsView$getTableEle.children(\".dx-header\"));\n      widths = columnHeadersView.getColumnWidths();\n      columnHeadersView.setTableElement(headersTableElement);\n    }\n\n    return widths;\n  },\n  _setVisibleWidths: function (visibleColumns, widths) {\n    var columnsController = this._columnsController;\n    columnsController.beginUpdate();\n    each(visibleColumns, function (index, column) {\n      var columnId = columnsController.getColumnId(column);\n      columnsController.columnOption(columnId, \"visibleWidth\", widths[index]);\n    });\n    columnsController.endUpdate();\n  },\n  _toggleBestFitModeForView: function (view, className, isBestFit) {\n    if (!view || !view.isVisible()) {\n      return;\n    }\n\n    var $rowsTables = this._rowsView.getTableElements();\n\n    var $viewTables = view.getTableElements();\n    each($rowsTables, (index, tableElement) => {\n      var $tableBody;\n      var $rowsTable = $(tableElement);\n      var $viewTable = $viewTables.eq(index);\n\n      if ($viewTable && $viewTable.length) {\n        if (isBestFit) {\n          $tableBody = $viewTable.children(\"tbody\").appendTo($rowsTable);\n        } else {\n          $tableBody = $rowsTable.children(\".\" + className).appendTo($viewTable);\n        }\n\n        $tableBody.toggleClass(className, isBestFit);\n        $tableBody.toggleClass(this.addWidgetPrefix(\"best-fit\"), isBestFit);\n      }\n    });\n  },\n  _toggleBestFitMode: function (isBestFit) {\n    var $rowsTable = this._rowsView.getTableElement();\n\n    var $rowsFixedTable = this._rowsView.getTableElements().eq(1);\n\n    if (!$rowsTable) {\n      return;\n    }\n\n    $rowsTable.css(\"tableLayout\", isBestFit ? \"auto\" : \"fixed\");\n    $rowsTable.children(\"colgroup\").css(\"display\", isBestFit ? \"none\" : \"\");\n    $rowsFixedTable.toggleClass(this.addWidgetPrefix(TABLE_FIXED_CLASS), !isBestFit);\n\n    this._toggleBestFitModeForView(this._columnHeadersView, \"dx-header\", isBestFit);\n\n    this._toggleBestFitModeForView(this._footerView, \"dx-footer\", isBestFit);\n\n    if (this._needStretch()) {\n      $rowsTable.get(0).style.width = isBestFit ? \"auto\" : \"\";\n    }\n\n    if (browser.msie && 11 === parseInt(browser.version)) {\n      $rowsTable.find(\".\" + this.addWidgetPrefix(TABLE_FIXED_CLASS)).each(function () {\n        this.style.width = isBestFit ? \"10px\" : \"\";\n      });\n    }\n  },\n  _synchronizeColumns: function () {\n    var columnsController = this._columnsController;\n    var visibleColumns = columnsController.getVisibleColumns();\n    var columnAutoWidth = this.option(\"columnAutoWidth\");\n\n    var needBestFit = this._needBestFit();\n\n    var hasMinWidth = false;\n    var resetBestFitMode;\n    var isColumnWidthsCorrected = false;\n    var resultWidths = [];\n    var focusedElement;\n    var selectionRange;\n    !needBestFit && each(visibleColumns, function (index, column) {\n      if (\"auto\" === column.width) {\n        needBestFit = true;\n        return false;\n      }\n    });\n    each(visibleColumns, function (index, column) {\n      if (column.minWidth) {\n        hasMinWidth = true;\n        return false;\n      }\n    });\n\n    this._setVisibleWidths(visibleColumns, []);\n\n    if (needBestFit) {\n      focusedElement = domAdapter.getActiveElement();\n      selectionRange = gridCoreUtils.getSelectionRange(focusedElement);\n\n      this._toggleBestFitMode(true);\n\n      resetBestFitMode = true;\n    }\n\n    var $element = this.component.$element();\n\n    if ($element && $element[0] && this._maxWidth) {\n      delete this._maxWidth;\n      $element[0].style.maxWidth = \"\";\n    }\n\n    deferUpdate(() => {\n      if (needBestFit) {\n        resultWidths = this._getBestFitWidths();\n        each(visibleColumns, function (index, column) {\n          var columnId = columnsController.getColumnId(column);\n          columnsController.columnOption(columnId, \"bestFitWidth\", resultWidths[index], true);\n        });\n      } else if (hasMinWidth) {\n        resultWidths = this._getBestFitWidths();\n      }\n\n      each(visibleColumns, function (index) {\n        var width = this.width;\n\n        if (\"auto\" !== width) {\n          if (isDefined(width)) {\n            resultWidths[index] = isNumeric(width) || isPixelWidth(width) ? parseFloat(width) : width;\n          } else if (!columnAutoWidth) {\n            resultWidths[index] = void 0;\n          }\n        }\n      });\n\n      if (resetBestFitMode) {\n        this._toggleBestFitMode(false);\n\n        resetBestFitMode = false;\n\n        if (focusedElement && focusedElement !== domAdapter.getActiveElement()) {\n          var isFocusOutsideWindow = getBoundingRect(focusedElement).bottom < 0;\n\n          if (!isFocusOutsideWindow) {\n            if (browser.msie) {\n              setTimeout(function () {\n                restoreFocus(focusedElement, selectionRange);\n              });\n            } else {\n              restoreFocus(focusedElement, selectionRange);\n            }\n          }\n        }\n      }\n\n      isColumnWidthsCorrected = this._correctColumnWidths(resultWidths, visibleColumns);\n\n      if (columnAutoWidth) {\n        !function () {\n          var expandColumnWidth;\n          each(visibleColumns, function (index, column) {\n            if (\"groupExpand\" === column.type) {\n              expandColumnWidth = resultWidths[index];\n            }\n          });\n          each(visibleColumns, function (index, column) {\n            if (\"groupExpand\" === column.type && expandColumnWidth) {\n              resultWidths[index] = expandColumnWidth;\n            }\n          });\n        }();\n\n        if (this._needStretch()) {\n          this._processStretch(resultWidths, visibleColumns);\n        }\n      }\n\n      deferRender(() => {\n        if (needBestFit || isColumnWidthsCorrected) {\n          this._setVisibleWidths(visibleColumns, resultWidths);\n        }\n      });\n    });\n  },\n  _needBestFit: function () {\n    return this.option(\"columnAutoWidth\");\n  },\n  _needStretch: function () {\n    return this._columnsController.getVisibleColumns().some(c => \"auto\" === c.width && !c.command);\n  },\n  _getAverageColumnsWidth: function (resultWidths) {\n    var freeWidth = calculateFreeWidth(this, resultWidths);\n    var columnCountWithoutWidth = resultWidths.filter(function (width) {\n      return void 0 === width;\n    }).length;\n    return freeWidth / columnCountWithoutWidth;\n  },\n  _correctColumnWidths: function (resultWidths, visibleColumns) {\n    var that = this;\n    var i;\n    var hasPercentWidth = false;\n    var hasAutoWidth = false;\n    var isColumnWidthsCorrected = false;\n    var $element = that.component.$element();\n    var hasWidth = that._hasWidth;\n\n    var _loop = function () {\n      var index = i;\n      var column = visibleColumns[index];\n      var isHiddenColumn = resultWidths[index] === HIDDEN_COLUMNS_WIDTH;\n      var width = resultWidths[index];\n      var minWidth = column.minWidth;\n\n      if (minWidth) {\n        if (void 0 === width) {\n          var averageColumnsWidth = that._getAverageColumnsWidth(resultWidths);\n\n          width = averageColumnsWidth;\n        } else if (isPercentWidth(width)) {\n          var freeWidth = calculateFreeWidthWithCurrentMinWidth(that, index, minWidth, resultWidths);\n\n          if (freeWidth < 0) {\n            width = -1;\n          }\n        }\n      }\n\n      var realColumnWidth = that._getRealColumnWidth(index, resultWidths.map(function (columnWidth, columnIndex) {\n        return index === columnIndex ? width : columnWidth;\n      }));\n\n      if (minWidth && !isHiddenColumn && realColumnWidth < minWidth) {\n        resultWidths[index] = minWidth;\n        isColumnWidthsCorrected = true;\n        i = -1;\n      }\n\n      if (!isDefined(column.width)) {\n        hasAutoWidth = true;\n      }\n\n      if (isPercentWidth(column.width)) {\n        hasPercentWidth = true;\n      }\n    };\n\n    for (i = 0; i < visibleColumns.length; i++) {\n      _loop();\n    }\n\n    if (!hasAutoWidth && resultWidths.length) {\n      var $rowsViewElement = that._rowsView.element();\n\n      var contentWidth = that._rowsView.contentWidth();\n\n      var scrollbarWidth = that._rowsView.getScrollbarWidth();\n\n      var totalWidth = that._getTotalWidth(resultWidths, contentWidth);\n\n      if (totalWidth < contentWidth) {\n        var lastColumnIndex = gridCoreUtils.getLastResizableColumnIndex(visibleColumns, resultWidths);\n\n        if (lastColumnIndex >= 0) {\n          resultWidths[lastColumnIndex] = \"auto\";\n          isColumnWidthsCorrected = true;\n\n          if (false === hasWidth && !hasPercentWidth) {\n            var borderWidth = that.option(\"showBorders\") ? Math.ceil($rowsViewElement.outerWidth() - $rowsViewElement.innerWidth()) : 0;\n            that._maxWidth = totalWidth + scrollbarWidth + borderWidth;\n            $element.css(\"maxWidth\", that._maxWidth);\n          }\n        }\n      }\n    }\n\n    return isColumnWidthsCorrected;\n  },\n  _processStretch: function (resultSizes, visibleColumns) {\n    var groupSize = this._rowsView.contentWidth();\n\n    var tableSize = this._getTotalWidth(resultSizes, groupSize);\n\n    var unusedIndexes = {\n      length: 0\n    };\n\n    if (!resultSizes.length) {\n      return;\n    }\n\n    each(visibleColumns, function (index) {\n      if (this.width || resultSizes[index] === HIDDEN_COLUMNS_WIDTH) {\n        unusedIndexes[index] = true;\n        unusedIndexes.length++;\n      }\n    });\n    var diff = groupSize - tableSize;\n    var diffElement = Math.floor(diff / (resultSizes.length - unusedIndexes.length));\n    var onePixelElementsCount = diff - diffElement * (resultSizes.length - unusedIndexes.length);\n\n    if (diff >= 0) {\n      for (var i = 0; i < resultSizes.length; i++) {\n        if (unusedIndexes[i]) {\n          continue;\n        }\n\n        resultSizes[i] += diffElement;\n\n        if (onePixelElementsCount > 0) {\n          if (onePixelElementsCount < 1) {\n            resultSizes[i] += onePixelElementsCount;\n            onePixelElementsCount = 0;\n          } else {\n            resultSizes[i]++;\n            onePixelElementsCount--;\n          }\n        }\n      }\n    }\n  },\n  _getRealColumnWidth: function (columnIndex, columnWidths, groupWidth) {\n    var ratio = 1;\n    var width = columnWidths[columnIndex];\n\n    if (!isPercentWidth(width)) {\n      return parseFloat(width);\n    }\n\n    var percentTotalWidth = columnWidths.reduce((sum, width, index) => {\n      if (!isPercentWidth(width)) {\n        return sum;\n      }\n\n      return sum + parseFloat(width);\n    }, 0);\n    var pixelTotalWidth = columnWidths.reduce((sum, width) => {\n      if (!width || width === HIDDEN_COLUMNS_WIDTH || isPercentWidth(width)) {\n        return sum;\n      }\n\n      return sum + parseFloat(width);\n    }, 0);\n    groupWidth = groupWidth || this._rowsView.contentWidth();\n    var freeSpace = groupWidth - pixelTotalWidth;\n    var percentTotalWidthInPixel = percentTotalWidth * groupWidth / 100;\n\n    if (pixelTotalWidth > 0 && percentTotalWidthInPixel + pixelTotalWidth >= groupWidth) {\n      ratio = percentTotalWidthInPixel > freeSpace ? freeSpace / percentTotalWidthInPixel : 1;\n    }\n\n    return parseFloat(width) * groupWidth * ratio / 100;\n  },\n  _getTotalWidth: function (widths, groupWidth) {\n    var result = 0;\n\n    for (var i = 0; i < widths.length; i++) {\n      var width = widths[i];\n\n      if (width && width !== HIDDEN_COLUMNS_WIDTH) {\n        result += this._getRealColumnWidth(i, widths, groupWidth);\n      }\n    }\n\n    return Math.ceil(result);\n  },\n  updateSize: function (rootElement) {\n    var $groupElement;\n    var width;\n    var $rootElement = $(rootElement);\n    var importantMarginClass = this.addWidgetPrefix(IMPORTANT_MARGIN_CLASS);\n\n    if (void 0 === this._hasHeight && $rootElement && $rootElement.is(\":visible\") && $rootElement.width()) {\n      $groupElement = $rootElement.children(\".\" + this.getWidgetContainerClass());\n\n      if ($groupElement.length) {\n        $groupElement.detach();\n      }\n\n      this._hasHeight = !!getContainerHeight($rootElement);\n      width = $rootElement.width();\n      $rootElement.addClass(importantMarginClass);\n      this._hasWidth = $rootElement.width() === width;\n      $rootElement.removeClass(importantMarginClass);\n\n      if ($groupElement.length) {\n        $groupElement.appendTo($rootElement);\n      }\n    }\n  },\n  publicMethods: function () {\n    return [\"resize\", \"updateDimensions\"];\n  },\n  resize: function () {\n    return !this.component._requireResize && this.updateDimensions();\n  },\n  updateDimensions: function (checkSize) {\n    var that = this;\n\n    that._initPostRenderHandlers();\n\n    if (!that._checkSize(checkSize)) {\n      return;\n    }\n\n    var prevResult = that._resizeDeferred;\n    var result = that._resizeDeferred = new Deferred();\n    when(prevResult).always(function () {\n      deferRender(function () {\n        if (that._dataController.isLoaded()) {\n          that._synchronizeColumns();\n        }\n\n        that._resetGroupElementHeight();\n\n        deferUpdate(function () {\n          deferRender(function () {\n            deferUpdate(function () {\n              that._updateDimensionsCore();\n            });\n          });\n        });\n      }).done(result.resolve).fail(result.reject);\n    });\n    return result.promise();\n  },\n  _resetGroupElementHeight: function () {\n    var groupElement = this.component.$element().children().get(0);\n\n    var scrollable = this._rowsView.getScrollable();\n\n    if (groupElement && groupElement.style.height && (!scrollable || !scrollable.scrollTop())) {\n      groupElement.style.height = \"\";\n    }\n  },\n  _checkSize: function (checkSize) {\n    var $rootElement = this.component.$element();\n\n    if (checkSize && (this._lastWidth === $rootElement.width() && this._lastHeight === $rootElement.height() && this._devicePixelRatio === getWindow().devicePixelRatio || !$rootElement.is(\":visible\"))) {\n      return false;\n    }\n\n    return true;\n  },\n  _setScrollerSpacingCore: function (hasHeight) {\n    var that = this;\n    var vScrollbarWidth = hasHeight ? that._rowsView.getScrollbarWidth() : 0;\n\n    var hScrollbarWidth = that._rowsView.getScrollbarWidth(true);\n\n    deferRender(function () {\n      that._columnHeadersView && that._columnHeadersView.setScrollerSpacing(vScrollbarWidth);\n      that._footerView && that._footerView.setScrollerSpacing(vScrollbarWidth);\n\n      that._rowsView.setScrollerSpacing(vScrollbarWidth, hScrollbarWidth);\n    });\n  },\n  _setScrollerSpacing: function (hasHeight) {\n    if (true === this.option(\"scrolling.useNative\")) {\n      deferRender(() => {\n        deferUpdate(() => {\n          this._setScrollerSpacingCore(hasHeight);\n        });\n      });\n    } else {\n      this._setScrollerSpacingCore(hasHeight);\n    }\n  },\n  _updateDimensionsCore: function () {\n    var that = this;\n    var dataController = that._dataController;\n    var rowsView = that._rowsView;\n    var $rootElement = that.component.$element();\n    var groupElement = $rootElement.children().get(0);\n    var rootElementHeight = $rootElement && ($rootElement.get(0).clientHeight || $rootElement.height());\n    var maxHeight = parseInt($rootElement.css(\"maxHeight\"));\n    var maxHeightHappened = maxHeight && rootElementHeight >= maxHeight;\n    var height = that.option(\"height\") || $rootElement.get(0).style.height;\n    var editorFactory = that.getController(\"editorFactory\");\n    var isMaxHeightApplied = maxHeightHappened && groupElement.scrollHeight === groupElement.offsetHeight;\n    var $testDiv;\n    that.updateSize($rootElement);\n    var hasHeight = that._hasHeight || maxHeightHappened;\n\n    if (height && that._hasHeight ^ \"auto\" !== height) {\n      $testDiv = $(\"<div>\").height(height).appendTo($rootElement);\n      that._hasHeight = !!$testDiv.height();\n      $testDiv.remove();\n    }\n\n    deferRender(function () {\n      rowsView.height(null, hasHeight);\n\n      if (maxHeightHappened && !isMaxHeightApplied) {\n        $(groupElement).css(\"height\", maxHeight);\n      }\n\n      if (!dataController.isLoaded()) {\n        rowsView.setLoading(dataController.isLoading());\n        return;\n      }\n\n      deferUpdate(function () {\n        that._updateLastSizes($rootElement);\n\n        that._setScrollerSpacing(hasHeight);\n\n        each(VIEW_NAMES, function (index, viewName) {\n          var view = that.getView(viewName);\n\n          if (view) {\n            view.resize();\n          }\n        });\n        editorFactory && editorFactory.resize();\n      });\n    });\n  },\n  _updateLastSizes: function ($rootElement) {\n    this._lastWidth = $rootElement.width();\n    this._lastHeight = $rootElement.height();\n    this._devicePixelRatio = getWindow().devicePixelRatio;\n  },\n  optionChanged: function (args) {\n    switch (args.name) {\n      case \"width\":\n      case \"height\":\n        this.component._renderDimensions();\n\n        this.resize();\n\n      case \"renderAsync\":\n        args.handled = true;\n        return;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  init: function () {\n    this._dataController = this.getController(\"data\");\n    this._columnsController = this.getController(\"columns\");\n    this._columnHeadersView = this.getView(\"columnHeadersView\");\n    this._footerView = this.getView(\"footerView\");\n    this._rowsView = this.getView(\"rowsView\");\n  }\n});\nvar SynchronizeScrollingController = modules.ViewController.inherit({\n  _scrollChangedHandler: function (views, pos, viewName) {\n    for (var j = 0; j < views.length; j++) {\n      if (views[j] && views[j].name !== viewName) {\n        views[j].scrollTo({\n          left: pos.left,\n          top: pos.top\n        });\n      }\n    }\n  },\n  init: function () {\n    var views = [this.getView(\"columnHeadersView\"), this.getView(\"footerView\"), this.getView(\"rowsView\")];\n\n    for (var i = 0; i < views.length; i++) {\n      var view = views[i];\n\n      if (view) {\n        view.scrollChanged.add(this._scrollChangedHandler.bind(this, views));\n      }\n    }\n  }\n});\nvar GridView = modules.View.inherit({\n  _endUpdateCore: function () {\n    if (this.component._requireResize) {\n      this.component._requireResize = false;\n\n      this._resizingController.resize();\n    }\n  },\n  _getWidgetAriaLabel: function () {\n    return \"dxDataGrid-ariaDataGrid\";\n  },\n  init: function () {\n    this._resizingController = this.getController(\"resizing\");\n    this._dataController = this.getController(\"data\");\n  },\n  getView: function (name) {\n    return this.component._views[name];\n  },\n  element: function () {\n    return this._groupElement;\n  },\n  optionChanged: function (args) {\n    if (isDefined(this._groupElement) && \"showBorders\" === args.name) {\n      this._groupElement.toggleClass(this.addWidgetPrefix(BORDERS_CLASS), !!args.value);\n\n      args.handled = true;\n    } else {\n      this.callBase(args);\n    }\n  },\n  _renderViews: function ($groupElement) {\n    var that = this;\n    each(VIEW_NAMES, function (index, viewName) {\n      var view = that.getView(viewName);\n\n      if (view) {\n        view.render($groupElement);\n      }\n    });\n  },\n  _getTableRoleName: function () {\n    return \"grid\";\n  },\n  render: function ($rootElement) {\n    var isFirstRender = !this._groupElement;\n    var $groupElement = this._groupElement || $(\"<div>\").addClass(this.getWidgetContainerClass());\n    $groupElement.addClass(GRIDBASE_CONTAINER_CLASS);\n    $groupElement.toggleClass(this.addWidgetPrefix(BORDERS_CLASS), !!this.option(\"showBorders\"));\n    this.setAria(\"role\", \"presentation\", $rootElement);\n    this.component.setAria({\n      role: this._getTableRoleName(),\n      label: messageLocalization.format(this._getWidgetAriaLabel())\n    }, $groupElement);\n    this._rootElement = $rootElement || this._rootElement;\n\n    if (isFirstRender) {\n      this._groupElement = $groupElement;\n      hasWindow() && this.getController(\"resizing\").updateSize($rootElement);\n      $groupElement.appendTo($rootElement);\n    }\n\n    this._renderViews($groupElement);\n  },\n  update: function () {\n    var $rootElement = this._rootElement;\n    var $groupElement = this._groupElement;\n    var resizingController = this.getController(\"resizing\");\n\n    if ($rootElement && $groupElement) {\n      resizingController.resize();\n\n      if (this._dataController.isLoaded()) {\n        this._resizingController.fireContentReadyAction();\n      }\n    }\n  }\n});\nexport var gridViewModule = {\n  defaultOptions: function () {\n    return {\n      showBorders: false,\n      renderAsync: false\n    };\n  },\n  controllers: {\n    resizing: ResizingController,\n    synchronizeScrolling: SynchronizeScrollingController\n  },\n  views: {\n    gridView: GridView\n  },\n  VIEW_NAMES: VIEW_NAMES\n};","map":{"version":3,"sources":["/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.grid_view.js"],"names":["$","modules","deferRender","deferUpdate","hasWindow","getWindow","each","isString","isDefined","isNumeric","getBoundingRect","gridCoreUtils","messageLocalization","when","Deferred","domAdapter","browser","accessibility","BORDERS_CLASS","TABLE_FIXED_CLASS","IMPORTANT_MARGIN_CLASS","GRIDBASE_CONTAINER_CLASS","HIDDEN_COLUMNS_WIDTH","VIEW_NAMES","isPercentWidth","width","slice","isPixelWidth","getContainerHeight","$container","clientHeight","get","paddingTop","parseFloat","css","paddingBottom","calculateFreeWidth","that","widths","contentWidth","_rowsView","totalWidth","_getTotalWidth","calculateFreeWidthWithCurrentMinWidth","columnIndex","currentMinWidth","map","index","restoreFocus","focusedElement","selectionRange","hiddenFocus","setSelectionRange","ResizingController","ViewController","inherit","_initPostRenderHandlers","dataController","_dataController","_refreshSizesHandler","e","changed","remove","resizeDeferred","changeType","isDelayed","items","resize","changeTypes","length","needUpdateDimensions","_setScrollerSpacing","_hasHeight","done","_setAriaRowColCount","fireContentReadyAction","add","component","_fireContentReadyAction","setAria","rowCount","totalItemsCount","colCount","columnCount","$element","children","_getBestFitWidths","_widths","rowsView","columnHeadersView","_columnHeadersView","getColumnWidths","_rowsView$getTableEle","headersTableElement","getTableElement","setTableElement","_setVisibleWidths","visibleColumns","columnsController","_columnsController","beginUpdate","column","columnId","getColumnId","columnOption","endUpdate","_toggleBestFitModeForView","view","className","isBestFit","isVisible","$rowsTables","getTableElements","$viewTables","tableElement","$tableBody","$rowsTable","$viewTable","eq","appendTo","toggleClass","addWidgetPrefix","_toggleBestFitMode","$rowsFixedTable","_footerView","_needStretch","style","msie","parseInt","version","find","_synchronizeColumns","getVisibleColumns","columnAutoWidth","option","needBestFit","_needBestFit","hasMinWidth","resetBestFitMode","isColumnWidthsCorrected","resultWidths","minWidth","getActiveElement","getSelectionRange","_maxWidth","maxWidth","isFocusOutsideWindow","bottom","setTimeout","_correctColumnWidths","expandColumnWidth","type","_processStretch","some","c","command","_getAverageColumnsWidth","freeWidth","columnCountWithoutWidth","filter","i","hasPercentWidth","hasAutoWidth","hasWidth","_hasWidth","_loop","isHiddenColumn","averageColumnsWidth","realColumnWidth","_getRealColumnWidth","columnWidth","$rowsViewElement","element","scrollbarWidth","getScrollbarWidth","lastColumnIndex","getLastResizableColumnIndex","borderWidth","Math","ceil","outerWidth","innerWidth","resultSizes","groupSize","tableSize","unusedIndexes","diff","diffElement","floor","onePixelElementsCount","columnWidths","groupWidth","ratio","percentTotalWidth","reduce","sum","pixelTotalWidth","freeSpace","percentTotalWidthInPixel","result","updateSize","rootElement","$groupElement","$rootElement","importantMarginClass","is","getWidgetContainerClass","detach","addClass","removeClass","publicMethods","_requireResize","updateDimensions","checkSize","_checkSize","prevResult","_resizeDeferred","always","isLoaded","_resetGroupElementHeight","_updateDimensionsCore","resolve","fail","reject","promise","groupElement","scrollable","getScrollable","height","scrollTop","_lastWidth","_lastHeight","_devicePixelRatio","devicePixelRatio","_setScrollerSpacingCore","hasHeight","vScrollbarWidth","hScrollbarWidth","setScrollerSpacing","rootElementHeight","maxHeight","maxHeightHappened","editorFactory","getController","isMaxHeightApplied","scrollHeight","offsetHeight","$testDiv","setLoading","isLoading","_updateLastSizes","viewName","getView","optionChanged","args","name","_renderDimensions","handled","callBase","init","SynchronizeScrollingController","_scrollChangedHandler","views","pos","j","scrollTo","left","top","scrollChanged","bind","GridView","View","_endUpdateCore","_resizingController","_getWidgetAriaLabel","_views","_groupElement","value","_renderViews","render","_getTableRoleName","isFirstRender","role","label","format","_rootElement","update","resizingController","gridViewModule","defaultOptions","showBorders","renderAsync","controllers","resizing","synchronizeScrolling","gridView"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.grid_view.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport {\r\n    deferRender,\r\n    deferUpdate\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    hasWindow,\r\n    getWindow\r\n} from \"../../core/utils/window\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    isString,\r\n    isDefined,\r\n    isNumeric\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../core/utils/position\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport domAdapter from \"../../core/dom_adapter\";\r\nimport browser from \"../../core/utils/browser\";\r\nimport * as accessibility from \"../shared/accessibility\";\r\nvar BORDERS_CLASS = \"borders\";\r\nvar TABLE_FIXED_CLASS = \"table-fixed\";\r\nvar IMPORTANT_MARGIN_CLASS = \"important-margin\";\r\nvar GRIDBASE_CONTAINER_CLASS = \"dx-gridbase-container\";\r\nvar HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\r\nvar VIEW_NAMES = [\"columnsSeparatorView\", \"blockSeparatorView\", \"trackerView\", \"headerPanel\", \"columnHeadersView\", \"rowsView\", \"footerView\", \"columnChooserView\", \"filterPanelView\", \"pagerView\", \"draggingHeaderView\", \"contextMenuView\", \"errorView\", \"headerFilterView\", \"filterBuilderView\"];\r\nvar isPercentWidth = function(width) {\r\n    return isString(width) && \"%\" === width.slice(-1)\r\n};\r\nvar isPixelWidth = function(width) {\r\n    return isString(width) && \"px\" === width.slice(-2)\r\n};\r\nvar getContainerHeight = function($container) {\r\n    var clientHeight = $container.get(0).clientHeight;\r\n    var paddingTop = parseFloat($container.css(\"paddingTop\"));\r\n    var paddingBottom = parseFloat($container.css(\"paddingBottom\"));\r\n    return clientHeight - paddingTop - paddingBottom\r\n};\r\nvar calculateFreeWidth = function(that, widths) {\r\n    var contentWidth = that._rowsView.contentWidth();\r\n    var totalWidth = that._getTotalWidth(widths, contentWidth);\r\n    return contentWidth - totalWidth\r\n};\r\nvar calculateFreeWidthWithCurrentMinWidth = function(that, columnIndex, currentMinWidth, widths) {\r\n    return calculateFreeWidth(that, widths.map((function(width, index) {\r\n        return index === columnIndex ? currentMinWidth : width\r\n    })))\r\n};\r\nvar restoreFocus = function(focusedElement, selectionRange) {\r\n    accessibility.hiddenFocus(focusedElement);\r\n    gridCoreUtils.setSelectionRange(focusedElement, selectionRange)\r\n};\r\nvar ResizingController = modules.ViewController.inherit({\r\n    _initPostRenderHandlers: function() {\r\n        var that = this;\r\n        var dataController = that._dataController;\r\n        if (!that._refreshSizesHandler) {\r\n            that._refreshSizesHandler = function(e) {\r\n                dataController.changed.remove(that._refreshSizesHandler);\r\n                var resizeDeferred;\r\n                var changeType = e && e.changeType;\r\n                var isDelayed = e && e.isDelayed;\r\n                var items = dataController.items();\r\n                if (!e || \"refresh\" === changeType || \"prepend\" === changeType || \"append\" === changeType) {\r\n                    if (!isDelayed) {\r\n                        resizeDeferred = that.resize()\r\n                    }\r\n                } else if (\"update\" === changeType && e.changeTypes) {\r\n                    if ((items.length > 1 || \"insert\" !== e.changeTypes[0]) && !(0 === items.length && \"remove\" === e.changeTypes[0]) && !e.needUpdateDimensions) {\r\n                        deferUpdate(() => deferRender(() => deferUpdate(() => {\r\n                            that._setScrollerSpacing(that._hasHeight);\r\n                            that._rowsView.resize()\r\n                        })))\r\n                    } else {\r\n                        resizeDeferred = that.resize()\r\n                    }\r\n                }\r\n                if (changeType && \"updateSelection\" !== changeType && \"updateFocusedRow\" !== changeType && !isDelayed) {\r\n                    when(resizeDeferred).done((function() {\r\n                        that._setAriaRowColCount();\r\n                        that.fireContentReadyAction()\r\n                    }))\r\n                }\r\n            };\r\n            that._dataController.changed.add((function() {\r\n                that._dataController.changed.add(that._refreshSizesHandler)\r\n            }))\r\n        }\r\n    },\r\n    fireContentReadyAction: function() {\r\n        this.component._fireContentReadyAction()\r\n    },\r\n    _setAriaRowColCount: function() {\r\n        var component = this.component;\r\n        component.setAria({\r\n            rowCount: this._dataController.totalItemsCount(),\r\n            colCount: component.columnCount()\r\n        }, component.$element().children(\".\" + GRIDBASE_CONTAINER_CLASS))\r\n    },\r\n    _getBestFitWidths: function() {\r\n        var _widths;\r\n        var rowsView = this._rowsView;\r\n        var columnHeadersView = this._columnHeadersView;\r\n        var widths = rowsView.getColumnWidths();\r\n        if (!(null !== (_widths = widths) && void 0 !== _widths && _widths.length)) {\r\n            var _rowsView$getTableEle;\r\n            var headersTableElement = columnHeadersView.getTableElement();\r\n            columnHeadersView.setTableElement(null === (_rowsView$getTableEle = rowsView.getTableElement()) || void 0 === _rowsView$getTableEle ? void 0 : _rowsView$getTableEle.children(\".dx-header\"));\r\n            widths = columnHeadersView.getColumnWidths();\r\n            columnHeadersView.setTableElement(headersTableElement)\r\n        }\r\n        return widths\r\n    },\r\n    _setVisibleWidths: function(visibleColumns, widths) {\r\n        var columnsController = this._columnsController;\r\n        columnsController.beginUpdate();\r\n        each(visibleColumns, (function(index, column) {\r\n            var columnId = columnsController.getColumnId(column);\r\n            columnsController.columnOption(columnId, \"visibleWidth\", widths[index])\r\n        }));\r\n        columnsController.endUpdate()\r\n    },\r\n    _toggleBestFitModeForView: function(view, className, isBestFit) {\r\n        if (!view || !view.isVisible()) {\r\n            return\r\n        }\r\n        var $rowsTables = this._rowsView.getTableElements();\r\n        var $viewTables = view.getTableElements();\r\n        each($rowsTables, (index, tableElement) => {\r\n            var $tableBody;\r\n            var $rowsTable = $(tableElement);\r\n            var $viewTable = $viewTables.eq(index);\r\n            if ($viewTable && $viewTable.length) {\r\n                if (isBestFit) {\r\n                    $tableBody = $viewTable.children(\"tbody\").appendTo($rowsTable)\r\n                } else {\r\n                    $tableBody = $rowsTable.children(\".\" + className).appendTo($viewTable)\r\n                }\r\n                $tableBody.toggleClass(className, isBestFit);\r\n                $tableBody.toggleClass(this.addWidgetPrefix(\"best-fit\"), isBestFit)\r\n            }\r\n        })\r\n    },\r\n    _toggleBestFitMode: function(isBestFit) {\r\n        var $rowsTable = this._rowsView.getTableElement();\r\n        var $rowsFixedTable = this._rowsView.getTableElements().eq(1);\r\n        if (!$rowsTable) {\r\n            return\r\n        }\r\n        $rowsTable.css(\"tableLayout\", isBestFit ? \"auto\" : \"fixed\");\r\n        $rowsTable.children(\"colgroup\").css(\"display\", isBestFit ? \"none\" : \"\");\r\n        $rowsFixedTable.toggleClass(this.addWidgetPrefix(TABLE_FIXED_CLASS), !isBestFit);\r\n        this._toggleBestFitModeForView(this._columnHeadersView, \"dx-header\", isBestFit);\r\n        this._toggleBestFitModeForView(this._footerView, \"dx-footer\", isBestFit);\r\n        if (this._needStretch()) {\r\n            $rowsTable.get(0).style.width = isBestFit ? \"auto\" : \"\"\r\n        }\r\n        if (browser.msie && 11 === parseInt(browser.version)) {\r\n            $rowsTable.find(\".\" + this.addWidgetPrefix(TABLE_FIXED_CLASS)).each((function() {\r\n                this.style.width = isBestFit ? \"10px\" : \"\"\r\n            }))\r\n        }\r\n    },\r\n    _synchronizeColumns: function() {\r\n        var columnsController = this._columnsController;\r\n        var visibleColumns = columnsController.getVisibleColumns();\r\n        var columnAutoWidth = this.option(\"columnAutoWidth\");\r\n        var needBestFit = this._needBestFit();\r\n        var hasMinWidth = false;\r\n        var resetBestFitMode;\r\n        var isColumnWidthsCorrected = false;\r\n        var resultWidths = [];\r\n        var focusedElement;\r\n        var selectionRange;\r\n        !needBestFit && each(visibleColumns, (function(index, column) {\r\n            if (\"auto\" === column.width) {\r\n                needBestFit = true;\r\n                return false\r\n            }\r\n        }));\r\n        each(visibleColumns, (function(index, column) {\r\n            if (column.minWidth) {\r\n                hasMinWidth = true;\r\n                return false\r\n            }\r\n        }));\r\n        this._setVisibleWidths(visibleColumns, []);\r\n        if (needBestFit) {\r\n            focusedElement = domAdapter.getActiveElement();\r\n            selectionRange = gridCoreUtils.getSelectionRange(focusedElement);\r\n            this._toggleBestFitMode(true);\r\n            resetBestFitMode = true\r\n        }\r\n        var $element = this.component.$element();\r\n        if ($element && $element[0] && this._maxWidth) {\r\n            delete this._maxWidth;\r\n            $element[0].style.maxWidth = \"\"\r\n        }\r\n        deferUpdate(() => {\r\n            if (needBestFit) {\r\n                resultWidths = this._getBestFitWidths();\r\n                each(visibleColumns, (function(index, column) {\r\n                    var columnId = columnsController.getColumnId(column);\r\n                    columnsController.columnOption(columnId, \"bestFitWidth\", resultWidths[index], true)\r\n                }))\r\n            } else if (hasMinWidth) {\r\n                resultWidths = this._getBestFitWidths()\r\n            }\r\n            each(visibleColumns, (function(index) {\r\n                var width = this.width;\r\n                if (\"auto\" !== width) {\r\n                    if (isDefined(width)) {\r\n                        resultWidths[index] = isNumeric(width) || isPixelWidth(width) ? parseFloat(width) : width\r\n                    } else if (!columnAutoWidth) {\r\n                        resultWidths[index] = void 0\r\n                    }\r\n                }\r\n            }));\r\n            if (resetBestFitMode) {\r\n                this._toggleBestFitMode(false);\r\n                resetBestFitMode = false;\r\n                if (focusedElement && focusedElement !== domAdapter.getActiveElement()) {\r\n                    var isFocusOutsideWindow = getBoundingRect(focusedElement).bottom < 0;\r\n                    if (!isFocusOutsideWindow) {\r\n                        if (browser.msie) {\r\n                            setTimeout((function() {\r\n                                restoreFocus(focusedElement, selectionRange)\r\n                            }))\r\n                        } else {\r\n                            restoreFocus(focusedElement, selectionRange)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            isColumnWidthsCorrected = this._correctColumnWidths(resultWidths, visibleColumns);\r\n            if (columnAutoWidth) {\r\n                ! function() {\r\n                    var expandColumnWidth;\r\n                    each(visibleColumns, (function(index, column) {\r\n                        if (\"groupExpand\" === column.type) {\r\n                            expandColumnWidth = resultWidths[index]\r\n                        }\r\n                    }));\r\n                    each(visibleColumns, (function(index, column) {\r\n                        if (\"groupExpand\" === column.type && expandColumnWidth) {\r\n                            resultWidths[index] = expandColumnWidth\r\n                        }\r\n                    }))\r\n                }();\r\n                if (this._needStretch()) {\r\n                    this._processStretch(resultWidths, visibleColumns)\r\n                }\r\n            }\r\n            deferRender(() => {\r\n                if (needBestFit || isColumnWidthsCorrected) {\r\n                    this._setVisibleWidths(visibleColumns, resultWidths)\r\n                }\r\n            })\r\n        })\r\n    },\r\n    _needBestFit: function() {\r\n        return this.option(\"columnAutoWidth\")\r\n    },\r\n    _needStretch: function() {\r\n        return this._columnsController.getVisibleColumns().some(c => \"auto\" === c.width && !c.command)\r\n    },\r\n    _getAverageColumnsWidth: function(resultWidths) {\r\n        var freeWidth = calculateFreeWidth(this, resultWidths);\r\n        var columnCountWithoutWidth = resultWidths.filter((function(width) {\r\n            return void 0 === width\r\n        })).length;\r\n        return freeWidth / columnCountWithoutWidth\r\n    },\r\n    _correctColumnWidths: function(resultWidths, visibleColumns) {\r\n        var that = this;\r\n        var i;\r\n        var hasPercentWidth = false;\r\n        var hasAutoWidth = false;\r\n        var isColumnWidthsCorrected = false;\r\n        var $element = that.component.$element();\r\n        var hasWidth = that._hasWidth;\r\n        var _loop = function() {\r\n            var index = i;\r\n            var column = visibleColumns[index];\r\n            var isHiddenColumn = resultWidths[index] === HIDDEN_COLUMNS_WIDTH;\r\n            var width = resultWidths[index];\r\n            var minWidth = column.minWidth;\r\n            if (minWidth) {\r\n                if (void 0 === width) {\r\n                    var averageColumnsWidth = that._getAverageColumnsWidth(resultWidths);\r\n                    width = averageColumnsWidth\r\n                } else if (isPercentWidth(width)) {\r\n                    var freeWidth = calculateFreeWidthWithCurrentMinWidth(that, index, minWidth, resultWidths);\r\n                    if (freeWidth < 0) {\r\n                        width = -1\r\n                    }\r\n                }\r\n            }\r\n            var realColumnWidth = that._getRealColumnWidth(index, resultWidths.map((function(columnWidth, columnIndex) {\r\n                return index === columnIndex ? width : columnWidth\r\n            })));\r\n            if (minWidth && !isHiddenColumn && realColumnWidth < minWidth) {\r\n                resultWidths[index] = minWidth;\r\n                isColumnWidthsCorrected = true;\r\n                i = -1\r\n            }\r\n            if (!isDefined(column.width)) {\r\n                hasAutoWidth = true\r\n            }\r\n            if (isPercentWidth(column.width)) {\r\n                hasPercentWidth = true\r\n            }\r\n        };\r\n        for (i = 0; i < visibleColumns.length; i++) {\r\n            _loop()\r\n        }\r\n        if (!hasAutoWidth && resultWidths.length) {\r\n            var $rowsViewElement = that._rowsView.element();\r\n            var contentWidth = that._rowsView.contentWidth();\r\n            var scrollbarWidth = that._rowsView.getScrollbarWidth();\r\n            var totalWidth = that._getTotalWidth(resultWidths, contentWidth);\r\n            if (totalWidth < contentWidth) {\r\n                var lastColumnIndex = gridCoreUtils.getLastResizableColumnIndex(visibleColumns, resultWidths);\r\n                if (lastColumnIndex >= 0) {\r\n                    resultWidths[lastColumnIndex] = \"auto\";\r\n                    isColumnWidthsCorrected = true;\r\n                    if (false === hasWidth && !hasPercentWidth) {\r\n                        var borderWidth = that.option(\"showBorders\") ? Math.ceil($rowsViewElement.outerWidth() - $rowsViewElement.innerWidth()) : 0;\r\n                        that._maxWidth = totalWidth + scrollbarWidth + borderWidth;\r\n                        $element.css(\"maxWidth\", that._maxWidth)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return isColumnWidthsCorrected\r\n    },\r\n    _processStretch: function(resultSizes, visibleColumns) {\r\n        var groupSize = this._rowsView.contentWidth();\r\n        var tableSize = this._getTotalWidth(resultSizes, groupSize);\r\n        var unusedIndexes = {\r\n            length: 0\r\n        };\r\n        if (!resultSizes.length) {\r\n            return\r\n        }\r\n        each(visibleColumns, (function(index) {\r\n            if (this.width || resultSizes[index] === HIDDEN_COLUMNS_WIDTH) {\r\n                unusedIndexes[index] = true;\r\n                unusedIndexes.length++\r\n            }\r\n        }));\r\n        var diff = groupSize - tableSize;\r\n        var diffElement = Math.floor(diff / (resultSizes.length - unusedIndexes.length));\r\n        var onePixelElementsCount = diff - diffElement * (resultSizes.length - unusedIndexes.length);\r\n        if (diff >= 0) {\r\n            for (var i = 0; i < resultSizes.length; i++) {\r\n                if (unusedIndexes[i]) {\r\n                    continue\r\n                }\r\n                resultSizes[i] += diffElement;\r\n                if (onePixelElementsCount > 0) {\r\n                    if (onePixelElementsCount < 1) {\r\n                        resultSizes[i] += onePixelElementsCount;\r\n                        onePixelElementsCount = 0\r\n                    } else {\r\n                        resultSizes[i]++;\r\n                        onePixelElementsCount--\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _getRealColumnWidth: function(columnIndex, columnWidths, groupWidth) {\r\n        var ratio = 1;\r\n        var width = columnWidths[columnIndex];\r\n        if (!isPercentWidth(width)) {\r\n            return parseFloat(width)\r\n        }\r\n        var percentTotalWidth = columnWidths.reduce((sum, width, index) => {\r\n            if (!isPercentWidth(width)) {\r\n                return sum\r\n            }\r\n            return sum + parseFloat(width)\r\n        }, 0);\r\n        var pixelTotalWidth = columnWidths.reduce((sum, width) => {\r\n            if (!width || width === HIDDEN_COLUMNS_WIDTH || isPercentWidth(width)) {\r\n                return sum\r\n            }\r\n            return sum + parseFloat(width)\r\n        }, 0);\r\n        groupWidth = groupWidth || this._rowsView.contentWidth();\r\n        var freeSpace = groupWidth - pixelTotalWidth;\r\n        var percentTotalWidthInPixel = percentTotalWidth * groupWidth / 100;\r\n        if (pixelTotalWidth > 0 && percentTotalWidthInPixel + pixelTotalWidth >= groupWidth) {\r\n            ratio = percentTotalWidthInPixel > freeSpace ? freeSpace / percentTotalWidthInPixel : 1\r\n        }\r\n        return parseFloat(width) * groupWidth * ratio / 100\r\n    },\r\n    _getTotalWidth: function(widths, groupWidth) {\r\n        var result = 0;\r\n        for (var i = 0; i < widths.length; i++) {\r\n            var width = widths[i];\r\n            if (width && width !== HIDDEN_COLUMNS_WIDTH) {\r\n                result += this._getRealColumnWidth(i, widths, groupWidth)\r\n            }\r\n        }\r\n        return Math.ceil(result)\r\n    },\r\n    updateSize: function(rootElement) {\r\n        var $groupElement;\r\n        var width;\r\n        var $rootElement = $(rootElement);\r\n        var importantMarginClass = this.addWidgetPrefix(IMPORTANT_MARGIN_CLASS);\r\n        if (void 0 === this._hasHeight && $rootElement && $rootElement.is(\":visible\") && $rootElement.width()) {\r\n            $groupElement = $rootElement.children(\".\" + this.getWidgetContainerClass());\r\n            if ($groupElement.length) {\r\n                $groupElement.detach()\r\n            }\r\n            this._hasHeight = !!getContainerHeight($rootElement);\r\n            width = $rootElement.width();\r\n            $rootElement.addClass(importantMarginClass);\r\n            this._hasWidth = $rootElement.width() === width;\r\n            $rootElement.removeClass(importantMarginClass);\r\n            if ($groupElement.length) {\r\n                $groupElement.appendTo($rootElement)\r\n            }\r\n        }\r\n    },\r\n    publicMethods: function() {\r\n        return [\"resize\", \"updateDimensions\"]\r\n    },\r\n    resize: function() {\r\n        return !this.component._requireResize && this.updateDimensions()\r\n    },\r\n    updateDimensions: function(checkSize) {\r\n        var that = this;\r\n        that._initPostRenderHandlers();\r\n        if (!that._checkSize(checkSize)) {\r\n            return\r\n        }\r\n        var prevResult = that._resizeDeferred;\r\n        var result = that._resizeDeferred = new Deferred;\r\n        when(prevResult).always((function() {\r\n            deferRender((function() {\r\n                if (that._dataController.isLoaded()) {\r\n                    that._synchronizeColumns()\r\n                }\r\n                that._resetGroupElementHeight();\r\n                deferUpdate((function() {\r\n                    deferRender((function() {\r\n                        deferUpdate((function() {\r\n                            that._updateDimensionsCore()\r\n                        }))\r\n                    }))\r\n                }))\r\n            })).done(result.resolve).fail(result.reject)\r\n        }));\r\n        return result.promise()\r\n    },\r\n    _resetGroupElementHeight: function() {\r\n        var groupElement = this.component.$element().children().get(0);\r\n        var scrollable = this._rowsView.getScrollable();\r\n        if (groupElement && groupElement.style.height && (!scrollable || !scrollable.scrollTop())) {\r\n            groupElement.style.height = \"\"\r\n        }\r\n    },\r\n    _checkSize: function(checkSize) {\r\n        var $rootElement = this.component.$element();\r\n        if (checkSize && (this._lastWidth === $rootElement.width() && this._lastHeight === $rootElement.height() && this._devicePixelRatio === getWindow().devicePixelRatio || !$rootElement.is(\":visible\"))) {\r\n            return false\r\n        }\r\n        return true\r\n    },\r\n    _setScrollerSpacingCore: function(hasHeight) {\r\n        var that = this;\r\n        var vScrollbarWidth = hasHeight ? that._rowsView.getScrollbarWidth() : 0;\r\n        var hScrollbarWidth = that._rowsView.getScrollbarWidth(true);\r\n        deferRender((function() {\r\n            that._columnHeadersView && that._columnHeadersView.setScrollerSpacing(vScrollbarWidth);\r\n            that._footerView && that._footerView.setScrollerSpacing(vScrollbarWidth);\r\n            that._rowsView.setScrollerSpacing(vScrollbarWidth, hScrollbarWidth)\r\n        }))\r\n    },\r\n    _setScrollerSpacing: function(hasHeight) {\r\n        if (true === this.option(\"scrolling.useNative\")) {\r\n            deferRender(() => {\r\n                deferUpdate(() => {\r\n                    this._setScrollerSpacingCore(hasHeight)\r\n                })\r\n            })\r\n        } else {\r\n            this._setScrollerSpacingCore(hasHeight)\r\n        }\r\n    },\r\n    _updateDimensionsCore: function() {\r\n        var that = this;\r\n        var dataController = that._dataController;\r\n        var rowsView = that._rowsView;\r\n        var $rootElement = that.component.$element();\r\n        var groupElement = $rootElement.children().get(0);\r\n        var rootElementHeight = $rootElement && ($rootElement.get(0).clientHeight || $rootElement.height());\r\n        var maxHeight = parseInt($rootElement.css(\"maxHeight\"));\r\n        var maxHeightHappened = maxHeight && rootElementHeight >= maxHeight;\r\n        var height = that.option(\"height\") || $rootElement.get(0).style.height;\r\n        var editorFactory = that.getController(\"editorFactory\");\r\n        var isMaxHeightApplied = maxHeightHappened && groupElement.scrollHeight === groupElement.offsetHeight;\r\n        var $testDiv;\r\n        that.updateSize($rootElement);\r\n        var hasHeight = that._hasHeight || maxHeightHappened;\r\n        if (height && that._hasHeight ^ \"auto\" !== height) {\r\n            $testDiv = $(\"<div>\").height(height).appendTo($rootElement);\r\n            that._hasHeight = !!$testDiv.height();\r\n            $testDiv.remove()\r\n        }\r\n        deferRender((function() {\r\n            rowsView.height(null, hasHeight);\r\n            if (maxHeightHappened && !isMaxHeightApplied) {\r\n                $(groupElement).css(\"height\", maxHeight)\r\n            }\r\n            if (!dataController.isLoaded()) {\r\n                rowsView.setLoading(dataController.isLoading());\r\n                return\r\n            }\r\n            deferUpdate((function() {\r\n                that._updateLastSizes($rootElement);\r\n                that._setScrollerSpacing(hasHeight);\r\n                each(VIEW_NAMES, (function(index, viewName) {\r\n                    var view = that.getView(viewName);\r\n                    if (view) {\r\n                        view.resize()\r\n                    }\r\n                }));\r\n                editorFactory && editorFactory.resize()\r\n            }))\r\n        }))\r\n    },\r\n    _updateLastSizes: function($rootElement) {\r\n        this._lastWidth = $rootElement.width();\r\n        this._lastHeight = $rootElement.height();\r\n        this._devicePixelRatio = getWindow().devicePixelRatio\r\n    },\r\n    optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"width\":\r\n            case \"height\":\r\n                this.component._renderDimensions();\r\n                this.resize();\r\n            case \"renderAsync\":\r\n                args.handled = true;\r\n                return;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    init: function() {\r\n        this._dataController = this.getController(\"data\");\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._columnHeadersView = this.getView(\"columnHeadersView\");\r\n        this._footerView = this.getView(\"footerView\");\r\n        this._rowsView = this.getView(\"rowsView\")\r\n    }\r\n});\r\nvar SynchronizeScrollingController = modules.ViewController.inherit({\r\n    _scrollChangedHandler: function(views, pos, viewName) {\r\n        for (var j = 0; j < views.length; j++) {\r\n            if (views[j] && views[j].name !== viewName) {\r\n                views[j].scrollTo({\r\n                    left: pos.left,\r\n                    top: pos.top\r\n                })\r\n            }\r\n        }\r\n    },\r\n    init: function() {\r\n        var views = [this.getView(\"columnHeadersView\"), this.getView(\"footerView\"), this.getView(\"rowsView\")];\r\n        for (var i = 0; i < views.length; i++) {\r\n            var view = views[i];\r\n            if (view) {\r\n                view.scrollChanged.add(this._scrollChangedHandler.bind(this, views))\r\n            }\r\n        }\r\n    }\r\n});\r\nvar GridView = modules.View.inherit({\r\n    _endUpdateCore: function() {\r\n        if (this.component._requireResize) {\r\n            this.component._requireResize = false;\r\n            this._resizingController.resize()\r\n        }\r\n    },\r\n    _getWidgetAriaLabel: function() {\r\n        return \"dxDataGrid-ariaDataGrid\"\r\n    },\r\n    init: function() {\r\n        this._resizingController = this.getController(\"resizing\");\r\n        this._dataController = this.getController(\"data\")\r\n    },\r\n    getView: function(name) {\r\n        return this.component._views[name]\r\n    },\r\n    element: function() {\r\n        return this._groupElement\r\n    },\r\n    optionChanged: function(args) {\r\n        if (isDefined(this._groupElement) && \"showBorders\" === args.name) {\r\n            this._groupElement.toggleClass(this.addWidgetPrefix(BORDERS_CLASS), !!args.value);\r\n            args.handled = true\r\n        } else {\r\n            this.callBase(args)\r\n        }\r\n    },\r\n    _renderViews: function($groupElement) {\r\n        var that = this;\r\n        each(VIEW_NAMES, (function(index, viewName) {\r\n            var view = that.getView(viewName);\r\n            if (view) {\r\n                view.render($groupElement)\r\n            }\r\n        }))\r\n    },\r\n    _getTableRoleName: function() {\r\n        return \"grid\"\r\n    },\r\n    render: function($rootElement) {\r\n        var isFirstRender = !this._groupElement;\r\n        var $groupElement = this._groupElement || $(\"<div>\").addClass(this.getWidgetContainerClass());\r\n        $groupElement.addClass(GRIDBASE_CONTAINER_CLASS);\r\n        $groupElement.toggleClass(this.addWidgetPrefix(BORDERS_CLASS), !!this.option(\"showBorders\"));\r\n        this.setAria(\"role\", \"presentation\", $rootElement);\r\n        this.component.setAria({\r\n            role: this._getTableRoleName(),\r\n            label: messageLocalization.format(this._getWidgetAriaLabel())\r\n        }, $groupElement);\r\n        this._rootElement = $rootElement || this._rootElement;\r\n        if (isFirstRender) {\r\n            this._groupElement = $groupElement;\r\n            hasWindow() && this.getController(\"resizing\").updateSize($rootElement);\r\n            $groupElement.appendTo($rootElement)\r\n        }\r\n        this._renderViews($groupElement)\r\n    },\r\n    update: function() {\r\n        var $rootElement = this._rootElement;\r\n        var $groupElement = this._groupElement;\r\n        var resizingController = this.getController(\"resizing\");\r\n        if ($rootElement && $groupElement) {\r\n            resizingController.resize();\r\n            if (this._dataController.isLoaded()) {\r\n                this._resizingController.fireContentReadyAction()\r\n            }\r\n        }\r\n    }\r\n});\r\nexport var gridViewModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            showBorders: false,\r\n            renderAsync: false\r\n        }\r\n    },\r\n    controllers: {\r\n        resizing: ResizingController,\r\n        synchronizeScrolling: SynchronizeScrollingController\r\n    },\r\n    views: {\r\n        gridView: GridView\r\n    },\r\n    VIEW_NAMES: VIEW_NAMES\r\n};\r\n"]},"metadata":{},"sourceType":"module"}