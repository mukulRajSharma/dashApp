{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/validator.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { data as elementData } from \"../core/element_data\";\nimport Callbacks from \"../core/utils/callbacks\";\nimport errors from \"./widget/ui.errors\";\nimport DOMComponent from \"../core/dom_component\";\nimport { extend } from \"../core/utils/extend\";\nimport { map } from \"../core/utils/iterator\";\nimport ValidationEngine from \"./validation_engine\";\nimport DefaultAdapter from \"./validation/default_adapter\";\nimport registerComponent from \"../core/component_registrator\";\nimport { Deferred } from \"../core/utils/deferred\";\nimport Guid from \"../core/guid\";\nvar VALIDATOR_CLASS = \"dx-validator\";\nvar VALIDATION_STATUS_VALID = \"valid\";\nvar VALIDATION_STATUS_INVALID = \"invalid\";\nvar VALIDATION_STATUS_PENDING = \"pending\";\nvar Validator = DOMComponent.inherit({\n  _initOptions: function (options) {\n    this.callBase.apply(this, arguments);\n    this.option(ValidationEngine.initValidationOptions(options));\n  },\n\n  _getDefaultOptions() {\n    return extend(this.callBase(), {\n      validationRules: []\n    });\n  },\n\n  _init() {\n    this.callBase();\n\n    this._initGroupRegistration();\n\n    this.focused = Callbacks();\n\n    this._initAdapter();\n\n    this._validationInfo = {\n      result: null,\n      deferred: null,\n      skipValidation: false\n    };\n  },\n\n  _initGroupRegistration() {\n    var group = this._findGroup();\n\n    if (!this._groupWasInit) {\n      this.on(\"disposing\", function (args) {\n        ValidationEngine.removeRegisteredValidator(args.component._validationGroup, args.component);\n      });\n    }\n\n    if (!this._groupWasInit || this._validationGroup !== group) {\n      ValidationEngine.removeRegisteredValidator(this._validationGroup, this);\n      this._groupWasInit = true;\n      this._validationGroup = group;\n      ValidationEngine.registerValidatorInGroup(group, this);\n    }\n  },\n\n  _setOptionsByReference() {\n    this.callBase();\n    extend(this._optionsByReference, {\n      validationGroup: true\n    });\n  },\n\n  _initAdapter() {\n    var element = this.$element()[0];\n    var dxStandardEditor = elementData(element, \"dx-validation-target\");\n    var adapter = this.option(\"adapter\");\n\n    if (!adapter) {\n      if (dxStandardEditor) {\n        adapter = new DefaultAdapter(dxStandardEditor, this);\n        adapter.validationRequestsCallbacks.push(args => {\n          if (this._validationInfo.skipValidation) {\n            return;\n          }\n\n          this.validate(args);\n        });\n        this.option(\"adapter\", adapter);\n        return;\n      }\n\n      throw errors.Error(\"E0120\");\n    }\n\n    var callbacks = adapter.validationRequestsCallbacks;\n\n    if (callbacks) {\n      callbacks.push(args => {\n        this.validate(args);\n      });\n    }\n  },\n\n  _toggleRTLDirection(isRtl) {\n    var _this$option$editor$o, _this$option, _this$option$editor;\n\n    var rtlEnabled = null !== (_this$option$editor$o = null === (_this$option = this.option(\"adapter\")) || void 0 === _this$option ? void 0 : null === (_this$option$editor = _this$option.editor) || void 0 === _this$option$editor ? void 0 : _this$option$editor.option(\"rtlEnabled\")) && void 0 !== _this$option$editor$o ? _this$option$editor$o : isRtl;\n    this.callBase(rtlEnabled);\n  },\n\n  _initMarkup() {\n    this.$element().addClass(VALIDATOR_CLASS);\n    this.callBase();\n  },\n\n  _visibilityChanged(visible) {\n    if (visible) {\n      this._initGroupRegistration();\n    }\n  },\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"validationGroup\":\n        this._initGroupRegistration();\n\n        return;\n\n      case \"validationRules\":\n        this._resetValidationRules();\n\n        void 0 !== this.option(\"isValid\") && this.validate();\n        return;\n\n      case \"adapter\":\n        this._initAdapter();\n\n        break;\n\n      case \"isValid\":\n      case \"validationStatus\":\n        this.option(ValidationEngine.synchronizeValidationOptions(args, this.option()));\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n\n  _getValidationRules() {\n    if (!this._validationRules) {\n      this._validationRules = map(this.option(\"validationRules\"), (rule, index) => extend({}, rule, {\n        validator: this,\n        index: index\n      }));\n    }\n\n    return this._validationRules;\n  },\n\n  _findGroup() {\n    var $element = this.$element();\n    return this.option(\"validationGroup\") || ValidationEngine.findGroup($element, this._modelByElement($element));\n  },\n\n  _resetValidationRules() {\n    delete this._validationRules;\n  },\n\n  validate(args) {\n    var adapter = this.option(\"adapter\");\n    var name = this.option(\"name\");\n    var bypass = adapter.bypass && adapter.bypass();\n    var value = args && void 0 !== args.value ? args.value : adapter.getValue();\n    var currentError = adapter.getCurrentValidationError && adapter.getCurrentValidationError();\n\n    var rules = this._getValidationRules();\n\n    var currentResult = this._validationInfo && this._validationInfo.result;\n\n    if (currentResult && currentResult.status === VALIDATION_STATUS_PENDING && currentResult.value === value) {\n      return extend({}, currentResult);\n    }\n\n    var result;\n\n    if (bypass) {\n      result = {\n        isValid: true,\n        status: VALIDATION_STATUS_VALID\n      };\n    } else if (currentError && currentError.editorSpecific) {\n      currentError.validator = this;\n      result = {\n        isValid: false,\n        status: VALIDATION_STATUS_INVALID,\n        brokenRule: currentError,\n        brokenRules: [currentError]\n      };\n    } else {\n      result = ValidationEngine.validate(value, rules, name);\n    }\n\n    result.id = new Guid().toString();\n\n    this._applyValidationResult(result, adapter);\n\n    result.complete && result.complete.then(res => {\n      if (res.id === this._validationInfo.result.id) {\n        this._applyValidationResult(res, adapter);\n      }\n    });\n    return extend({}, this._validationInfo.result);\n  },\n\n  reset() {\n    var adapter = this.option(\"adapter\");\n    var result = {\n      id: null,\n      isValid: true,\n      brokenRule: null,\n      brokenRules: null,\n      pendingRules: null,\n      status: VALIDATION_STATUS_VALID,\n      complete: null\n    };\n    this._validationInfo.skipValidation = true;\n    adapter.reset();\n    this._validationInfo.skipValidation = false;\n\n    this._resetValidationRules();\n\n    this._applyValidationResult(result, adapter);\n  },\n\n  _updateValidationResult(result) {\n    if (!this._validationInfo.result || this._validationInfo.result.id !== result.id) {\n      var complete = this._validationInfo.deferred && this._validationInfo.result.complete;\n      this._validationInfo.result = extend({}, result, {\n        complete: complete\n      });\n    } else {\n      for (var prop in result) {\n        if (\"id\" !== prop && \"complete\" !== prop) {\n          this._validationInfo.result[prop] = result[prop];\n        }\n      }\n    }\n  },\n\n  _applyValidationResult(result, adapter) {\n    var validatedAction = this._createActionByOption(\"onValidated\", {\n      excludeValidators: [\"readOnly\"]\n    });\n\n    result.validator = this;\n\n    this._updateValidationResult(result);\n\n    adapter.applyValidationResults && adapter.applyValidationResults(this._validationInfo.result);\n    this.option({\n      validationStatus: this._validationInfo.result.status\n    });\n\n    if (this._validationInfo.result.status === VALIDATION_STATUS_PENDING) {\n      if (!this._validationInfo.deferred) {\n        this._validationInfo.deferred = new Deferred();\n        this._validationInfo.result.complete = this._validationInfo.deferred.promise();\n      }\n\n      this._eventsStrategy.fireEvent(\"validating\", [this._validationInfo.result]);\n\n      return;\n    }\n\n    if (this._validationInfo.result.status !== VALIDATION_STATUS_PENDING) {\n      validatedAction(result);\n\n      if (this._validationInfo.deferred) {\n        this._validationInfo.deferred.resolve(result);\n\n        this._validationInfo.deferred = null;\n      }\n    }\n  },\n\n  focus() {\n    var adapter = this.option(\"adapter\");\n    adapter && adapter.focus && adapter.focus();\n  },\n\n  _useTemplates: function () {\n    return false;\n  }\n});\nregisterComponent(\"dxValidator\", Validator);\nexport default Validator;","map":{"version":3,"sources":["/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/node_modules/devextreme/esm/ui/validator.js"],"names":["data","elementData","Callbacks","errors","DOMComponent","extend","map","ValidationEngine","DefaultAdapter","registerComponent","Deferred","Guid","VALIDATOR_CLASS","VALIDATION_STATUS_VALID","VALIDATION_STATUS_INVALID","VALIDATION_STATUS_PENDING","Validator","inherit","_initOptions","options","callBase","apply","arguments","option","initValidationOptions","_getDefaultOptions","validationRules","_init","_initGroupRegistration","focused","_initAdapter","_validationInfo","result","deferred","skipValidation","group","_findGroup","_groupWasInit","on","args","removeRegisteredValidator","component","_validationGroup","registerValidatorInGroup","_setOptionsByReference","_optionsByReference","validationGroup","element","$element","dxStandardEditor","adapter","validationRequestsCallbacks","push","validate","Error","callbacks","_toggleRTLDirection","isRtl","_this$option$editor$o","_this$option","_this$option$editor","rtlEnabled","editor","_initMarkup","addClass","_visibilityChanged","visible","_optionChanged","name","_resetValidationRules","synchronizeValidationOptions","_getValidationRules","_validationRules","rule","index","validator","findGroup","_modelByElement","bypass","value","getValue","currentError","getCurrentValidationError","rules","currentResult","status","isValid","editorSpecific","brokenRule","brokenRules","id","toString","_applyValidationResult","complete","then","res","reset","pendingRules","_updateValidationResult","prop","validatedAction","_createActionByOption","excludeValidators","applyValidationResults","validationStatus","promise","_eventsStrategy","fireEvent","resolve","focus","_useTemplates"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,IAAI,IAAIC,WADZ,QAEO,sBAFP;AAGA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,SACIC,MADJ,QAEO,sBAFP;AAGA,SACIC,GADJ,QAEO,wBAFP;AAGA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,SACIC,QADJ,QAEO,wBAFP;AAGA,OAAOC,IAAP,MAAiB,cAAjB;AACA,IAAIC,eAAe,GAAG,cAAtB;AACA,IAAIC,uBAAuB,GAAG,OAA9B;AACA,IAAIC,yBAAyB,GAAG,SAAhC;AACA,IAAIC,yBAAyB,GAAG,SAAhC;AACA,IAAIC,SAAS,GAAGZ,YAAY,CAACa,OAAb,CAAqB;AACjCC,EAAAA,YAAY,EAAE,UAASC,OAAT,EAAkB;AAC5B,SAAKC,QAAL,CAAcC,KAAd,CAAoB,IAApB,EAA0BC,SAA1B;AACA,SAAKC,MAAL,CAAYhB,gBAAgB,CAACiB,qBAAjB,CAAuCL,OAAvC,CAAZ;AACH,GAJgC;;AAKjCM,EAAAA,kBAAkB,GAAG;AACjB,WAAOpB,MAAM,CAAC,KAAKe,QAAL,EAAD,EAAkB;AAC3BM,MAAAA,eAAe,EAAE;AADU,KAAlB,CAAb;AAGH,GATgC;;AAUjCC,EAAAA,KAAK,GAAG;AACJ,SAAKP,QAAL;;AACA,SAAKQ,sBAAL;;AACA,SAAKC,OAAL,GAAe3B,SAAS,EAAxB;;AACA,SAAK4B,YAAL;;AACA,SAAKC,eAAL,GAAuB;AACnBC,MAAAA,MAAM,EAAE,IADW;AAEnBC,MAAAA,QAAQ,EAAE,IAFS;AAGnBC,MAAAA,cAAc,EAAE;AAHG,KAAvB;AAKH,GApBgC;;AAqBjCN,EAAAA,sBAAsB,GAAG;AACrB,QAAIO,KAAK,GAAG,KAAKC,UAAL,EAAZ;;AACA,QAAI,CAAC,KAAKC,aAAV,EAAyB;AACrB,WAAKC,EAAL,CAAQ,WAAR,EAAsB,UAASC,IAAT,EAAe;AACjChC,QAAAA,gBAAgB,CAACiC,yBAAjB,CAA2CD,IAAI,CAACE,SAAL,CAAeC,gBAA1D,EAA4EH,IAAI,CAACE,SAAjF;AACH,OAFD;AAGH;;AACD,QAAI,CAAC,KAAKJ,aAAN,IAAuB,KAAKK,gBAAL,KAA0BP,KAArD,EAA4D;AACxD5B,MAAAA,gBAAgB,CAACiC,yBAAjB,CAA2C,KAAKE,gBAAhD,EAAkE,IAAlE;AACA,WAAKL,aAAL,GAAqB,IAArB;AACA,WAAKK,gBAAL,GAAwBP,KAAxB;AACA5B,MAAAA,gBAAgB,CAACoC,wBAAjB,CAA0CR,KAA1C,EAAiD,IAAjD;AACH;AACJ,GAlCgC;;AAmCjCS,EAAAA,sBAAsB,GAAG;AACrB,SAAKxB,QAAL;AACAf,IAAAA,MAAM,CAAC,KAAKwC,mBAAN,EAA2B;AAC7BC,MAAAA,eAAe,EAAE;AADY,KAA3B,CAAN;AAGH,GAxCgC;;AAyCjChB,EAAAA,YAAY,GAAG;AACX,QAAIiB,OAAO,GAAG,KAAKC,QAAL,GAAgB,CAAhB,CAAd;AACA,QAAIC,gBAAgB,GAAGhD,WAAW,CAAC8C,OAAD,EAAU,sBAAV,CAAlC;AACA,QAAIG,OAAO,GAAG,KAAK3B,MAAL,CAAY,SAAZ,CAAd;;AACA,QAAI,CAAC2B,OAAL,EAAc;AACV,UAAID,gBAAJ,EAAsB;AAClBC,QAAAA,OAAO,GAAG,IAAI1C,cAAJ,CAAmByC,gBAAnB,EAAqC,IAArC,CAAV;AACAC,QAAAA,OAAO,CAACC,2BAAR,CAAoCC,IAApC,CAAyCb,IAAI,IAAI;AAC7C,cAAI,KAAKR,eAAL,CAAqBG,cAAzB,EAAyC;AACrC;AACH;;AACD,eAAKmB,QAAL,CAAcd,IAAd;AACH,SALD;AAMA,aAAKhB,MAAL,CAAY,SAAZ,EAAuB2B,OAAvB;AACA;AACH;;AACD,YAAM/C,MAAM,CAACmD,KAAP,CAAa,OAAb,CAAN;AACH;;AACD,QAAIC,SAAS,GAAGL,OAAO,CAACC,2BAAxB;;AACA,QAAII,SAAJ,EAAe;AACXA,MAAAA,SAAS,CAACH,IAAV,CAAeb,IAAI,IAAI;AACnB,aAAKc,QAAL,CAAcd,IAAd;AACH,OAFD;AAGH;AACJ,GAjEgC;;AAkEjCiB,EAAAA,mBAAmB,CAACC,KAAD,EAAQ;AACvB,QAAIC,qBAAJ,EAA2BC,YAA3B,EAAyCC,mBAAzC;;AACA,QAAIC,UAAU,GAAG,UAAUH,qBAAqB,GAAG,UAAUC,YAAY,GAAG,KAAKpC,MAAL,CAAY,SAAZ,CAAzB,KAAoD,KAAK,CAAL,KAAWoC,YAA/D,GAA8E,KAAK,CAAnF,GAAuF,UAAUC,mBAAmB,GAAGD,YAAY,CAACG,MAA7C,KAAwD,KAAK,CAAL,KAAWF,mBAAnE,GAAyF,KAAK,CAA9F,GAAkGA,mBAAmB,CAACrC,MAApB,CAA2B,YAA3B,CAA3N,KAAwQ,KAAK,CAAL,KAAWmC,qBAAnR,GAA2SA,qBAA3S,GAAmUD,KAApV;AACA,SAAKrC,QAAL,CAAcyC,UAAd;AACH,GAtEgC;;AAuEjCE,EAAAA,WAAW,GAAG;AACV,SAAKf,QAAL,GAAgBgB,QAAhB,CAAyBpD,eAAzB;AACA,SAAKQ,QAAL;AACH,GA1EgC;;AA2EjC6C,EAAAA,kBAAkB,CAACC,OAAD,EAAU;AACxB,QAAIA,OAAJ,EAAa;AACT,WAAKtC,sBAAL;AACH;AACJ,GA/EgC;;AAgFjCuC,EAAAA,cAAc,CAAC5B,IAAD,EAAO;AACjB,YAAQA,IAAI,CAAC6B,IAAb;AACI,WAAK,iBAAL;AACI,aAAKxC,sBAAL;;AACA;;AACJ,WAAK,iBAAL;AACI,aAAKyC,qBAAL;;AACA,aAAK,CAAL,KAAW,KAAK9C,MAAL,CAAY,SAAZ,CAAX,IAAqC,KAAK8B,QAAL,EAArC;AACA;;AACJ,WAAK,SAAL;AACI,aAAKvB,YAAL;;AACA;;AACJ,WAAK,SAAL;AACA,WAAK,kBAAL;AACI,aAAKP,MAAL,CAAYhB,gBAAgB,CAAC+D,4BAAjB,CAA8C/B,IAA9C,EAAoD,KAAKhB,MAAL,EAApD,CAAZ;AACA;;AACJ;AACI,aAAKH,QAAL,CAAcmB,IAAd;AAhBR;AAkBH,GAnGgC;;AAoGjCgC,EAAAA,mBAAmB,GAAG;AAClB,QAAI,CAAC,KAAKC,gBAAV,EAA4B;AACxB,WAAKA,gBAAL,GAAwBlE,GAAG,CAAC,KAAKiB,MAAL,CAAY,iBAAZ,CAAD,EAAiC,CAACkD,IAAD,EAAOC,KAAP,KAAiBrE,MAAM,CAAC,EAAD,EAAKoE,IAAL,EAAW;AAC1FE,QAAAA,SAAS,EAAE,IAD+E;AAE1FD,QAAAA,KAAK,EAAEA;AAFmF,OAAX,CAAxD,CAA3B;AAIH;;AACD,WAAO,KAAKF,gBAAZ;AACH,GA5GgC;;AA6GjCpC,EAAAA,UAAU,GAAG;AACT,QAAIY,QAAQ,GAAG,KAAKA,QAAL,EAAf;AACA,WAAO,KAAKzB,MAAL,CAAY,iBAAZ,KAAkChB,gBAAgB,CAACqE,SAAjB,CAA2B5B,QAA3B,EAAqC,KAAK6B,eAAL,CAAqB7B,QAArB,CAArC,CAAzC;AACH,GAhHgC;;AAiHjCqB,EAAAA,qBAAqB,GAAG;AACpB,WAAO,KAAKG,gBAAZ;AACH,GAnHgC;;AAoHjCnB,EAAAA,QAAQ,CAACd,IAAD,EAAO;AACX,QAAIW,OAAO,GAAG,KAAK3B,MAAL,CAAY,SAAZ,CAAd;AACA,QAAI6C,IAAI,GAAG,KAAK7C,MAAL,CAAY,MAAZ,CAAX;AACA,QAAIuD,MAAM,GAAG5B,OAAO,CAAC4B,MAAR,IAAkB5B,OAAO,CAAC4B,MAAR,EAA/B;AACA,QAAIC,KAAK,GAAGxC,IAAI,IAAI,KAAK,CAAL,KAAWA,IAAI,CAACwC,KAAxB,GAAgCxC,IAAI,CAACwC,KAArC,GAA6C7B,OAAO,CAAC8B,QAAR,EAAzD;AACA,QAAIC,YAAY,GAAG/B,OAAO,CAACgC,yBAAR,IAAqChC,OAAO,CAACgC,yBAAR,EAAxD;;AACA,QAAIC,KAAK,GAAG,KAAKZ,mBAAL,EAAZ;;AACA,QAAIa,aAAa,GAAG,KAAKrD,eAAL,IAAwB,KAAKA,eAAL,CAAqBC,MAAjE;;AACA,QAAIoD,aAAa,IAAIA,aAAa,CAACC,MAAd,KAAyBtE,yBAA1C,IAAuEqE,aAAa,CAACL,KAAd,KAAwBA,KAAnG,EAA0G;AACtG,aAAO1E,MAAM,CAAC,EAAD,EAAK+E,aAAL,CAAb;AACH;;AACD,QAAIpD,MAAJ;;AACA,QAAI8C,MAAJ,EAAY;AACR9C,MAAAA,MAAM,GAAG;AACLsD,QAAAA,OAAO,EAAE,IADJ;AAELD,QAAAA,MAAM,EAAExE;AAFH,OAAT;AAIH,KALD,MAKO,IAAIoE,YAAY,IAAIA,YAAY,CAACM,cAAjC,EAAiD;AACpDN,MAAAA,YAAY,CAACN,SAAb,GAAyB,IAAzB;AACA3C,MAAAA,MAAM,GAAG;AACLsD,QAAAA,OAAO,EAAE,KADJ;AAELD,QAAAA,MAAM,EAAEvE,yBAFH;AAGL0E,QAAAA,UAAU,EAAEP,YAHP;AAILQ,QAAAA,WAAW,EAAE,CAACR,YAAD;AAJR,OAAT;AAMH,KARM,MAQA;AACHjD,MAAAA,MAAM,GAAGzB,gBAAgB,CAAC8C,QAAjB,CAA0B0B,KAA1B,EAAiCI,KAAjC,EAAwCf,IAAxC,CAAT;AACH;;AACDpC,IAAAA,MAAM,CAAC0D,EAAP,GAAa,IAAI/E,IAAJ,EAAD,CAAWgF,QAAX,EAAZ;;AACA,SAAKC,sBAAL,CAA4B5D,MAA5B,EAAoCkB,OAApC;;AACAlB,IAAAA,MAAM,CAAC6D,QAAP,IAAmB7D,MAAM,CAAC6D,QAAP,CAAgBC,IAAhB,CAAqBC,GAAG,IAAI;AAC3C,UAAIA,GAAG,CAACL,EAAJ,KAAW,KAAK3D,eAAL,CAAqBC,MAArB,CAA4B0D,EAA3C,EAA+C;AAC3C,aAAKE,sBAAL,CAA4BG,GAA5B,EAAiC7C,OAAjC;AACH;AACJ,KAJkB,CAAnB;AAKA,WAAO7C,MAAM,CAAC,EAAD,EAAK,KAAK0B,eAAL,CAAqBC,MAA1B,CAAb;AACH,GAxJgC;;AAyJjCgE,EAAAA,KAAK,GAAG;AACJ,QAAI9C,OAAO,GAAG,KAAK3B,MAAL,CAAY,SAAZ,CAAd;AACA,QAAIS,MAAM,GAAG;AACT0D,MAAAA,EAAE,EAAE,IADK;AAETJ,MAAAA,OAAO,EAAE,IAFA;AAGTE,MAAAA,UAAU,EAAE,IAHH;AAITC,MAAAA,WAAW,EAAE,IAJJ;AAKTQ,MAAAA,YAAY,EAAE,IALL;AAMTZ,MAAAA,MAAM,EAAExE,uBANC;AAOTgF,MAAAA,QAAQ,EAAE;AAPD,KAAb;AASA,SAAK9D,eAAL,CAAqBG,cAArB,GAAsC,IAAtC;AACAgB,IAAAA,OAAO,CAAC8C,KAAR;AACA,SAAKjE,eAAL,CAAqBG,cAArB,GAAsC,KAAtC;;AACA,SAAKmC,qBAAL;;AACA,SAAKuB,sBAAL,CAA4B5D,MAA5B,EAAoCkB,OAApC;AACH,GAzKgC;;AA0KjCgD,EAAAA,uBAAuB,CAAClE,MAAD,EAAS;AAC5B,QAAI,CAAC,KAAKD,eAAL,CAAqBC,MAAtB,IAAgC,KAAKD,eAAL,CAAqBC,MAArB,CAA4B0D,EAA5B,KAAmC1D,MAAM,CAAC0D,EAA9E,EAAkF;AAC9E,UAAIG,QAAQ,GAAG,KAAK9D,eAAL,CAAqBE,QAArB,IAAiC,KAAKF,eAAL,CAAqBC,MAArB,CAA4B6D,QAA5E;AACA,WAAK9D,eAAL,CAAqBC,MAArB,GAA8B3B,MAAM,CAAC,EAAD,EAAK2B,MAAL,EAAa;AAC7C6D,QAAAA,QAAQ,EAAEA;AADmC,OAAb,CAApC;AAGH,KALD,MAKO;AACH,WAAK,IAAIM,IAAT,IAAiBnE,MAAjB,EAAyB;AACrB,YAAI,SAASmE,IAAT,IAAiB,eAAeA,IAApC,EAA0C;AACtC,eAAKpE,eAAL,CAAqBC,MAArB,CAA4BmE,IAA5B,IAAoCnE,MAAM,CAACmE,IAAD,CAA1C;AACH;AACJ;AACJ;AACJ,GAvLgC;;AAwLjCP,EAAAA,sBAAsB,CAAC5D,MAAD,EAASkB,OAAT,EAAkB;AACpC,QAAIkD,eAAe,GAAG,KAAKC,qBAAL,CAA2B,aAA3B,EAA0C;AAC5DC,MAAAA,iBAAiB,EAAE,CAAC,UAAD;AADyC,KAA1C,CAAtB;;AAGAtE,IAAAA,MAAM,CAAC2C,SAAP,GAAmB,IAAnB;;AACA,SAAKuB,uBAAL,CAA6BlE,MAA7B;;AACAkB,IAAAA,OAAO,CAACqD,sBAAR,IAAkCrD,OAAO,CAACqD,sBAAR,CAA+B,KAAKxE,eAAL,CAAqBC,MAApD,CAAlC;AACA,SAAKT,MAAL,CAAY;AACRiF,MAAAA,gBAAgB,EAAE,KAAKzE,eAAL,CAAqBC,MAArB,CAA4BqD;AADtC,KAAZ;;AAGA,QAAI,KAAKtD,eAAL,CAAqBC,MAArB,CAA4BqD,MAA5B,KAAuCtE,yBAA3C,EAAsE;AAClE,UAAI,CAAC,KAAKgB,eAAL,CAAqBE,QAA1B,EAAoC;AAChC,aAAKF,eAAL,CAAqBE,QAArB,GAAgC,IAAIvB,QAAJ,EAAhC;AACA,aAAKqB,eAAL,CAAqBC,MAArB,CAA4B6D,QAA5B,GAAuC,KAAK9D,eAAL,CAAqBE,QAArB,CAA8BwE,OAA9B,EAAvC;AACH;;AACD,WAAKC,eAAL,CAAqBC,SAArB,CAA+B,YAA/B,EAA6C,CAAC,KAAK5E,eAAL,CAAqBC,MAAtB,CAA7C;;AACA;AACH;;AACD,QAAI,KAAKD,eAAL,CAAqBC,MAArB,CAA4BqD,MAA5B,KAAuCtE,yBAA3C,EAAsE;AAClEqF,MAAAA,eAAe,CAACpE,MAAD,CAAf;;AACA,UAAI,KAAKD,eAAL,CAAqBE,QAAzB,EAAmC;AAC/B,aAAKF,eAAL,CAAqBE,QAArB,CAA8B2E,OAA9B,CAAsC5E,MAAtC;;AACA,aAAKD,eAAL,CAAqBE,QAArB,GAAgC,IAAhC;AACH;AACJ;AACJ,GAjNgC;;AAkNjC4E,EAAAA,KAAK,GAAG;AACJ,QAAI3D,OAAO,GAAG,KAAK3B,MAAL,CAAY,SAAZ,CAAd;AACA2B,IAAAA,OAAO,IAAIA,OAAO,CAAC2D,KAAnB,IAA4B3D,OAAO,CAAC2D,KAAR,EAA5B;AACH,GArNgC;;AAsNjCC,EAAAA,aAAa,EAAE,YAAW;AACtB,WAAO,KAAP;AACH;AAxNgC,CAArB,CAAhB;AA0NArG,iBAAiB,CAAC,aAAD,EAAgBO,SAAhB,CAAjB;AACA,eAAeA,SAAf","sourcesContent":["/**\r\n * DevExtreme (esm/ui/validator.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    data as elementData\r\n} from \"../core/element_data\";\r\nimport Callbacks from \"../core/utils/callbacks\";\r\nimport errors from \"./widget/ui.errors\";\r\nimport DOMComponent from \"../core/dom_component\";\r\nimport {\r\n    extend\r\n} from \"../core/utils/extend\";\r\nimport {\r\n    map\r\n} from \"../core/utils/iterator\";\r\nimport ValidationEngine from \"./validation_engine\";\r\nimport DefaultAdapter from \"./validation/default_adapter\";\r\nimport registerComponent from \"../core/component_registrator\";\r\nimport {\r\n    Deferred\r\n} from \"../core/utils/deferred\";\r\nimport Guid from \"../core/guid\";\r\nvar VALIDATOR_CLASS = \"dx-validator\";\r\nvar VALIDATION_STATUS_VALID = \"valid\";\r\nvar VALIDATION_STATUS_INVALID = \"invalid\";\r\nvar VALIDATION_STATUS_PENDING = \"pending\";\r\nvar Validator = DOMComponent.inherit({\r\n    _initOptions: function(options) {\r\n        this.callBase.apply(this, arguments);\r\n        this.option(ValidationEngine.initValidationOptions(options))\r\n    },\r\n    _getDefaultOptions() {\r\n        return extend(this.callBase(), {\r\n            validationRules: []\r\n        })\r\n    },\r\n    _init() {\r\n        this.callBase();\r\n        this._initGroupRegistration();\r\n        this.focused = Callbacks();\r\n        this._initAdapter();\r\n        this._validationInfo = {\r\n            result: null,\r\n            deferred: null,\r\n            skipValidation: false\r\n        }\r\n    },\r\n    _initGroupRegistration() {\r\n        var group = this._findGroup();\r\n        if (!this._groupWasInit) {\r\n            this.on(\"disposing\", (function(args) {\r\n                ValidationEngine.removeRegisteredValidator(args.component._validationGroup, args.component)\r\n            }))\r\n        }\r\n        if (!this._groupWasInit || this._validationGroup !== group) {\r\n            ValidationEngine.removeRegisteredValidator(this._validationGroup, this);\r\n            this._groupWasInit = true;\r\n            this._validationGroup = group;\r\n            ValidationEngine.registerValidatorInGroup(group, this)\r\n        }\r\n    },\r\n    _setOptionsByReference() {\r\n        this.callBase();\r\n        extend(this._optionsByReference, {\r\n            validationGroup: true\r\n        })\r\n    },\r\n    _initAdapter() {\r\n        var element = this.$element()[0];\r\n        var dxStandardEditor = elementData(element, \"dx-validation-target\");\r\n        var adapter = this.option(\"adapter\");\r\n        if (!adapter) {\r\n            if (dxStandardEditor) {\r\n                adapter = new DefaultAdapter(dxStandardEditor, this);\r\n                adapter.validationRequestsCallbacks.push(args => {\r\n                    if (this._validationInfo.skipValidation) {\r\n                        return\r\n                    }\r\n                    this.validate(args)\r\n                });\r\n                this.option(\"adapter\", adapter);\r\n                return\r\n            }\r\n            throw errors.Error(\"E0120\")\r\n        }\r\n        var callbacks = adapter.validationRequestsCallbacks;\r\n        if (callbacks) {\r\n            callbacks.push(args => {\r\n                this.validate(args)\r\n            })\r\n        }\r\n    },\r\n    _toggleRTLDirection(isRtl) {\r\n        var _this$option$editor$o, _this$option, _this$option$editor;\r\n        var rtlEnabled = null !== (_this$option$editor$o = null === (_this$option = this.option(\"adapter\")) || void 0 === _this$option ? void 0 : null === (_this$option$editor = _this$option.editor) || void 0 === _this$option$editor ? void 0 : _this$option$editor.option(\"rtlEnabled\")) && void 0 !== _this$option$editor$o ? _this$option$editor$o : isRtl;\r\n        this.callBase(rtlEnabled)\r\n    },\r\n    _initMarkup() {\r\n        this.$element().addClass(VALIDATOR_CLASS);\r\n        this.callBase()\r\n    },\r\n    _visibilityChanged(visible) {\r\n        if (visible) {\r\n            this._initGroupRegistration()\r\n        }\r\n    },\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"validationGroup\":\r\n                this._initGroupRegistration();\r\n                return;\r\n            case \"validationRules\":\r\n                this._resetValidationRules();\r\n                void 0 !== this.option(\"isValid\") && this.validate();\r\n                return;\r\n            case \"adapter\":\r\n                this._initAdapter();\r\n                break;\r\n            case \"isValid\":\r\n            case \"validationStatus\":\r\n                this.option(ValidationEngine.synchronizeValidationOptions(args, this.option()));\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    _getValidationRules() {\r\n        if (!this._validationRules) {\r\n            this._validationRules = map(this.option(\"validationRules\"), (rule, index) => extend({}, rule, {\r\n                validator: this,\r\n                index: index\r\n            }))\r\n        }\r\n        return this._validationRules\r\n    },\r\n    _findGroup() {\r\n        var $element = this.$element();\r\n        return this.option(\"validationGroup\") || ValidationEngine.findGroup($element, this._modelByElement($element))\r\n    },\r\n    _resetValidationRules() {\r\n        delete this._validationRules\r\n    },\r\n    validate(args) {\r\n        var adapter = this.option(\"adapter\");\r\n        var name = this.option(\"name\");\r\n        var bypass = adapter.bypass && adapter.bypass();\r\n        var value = args && void 0 !== args.value ? args.value : adapter.getValue();\r\n        var currentError = adapter.getCurrentValidationError && adapter.getCurrentValidationError();\r\n        var rules = this._getValidationRules();\r\n        var currentResult = this._validationInfo && this._validationInfo.result;\r\n        if (currentResult && currentResult.status === VALIDATION_STATUS_PENDING && currentResult.value === value) {\r\n            return extend({}, currentResult)\r\n        }\r\n        var result;\r\n        if (bypass) {\r\n            result = {\r\n                isValid: true,\r\n                status: VALIDATION_STATUS_VALID\r\n            }\r\n        } else if (currentError && currentError.editorSpecific) {\r\n            currentError.validator = this;\r\n            result = {\r\n                isValid: false,\r\n                status: VALIDATION_STATUS_INVALID,\r\n                brokenRule: currentError,\r\n                brokenRules: [currentError]\r\n            }\r\n        } else {\r\n            result = ValidationEngine.validate(value, rules, name)\r\n        }\r\n        result.id = (new Guid).toString();\r\n        this._applyValidationResult(result, adapter);\r\n        result.complete && result.complete.then(res => {\r\n            if (res.id === this._validationInfo.result.id) {\r\n                this._applyValidationResult(res, adapter)\r\n            }\r\n        });\r\n        return extend({}, this._validationInfo.result)\r\n    },\r\n    reset() {\r\n        var adapter = this.option(\"adapter\");\r\n        var result = {\r\n            id: null,\r\n            isValid: true,\r\n            brokenRule: null,\r\n            brokenRules: null,\r\n            pendingRules: null,\r\n            status: VALIDATION_STATUS_VALID,\r\n            complete: null\r\n        };\r\n        this._validationInfo.skipValidation = true;\r\n        adapter.reset();\r\n        this._validationInfo.skipValidation = false;\r\n        this._resetValidationRules();\r\n        this._applyValidationResult(result, adapter)\r\n    },\r\n    _updateValidationResult(result) {\r\n        if (!this._validationInfo.result || this._validationInfo.result.id !== result.id) {\r\n            var complete = this._validationInfo.deferred && this._validationInfo.result.complete;\r\n            this._validationInfo.result = extend({}, result, {\r\n                complete: complete\r\n            })\r\n        } else {\r\n            for (var prop in result) {\r\n                if (\"id\" !== prop && \"complete\" !== prop) {\r\n                    this._validationInfo.result[prop] = result[prop]\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _applyValidationResult(result, adapter) {\r\n        var validatedAction = this._createActionByOption(\"onValidated\", {\r\n            excludeValidators: [\"readOnly\"]\r\n        });\r\n        result.validator = this;\r\n        this._updateValidationResult(result);\r\n        adapter.applyValidationResults && adapter.applyValidationResults(this._validationInfo.result);\r\n        this.option({\r\n            validationStatus: this._validationInfo.result.status\r\n        });\r\n        if (this._validationInfo.result.status === VALIDATION_STATUS_PENDING) {\r\n            if (!this._validationInfo.deferred) {\r\n                this._validationInfo.deferred = new Deferred;\r\n                this._validationInfo.result.complete = this._validationInfo.deferred.promise()\r\n            }\r\n            this._eventsStrategy.fireEvent(\"validating\", [this._validationInfo.result]);\r\n            return\r\n        }\r\n        if (this._validationInfo.result.status !== VALIDATION_STATUS_PENDING) {\r\n            validatedAction(result);\r\n            if (this._validationInfo.deferred) {\r\n                this._validationInfo.deferred.resolve(result);\r\n                this._validationInfo.deferred = null\r\n            }\r\n        }\r\n    },\r\n    focus() {\r\n        var adapter = this.option(\"adapter\");\r\n        adapter && adapter.focus && adapter.focus()\r\n    },\r\n    _useTemplates: function() {\r\n        return false\r\n    }\r\n});\r\nregisterComponent(\"dxValidator\", Validator);\r\nexport default Validator;\r\n"]},"metadata":{},"sourceType":"module"}