{"ast":null,"code":"import { Component, findDOMfromVNode } from 'inferno';\nimport { InfernoEffectHost } from './effect_host';\n\nconst areObjectsEqual = (firstObject, secondObject) => {\n  const bothAreObjects = firstObject instanceof Object && secondObject instanceof Object;\n\n  if (!bothAreObjects) {\n    return firstObject === secondObject;\n  }\n\n  const firstObjectKeys = Object.keys(firstObject);\n  const secondObjectKeys = Object.keys(secondObject);\n\n  if (firstObjectKeys.length !== secondObjectKeys.length) {\n    return false;\n  }\n\n  const hasDifferentElement = firstObjectKeys.some(key => firstObject[key] !== secondObject[key]);\n  return !hasDifferentElement;\n};\n\nexport class BaseInfernoComponent extends Component {\n  constructor() {\n    super(...arguments);\n    this._pendingContext = this.context;\n  }\n\n  componentWillReceiveProps(_, context) {\n    this._pendingContext = context !== null && context !== void 0 ? context : {};\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return !areObjectsEqual(this.props, nextProps) || !areObjectsEqual(this.state, nextState) || !areObjectsEqual(this.context, this._pendingContext);\n  }\n\n}\nexport class InfernoComponent extends BaseInfernoComponent {\n  constructor() {\n    super(...arguments);\n    this._effects = [];\n  }\n\n  createEffects() {\n    return [];\n  }\n\n  updateEffects() {}\n\n  componentWillMount() {\n    InfernoEffectHost.lock();\n  }\n\n  componentWillUpdate() {\n    InfernoEffectHost.lock();\n  }\n\n  componentDidMount() {\n    InfernoEffectHost.callbacks.push(() => {\n      this._effects = this.createEffects();\n    });\n    InfernoEffectHost.callEffects();\n  }\n\n  componentDidUpdate() {\n    InfernoEffectHost.callbacks.push(() => this.updateEffects());\n    InfernoEffectHost.callEffects();\n  }\n\n  destroyEffects() {\n    this._effects.forEach(e => e.dispose());\n  }\n\n  componentWillUnmount() {\n    this.destroyEffects();\n  }\n\n}\nexport class InfernoWrapperComponent extends InfernoComponent {\n  constructor() {\n    super(...arguments);\n    this.vDomElement = null;\n    this.vDomPreviousClasses = [];\n    this.vDomRemovedClasses = [];\n    this.vDomAddedClasses = [];\n  }\n\n  vDomUpdateClasses() {\n    var _a;\n\n    const currentClasses = ((_a = this.vDomElement) === null || _a === void 0 ? void 0 : _a.className.length) ? this.vDomElement.className.split(' ') : [];\n    const addedClasses = currentClasses.filter(className => this.vDomPreviousClasses.indexOf(className) < 0);\n    const removedClasses = this.vDomPreviousClasses.filter(className => currentClasses.indexOf(className) < 0);\n    addedClasses.forEach(value => {\n      const indexInRemoved = this.vDomRemovedClasses.indexOf(value);\n\n      if (indexInRemoved > -1) {\n        this.vDomRemovedClasses.splice(indexInRemoved, 1);\n      } else {\n        this.vDomAddedClasses.push(value);\n      }\n    });\n    removedClasses.forEach(value => {\n      const indexInAdded = this.vDomAddedClasses.indexOf(value);\n\n      if (indexInAdded > -1) {\n        this.vDomAddedClasses.splice(indexInAdded, 1);\n      } else {\n        this.vDomRemovedClasses.push(value);\n      }\n    });\n  }\n\n  componentDidMount() {\n    var _a;\n\n    super.componentDidMount();\n    this.vDomElement = findDOMfromVNode(this.$LI, true);\n    this.vDomPreviousClasses = ((_a = this.vDomElement) === null || _a === void 0 ? void 0 : _a.className.length) ? this.vDomElement.className.split(' ') : [];\n  }\n\n  componentDidUpdate() {\n    var _a;\n\n    super.componentDidUpdate();\n    const element = this.vDomElement;\n\n    if (element !== null) {\n      this.vDomAddedClasses.forEach(className => element.classList.add(className));\n      this.vDomRemovedClasses.forEach(className => element.classList.remove(className));\n      this.vDomPreviousClasses = ((_a = this.vDomElement) === null || _a === void 0 ? void 0 : _a.className.length) ? this.vDomElement.className.split(' ') : [];\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const shouldUpdate = super.shouldComponentUpdate(nextProps, nextState);\n\n    if (shouldUpdate) {\n      this.vDomUpdateClasses();\n    }\n\n    return shouldUpdate;\n  }\n\n}","map":{"version":3,"sources":["/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/node_modules/@devextreme/vdom/dist/esm/base_component.js"],"names":["Component","findDOMfromVNode","InfernoEffectHost","areObjectsEqual","firstObject","secondObject","bothAreObjects","Object","firstObjectKeys","keys","secondObjectKeys","length","hasDifferentElement","some","key","BaseInfernoComponent","constructor","arguments","_pendingContext","context","componentWillReceiveProps","_","shouldComponentUpdate","nextProps","nextState","props","state","InfernoComponent","_effects","createEffects","updateEffects","componentWillMount","lock","componentWillUpdate","componentDidMount","callbacks","push","callEffects","componentDidUpdate","destroyEffects","forEach","e","dispose","componentWillUnmount","InfernoWrapperComponent","vDomElement","vDomPreviousClasses","vDomRemovedClasses","vDomAddedClasses","vDomUpdateClasses","_a","currentClasses","className","split","addedClasses","filter","indexOf","removedClasses","value","indexInRemoved","splice","indexInAdded","$LI","element","classList","add","remove","shouldUpdate"],"mappings":"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","sourcesContent":["import { Component, findDOMfromVNode } from 'inferno';\nimport { InfernoEffectHost } from './effect_host';\nconst areObjectsEqual = (firstObject, secondObject) => {\n    const bothAreObjects = firstObject instanceof Object && secondObject instanceof Object;\n    if (!bothAreObjects) {\n        return firstObject === secondObject;\n    }\n    const firstObjectKeys = Object.keys(firstObject);\n    const secondObjectKeys = Object.keys(secondObject);\n    if (firstObjectKeys.length !== secondObjectKeys.length) {\n        return false;\n    }\n    const hasDifferentElement = firstObjectKeys.some((key) => firstObject[key] !== secondObject[key]);\n    return !hasDifferentElement;\n};\nexport class BaseInfernoComponent extends Component {\n    constructor() {\n        super(...arguments);\n        this._pendingContext = this.context;\n    }\n    componentWillReceiveProps(_, context) {\n        this._pendingContext = context !== null && context !== void 0 ? context : {};\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        return (!areObjectsEqual(this.props, nextProps)\n            || !areObjectsEqual(this.state, nextState)\n            || !areObjectsEqual(this.context, this._pendingContext));\n    }\n}\nexport class InfernoComponent extends BaseInfernoComponent {\n    constructor() {\n        super(...arguments);\n        this._effects = [];\n    }\n    createEffects() {\n        return [];\n    }\n    updateEffects() { }\n    componentWillMount() {\n        InfernoEffectHost.lock();\n    }\n    componentWillUpdate() {\n        InfernoEffectHost.lock();\n    }\n    componentDidMount() {\n        InfernoEffectHost.callbacks.push(() => { this._effects = this.createEffects(); });\n        InfernoEffectHost.callEffects();\n    }\n    componentDidUpdate() {\n        InfernoEffectHost.callbacks.push(() => this.updateEffects());\n        InfernoEffectHost.callEffects();\n    }\n    destroyEffects() {\n        this._effects.forEach((e) => e.dispose());\n    }\n    componentWillUnmount() {\n        this.destroyEffects();\n    }\n}\nexport class InfernoWrapperComponent extends InfernoComponent {\n    constructor() {\n        super(...arguments);\n        this.vDomElement = null;\n        this.vDomPreviousClasses = [];\n        this.vDomRemovedClasses = [];\n        this.vDomAddedClasses = [];\n    }\n    vDomUpdateClasses() {\n        var _a;\n        const currentClasses = ((_a = this.vDomElement) === null || _a === void 0 ? void 0 : _a.className.length) ? this.vDomElement.className.split(' ')\n            : [];\n        const addedClasses = currentClasses.filter((className) => this.vDomPreviousClasses.indexOf(className) < 0);\n        const removedClasses = this.vDomPreviousClasses.filter((className) => currentClasses.indexOf(className) < 0);\n        addedClasses.forEach((value) => {\n            const indexInRemoved = this.vDomRemovedClasses.indexOf(value);\n            if (indexInRemoved > -1) {\n                this.vDomRemovedClasses.splice(indexInRemoved, 1);\n            }\n            else {\n                this.vDomAddedClasses.push(value);\n            }\n        });\n        removedClasses.forEach((value) => {\n            const indexInAdded = this.vDomAddedClasses.indexOf(value);\n            if (indexInAdded > -1) {\n                this.vDomAddedClasses.splice(indexInAdded, 1);\n            }\n            else {\n                this.vDomRemovedClasses.push(value);\n            }\n        });\n    }\n    componentDidMount() {\n        var _a;\n        super.componentDidMount();\n        this.vDomElement = findDOMfromVNode(this.$LI, true);\n        this.vDomPreviousClasses = ((_a = this.vDomElement) === null || _a === void 0 ? void 0 : _a.className.length) ? this.vDomElement.className.split(' ')\n            : [];\n    }\n    componentDidUpdate() {\n        var _a;\n        super.componentDidUpdate();\n        const element = this.vDomElement;\n        if (element !== null) {\n            this.vDomAddedClasses.forEach((className) => element.classList.add(className));\n            this.vDomRemovedClasses.forEach((className) => element.classList.remove(className));\n            this.vDomPreviousClasses = ((_a = this.vDomElement) === null || _a === void 0 ? void 0 : _a.className.length) ? this.vDomElement.className.split(' ')\n                : [];\n        }\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        const shouldUpdate = super.shouldComponentUpdate(nextProps, nextState);\n        if (shouldUpdate) {\n            this.vDomUpdateClasses();\n        }\n        return shouldUpdate;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}