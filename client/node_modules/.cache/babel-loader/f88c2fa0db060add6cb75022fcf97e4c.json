{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.virtual_scrolling.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { getWindow } from \"../../core/utils/window\";\nimport { VirtualScrollController, subscribeToExternalScrollers } from \"./ui.grid_core.virtual_scrolling_core\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { each } from \"../../core/utils/iterator\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport LoadIndicator from \"../load_indicator\";\nimport browser from \"../../core/utils/browser\";\nimport { getBoundingRect } from \"../../core/utils/position\";\nimport { isDefined } from \"../../core/utils/type\";\nvar TABLE_CLASS = \"table\";\nvar BOTTOM_LOAD_PANEL_CLASS = \"bottom-load-panel\";\nvar TABLE_CONTENT_CLASS = \"table-content\";\nvar GROUP_SPACE_CLASS = \"group-space\";\nvar CONTENT_CLASS = \"content\";\nvar ROW_CLASS = \"dx-row\";\nvar FREESPACE_CLASS = \"dx-freespace-row\";\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\nvar VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\nvar SCROLLING_MODE_INFINITE = \"infinite\";\nvar SCROLLING_MODE_VIRTUAL = \"virtual\";\nvar SCROLLING_MODE_STANDARD = \"standard\";\nvar PIXELS_LIMIT = 25e4;\nvar LOAD_TIMEOUT = 300;\nvar NEW_SCROLLING_MODE = \"scrolling.newMode\";\n\nvar isVirtualMode = function (that) {\n  return that.option(\"scrolling.mode\") === SCROLLING_MODE_VIRTUAL;\n};\n\nvar isAppendMode = function (that) {\n  return that.option(\"scrolling.mode\") === SCROLLING_MODE_INFINITE;\n};\n\nvar isVirtualRowRendering = function (that) {\n  var rowRenderingMode = that.option(\"scrolling.rowRenderingMode\");\n\n  if (rowRenderingMode === SCROLLING_MODE_VIRTUAL) {\n    return true;\n  } else if (rowRenderingMode === SCROLLING_MODE_STANDARD) {\n    return false;\n  }\n};\n\nvar _correctCount = function (items, count, fromEnd, isItemCountableFunc) {\n  for (var i = 0; i < count + 1; i++) {\n    var item = items[fromEnd ? items.length - 1 - i : i];\n\n    if (item && !isItemCountableFunc(item, i === count, fromEnd)) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\nvar isItemCountableByDataSource = function (item, dataSource) {\n  return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && dataSource.isGroupItemCountable(item.data);\n};\n\nvar updateItemIndices = function (items) {\n  items.forEach(function (item, index) {\n    item.rowIndex = index;\n  });\n  return items;\n};\n\nvar VirtualScrollingDataSourceAdapterExtender = function () {\n  var _updateLoading = function (that) {\n    var beginPageIndex = that._virtualScrollController.beginPageIndex(-1);\n\n    if (isVirtualMode(that)) {\n      if (beginPageIndex < 0 || that.viewportSize() >= 0 && that.getViewportItemIndex() >= 0 && (beginPageIndex * that.pageSize() > that.getViewportItemIndex() || beginPageIndex * that.pageSize() + that.itemsCount() < that.getViewportItemIndex() + that.viewportSize()) && that._dataSource.isLoading()) {\n        if (!that._isLoading) {\n          that._isLoading = true;\n          that.loadingChanged.fire(true);\n        }\n      } else if (that._isLoading) {\n        that._isLoading = false;\n        that.loadingChanged.fire(false);\n      }\n    }\n  };\n\n  var result = {\n    init: function () {\n      this.callBase.apply(this, arguments);\n      this._items = [];\n      this._isLoaded = true;\n      this._loadPageCount = 1;\n      this._virtualScrollController = new VirtualScrollController(this.component, this._getVirtualScrollDataOptions());\n    },\n    _getVirtualScrollDataOptions: function () {\n      var that = this;\n      return {\n        pageSize: function () {\n          return that.pageSize();\n        },\n        totalItemsCount: function () {\n          return that.totalItemsCount();\n        },\n        hasKnownLastPage: function () {\n          return that.hasKnownLastPage();\n        },\n        pageIndex: function (index) {\n          return that._dataSource.pageIndex(index);\n        },\n        isLoading: function () {\n          return that._dataSource.isLoading() && !that.isCustomLoading();\n        },\n        pageCount: function () {\n          return that.pageCount();\n        },\n        load: function () {\n          return that._dataSource.load();\n        },\n        updateLoading: function () {\n          _updateLoading(that);\n        },\n        itemsCount: function () {\n          return that.itemsCount(true);\n        },\n        items: function () {\n          return that._dataSource.items();\n        },\n        viewportItems: function (items) {\n          if (items) {\n            that._items = items;\n          }\n\n          return that._items;\n        },\n        onChanged: function (e) {\n          that.changed.fire(e);\n        },\n        changingDuration: function (e) {\n          if (that.isLoading()) {\n            return LOAD_TIMEOUT;\n          }\n\n          return that._renderTime || 0;\n        }\n      };\n    },\n    _handleLoadingChanged: function (isLoading) {\n      if (this.option(NEW_SCROLLING_MODE)) {\n        this.callBase.apply(this, arguments);\n        return;\n      }\n\n      if (!isVirtualMode(this) || this._isLoadingAll) {\n        this._isLoading = isLoading;\n        this.callBase.apply(this, arguments);\n      }\n\n      if (isLoading) {\n        this._startLoadTime = new Date();\n      } else {\n        this._startLoadTime = void 0;\n      }\n    },\n    _handleLoadError: function () {\n      if (!this.option(NEW_SCROLLING_MODE)) {\n        this._isLoading = false;\n        this.loadingChanged.fire(false);\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    _handleDataChanged: function (e) {\n      if (this.option(NEW_SCROLLING_MODE)) {\n        this.callBase.apply(this, arguments);\n        return;\n      }\n\n      var callBase = this.callBase.bind(this);\n\n      this._virtualScrollController.handleDataChanged(callBase, e);\n    },\n    _customizeRemoteOperations: function (options, operationTypes) {\n      var newMode = this.option(NEW_SCROLLING_MODE);\n\n      if ((isVirtualMode(this) || isAppendMode(this) && newMode) && !operationTypes.reload && (operationTypes.skip || newMode) && this._renderTime < this.option(\"scrolling.renderingThreshold\")) {\n        options.delay = void 0;\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    items: function () {\n      if (this.option(NEW_SCROLLING_MODE)) {\n        return this._dataSource.items();\n      }\n\n      return this._items;\n    },\n    itemsCount: function (isBase) {\n      if (isBase) {\n        return this.callBase();\n      }\n\n      return this._virtualScrollController.itemsCount();\n    },\n    load: function (loadOptions) {\n      if (this.option(NEW_SCROLLING_MODE) || loadOptions) {\n        return this.callBase(loadOptions);\n      }\n\n      return this._virtualScrollController.load();\n    },\n    isLoading: function () {\n      return this._isLoading;\n    },\n    isLoaded: function () {\n      return this._dataSource.isLoaded() && this._isLoaded;\n    },\n    resetPagesCache: function (isLiveUpdate) {\n      if (!isLiveUpdate) {\n        this._virtualScrollController.reset(true);\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    _changeRowExpandCore: function () {\n      var result = this.callBase.apply(this, arguments);\n\n      if (this.option(NEW_SCROLLING_MODE)) {\n        return result;\n      }\n\n      this.resetPagesCache();\n\n      _updateLoading(this);\n\n      return result;\n    },\n    reload: function () {\n      this._dataSource.pageIndex(this.pageIndex());\n\n      var virtualScrollController = this._virtualScrollController;\n\n      if (!this.option(NEW_SCROLLING_MODE) && virtualScrollController) {\n        var d = new Deferred();\n        this.callBase.apply(this, arguments).done(function (r) {\n          var delayDeferred = virtualScrollController.getDelayDeferred();\n\n          if (delayDeferred) {\n            delayDeferred.done(d.resolve).fail(d.reject);\n          } else {\n            d.resolve(r);\n          }\n        }).fail(d.reject);\n        return d;\n      } else {\n        return this.callBase.apply(this, arguments);\n      }\n    },\n    refresh: function (options, operationTypes) {\n      if (!this.option(NEW_SCROLLING_MODE)) {\n        var storeLoadOptions = options.storeLoadOptions;\n        var dataSource = this._dataSource;\n\n        if (operationTypes.reload) {\n          this._virtualScrollController.reset();\n\n          dataSource.items().length = 0;\n          this._isLoaded = false;\n\n          _updateLoading(this);\n\n          this._isLoaded = true;\n\n          if (isAppendMode(this)) {\n            this.pageIndex(0);\n            dataSource.pageIndex(0);\n            storeLoadOptions.pageIndex = 0;\n            options.pageIndex = 0;\n            storeLoadOptions.skip = 0;\n          } else {\n            dataSource.pageIndex(this.pageIndex());\n\n            if (dataSource.paginate()) {\n              options.pageIndex = this.pageIndex();\n              storeLoadOptions.skip = this.pageIndex() * this.pageSize();\n            }\n          }\n        } else if (isAppendMode(this) && storeLoadOptions.skip && this._skipCorrection < 0) {\n          storeLoadOptions.skip += this._skipCorrection;\n        }\n      }\n\n      return this.callBase.apply(this, arguments);\n    },\n    dispose: function () {\n      this._virtualScrollController.dispose();\n\n      this.callBase.apply(this, arguments);\n    },\n    loadPageCount: function (count) {\n      if (!isDefined(count)) {\n        return this._loadPageCount;\n      }\n\n      this._loadPageCount = count;\n    },\n    _handleDataLoading: function (options) {\n      var loadPageCount = this.loadPageCount();\n      options.loadPageCount = loadPageCount;\n\n      if (this.option(NEW_SCROLLING_MODE) && loadPageCount > 1) {\n        options.storeLoadOptions.take = loadPageCount * this.pageSize();\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    _loadPageSize: function () {\n      return this.callBase.apply(this, arguments) * this.loadPageCount();\n    }\n  };\n  [\"beginPageIndex\", \"endPageIndex\"].forEach(function (name) {\n    result[name] = function () {\n      if (this.option(NEW_SCROLLING_MODE)) {\n        var dataSource = this._dataSource;\n        return dataSource.pageIndex.apply(dataSource, arguments);\n      }\n\n      var virtualScrollController = this._virtualScrollController;\n      return virtualScrollController[name].apply(virtualScrollController, arguments);\n    };\n  });\n  [\"virtualItemsCount\", \"getContentOffset\", \"getVirtualContentSize\", \"setContentItemSizes\", \"setViewportPosition\", \"getViewportItemIndex\", \"setViewportItemIndex\", \"getItemIndexByPosition\", \"viewportSize\", \"viewportItemSize\", \"getItemSize\", \"getItemSizes\", \"pageIndex\", \"loadIfNeed\"].forEach(function (name) {\n    result[name] = function () {\n      var virtualScrollController = this._virtualScrollController;\n      return virtualScrollController[name].apply(virtualScrollController, arguments);\n    };\n  });\n  return result;\n}();\n\nvar VirtualScrollingRowsViewExtender = function () {\n  var removeEmptyRows = function ($emptyRows, className) {\n    var tBodies = $emptyRows.toArray().map(row => $(row).parent(\".\" + className).get(0)).filter(row => row);\n\n    if (tBodies.length) {\n      $emptyRows = $(tBodies);\n    }\n\n    var rowCount = className === FREESPACE_CLASS ? $emptyRows.length - 1 : $emptyRows.length;\n\n    for (var i = 0; i < rowCount; i++) {\n      $emptyRows.eq(i).remove();\n    }\n  };\n\n  return {\n    init: function () {\n      var _dataController$state;\n\n      var dataController = this.getController(\"data\");\n      this.callBase();\n      dataController.pageChanged.add(() => {\n        this.scrollToPage(dataController.pageIndex());\n      });\n      dataController.dataSourceChanged.add(() => {\n        !this._scrollTop && this._scrollToCurrentPageOnResize();\n      });\n      null === (_dataController$state = dataController.stateLoaded) || void 0 === _dataController$state ? void 0 : _dataController$state.add(() => {\n        this._scrollToCurrentPageOnResize();\n      });\n\n      this._scrollToCurrentPageOnResize();\n    },\n    _scrollToCurrentPageOnResize: function () {\n      var dataController = this.getController(\"data\");\n\n      if (dataController.pageIndex() > 0) {\n        var resizeHandler = () => {\n          this.resizeCompleted.remove(resizeHandler);\n          this.scrollToPage(dataController.pageIndex());\n        };\n\n        this.resizeCompleted.add(resizeHandler);\n      }\n    },\n    scrollToPage: function (pageIndex) {\n      var dataController = this._dataController;\n      var pageSize = dataController ? dataController.pageSize() : 0;\n      var scrollPosition;\n\n      if (isVirtualMode(this) || isAppendMode(this)) {\n        var itemSize = dataController.getItemSize();\n        var itemSizes = dataController.getItemSizes();\n        var itemIndex = pageIndex * pageSize;\n        scrollPosition = itemIndex * itemSize;\n\n        for (var index in itemSizes) {\n          if (index < itemIndex) {\n            scrollPosition += itemSizes[index] - itemSize;\n          }\n        }\n      } else {\n        scrollPosition = 0;\n      }\n\n      this.scrollTo({\n        y: scrollPosition,\n        x: this._scrollLeft\n      });\n    },\n    renderDelayedTemplates: function (e) {\n      this._updateContentPosition(true);\n\n      this.callBase.apply(this, arguments);\n    },\n    _renderCore: function (e) {\n      var that = this;\n      var startRenderTime = new Date();\n      that.callBase.apply(that, arguments);\n      var dataSource = that._dataController._dataSource;\n\n      if (dataSource && e) {\n        var itemCount = e.items ? e.items.length : 20;\n        var viewportSize = that._dataController.viewportSize() || 20;\n\n        if (isVirtualRowRendering(that) && itemCount > 0) {\n          dataSource._renderTime = (new Date() - startRenderTime) * viewportSize / itemCount;\n        } else {\n          dataSource._renderTime = new Date() - startRenderTime;\n        }\n      }\n    },\n    _getRowElements: function (tableElement) {\n      var $rows = this.callBase(tableElement);\n      return $rows && $rows.not(\".\" + VIRTUAL_ROW_CLASS);\n    },\n    _removeRowsElements: function (contentTable, removeCount, changeType) {\n      var rowElements = this._getRowElements(contentTable).toArray();\n\n      if (\"append\" === changeType) {\n        rowElements = rowElements.slice(0, removeCount);\n      } else {\n        rowElements = rowElements.slice(-removeCount);\n      }\n\n      var errorHandlingController = this.getController(\"errorHandling\");\n      rowElements.map(rowElement => {\n        var $rowElement = $(rowElement);\n        errorHandlingController && errorHandlingController.removeErrorRow($rowElement.next());\n        $rowElement.remove();\n      });\n    },\n    _restoreErrorRow: function (contentTable) {\n      var editingController = this.getController(\"editing\");\n      editingController && editingController.hasChanges() && this._getRowElements(contentTable).each((_, item) => {\n        var rowOptions = $(item).data(\"options\");\n\n        if (rowOptions) {\n          var change = editingController.getChangeByKey(rowOptions.key);\n          change && editingController._showErrorRow(change);\n        }\n      });\n    },\n    _updateContent: function (tableElement, change) {\n      var $freeSpaceRowElements;\n\n      var contentElement = this._findContentElement();\n\n      var changeType = change && change.changeType;\n\n      if (\"append\" === changeType || \"prepend\" === changeType) {\n        var contentTable = contentElement.children().first();\n\n        var $tBodies = this._getBodies(tableElement);\n\n        if (1 === $tBodies.length) {\n          this._getBodies(contentTable)[\"append\" === changeType ? \"append\" : \"prepend\"]($tBodies.children());\n        } else {\n          $tBodies[\"append\" === changeType ? \"appendTo\" : \"prependTo\"](contentTable);\n        }\n\n        tableElement.remove();\n        $freeSpaceRowElements = this._getFreeSpaceRowElements(contentTable);\n        removeEmptyRows($freeSpaceRowElements, FREESPACE_CLASS);\n\n        if (change.removeCount) {\n          this._removeRowsElements(contentTable, change.removeCount, changeType);\n        }\n\n        this._restoreErrorRow(contentTable);\n      } else {\n        this.callBase.apply(this, arguments);\n      }\n\n      this._updateBottomLoading();\n    },\n    _addVirtualRow: function ($table, isFixed, location, position) {\n      if (!position) {\n        return;\n      }\n\n      var $virtualRow = this._createEmptyRow(VIRTUAL_ROW_CLASS, isFixed, position);\n\n      $virtualRow = this._wrapRowIfNeed($table, $virtualRow);\n\n      this._appendEmptyRow($table, $virtualRow, location);\n    },\n    _getRowHeights: function () {\n      var rowHeights = this._getRowElements(this._tableElement).toArray().map(function (row) {\n        return getBoundingRect(row).height;\n      });\n\n      return rowHeights;\n    },\n    _correctRowHeights: function (rowHeights) {\n      var dataController = this._dataController;\n      var dataSource = dataController._dataSource;\n      var correctedRowHeights = [];\n      var visibleRows = dataController.getVisibleRows();\n      var itemSize = 0;\n      var firstCountableItem = true;\n\n      for (var i = 0; i < rowHeights.length; i++) {\n        var currentItem = visibleRows[i];\n\n        if (!isDefined(currentItem)) {\n          continue;\n        }\n\n        if (isItemCountableByDataSource(currentItem, dataSource)) {\n          if (firstCountableItem) {\n            firstCountableItem = false;\n          } else {\n            correctedRowHeights.push(itemSize);\n            itemSize = 0;\n          }\n        }\n\n        itemSize += rowHeights[i];\n      }\n\n      itemSize > 0 && correctedRowHeights.push(itemSize);\n      return correctedRowHeights;\n    },\n    _updateContentPosition: function (isRender) {\n      var dataController = this._dataController;\n      var rowHeight = this._rowHeight || 20;\n      dataController.viewportItemSize(rowHeight);\n\n      if (isVirtualMode(this) || isVirtualRowRendering(this)) {\n        if (!isRender) {\n          var rowHeights = this._getRowHeights();\n\n          var correctedRowHeights = this._correctRowHeights(rowHeights);\n\n          dataController.setContentItemSizes(correctedRowHeights);\n        }\n\n        var top = dataController.getContentOffset(\"begin\");\n        var bottom = dataController.getContentOffset(\"end\");\n        var $tables = this.getTableElements();\n        var $virtualRows = $tables.children(\"tbody\").children(\".\" + VIRTUAL_ROW_CLASS);\n        removeEmptyRows($virtualRows, VIRTUAL_ROW_CLASS);\n        $tables.each((index, element) => {\n          var isFixed = index > 0;\n          this._isFixedTableRendering = isFixed;\n\n          this._addVirtualRow($(element), isFixed, \"top\", top);\n\n          this._addVirtualRow($(element), isFixed, \"bottom\", bottom);\n\n          this._isFixedTableRendering = false;\n        });\n      }\n    },\n    _isTableLinesDisplaysCorrect: function (table) {\n      var hasColumnLines = table.find(\".\" + COLUMN_LINES_CLASS).length > 0;\n      return hasColumnLines === this.option(\"showColumnLines\");\n    },\n    _isColumnElementsEqual: function ($columns, $virtualColumns) {\n      var result = $columns.length === $virtualColumns.length;\n\n      if (result) {\n        each($columns, function (index, element) {\n          if (element.style.width !== $virtualColumns[index].style.width) {\n            result = false;\n            return result;\n          }\n        });\n      }\n\n      return result;\n    },\n    _renderVirtualTableContent: function (container, height) {\n      var columns = this._columnsController.getVisibleColumns();\n\n      var html = this._createColGroup(columns).prop(\"outerHTML\");\n\n      var freeSpaceCellsHtml = \"\";\n      var columnLinesClass = this.option(\"showColumnLines\") ? COLUMN_LINES_CLASS : \"\";\n\n      var createFreeSpaceRowHtml = function (height) {\n        return \"<tr style='height:\" + height + \"px;' class='\" + FREESPACE_CLASS + \" \" + ROW_CLASS + \" \" + columnLinesClass + \"' >\" + freeSpaceCellsHtml + \"</tr>\";\n      };\n\n      for (var i = 0; i < columns.length; i++) {\n        var classes = this._getCellClasses(columns[i]);\n\n        var classString = classes.length ? \" class='\" + classes.join(\" \") + \"'\" : \"\";\n        freeSpaceCellsHtml += \"<td\" + classString + \"/>\";\n      }\n\n      while (height > PIXELS_LIMIT) {\n        html += createFreeSpaceRowHtml(PIXELS_LIMIT);\n        height -= PIXELS_LIMIT;\n      }\n\n      html += createFreeSpaceRowHtml(height);\n      container.addClass(this.addWidgetPrefix(TABLE_CLASS));\n      container.html(html);\n    },\n    _getCellClasses: function (column) {\n      var classes = [];\n      var cssClass = column.cssClass;\n      var isExpandColumn = \"expand\" === column.command;\n      cssClass && classes.push(cssClass);\n      isExpandColumn && classes.push(this.addWidgetPrefix(GROUP_SPACE_CLASS));\n      return classes;\n    },\n    _findBottomLoadPanel: function ($contentElement) {\n      var $element = $contentElement || this.element();\n      var $bottomLoadPanel = $element && $element.find(\".\" + this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS));\n\n      if ($bottomLoadPanel && $bottomLoadPanel.length) {\n        return $bottomLoadPanel;\n      }\n    },\n    _updateBottomLoading: function () {\n      var virtualMode = isVirtualMode(this);\n      var appendMode = isAppendMode(this);\n      var showBottomLoading = !this._dataController.hasKnownLastPage() && this._dataController.isLoaded() && (virtualMode || appendMode);\n\n      var $contentElement = this._findContentElement();\n\n      var bottomLoadPanelElement = this._findBottomLoadPanel($contentElement);\n\n      if (showBottomLoading) {\n        if (!bottomLoadPanelElement) {\n          $(\"<div>\").addClass(this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS)).append(this._createComponent($(\"<div>\"), LoadIndicator).$element()).appendTo($contentElement);\n        }\n      } else if (bottomLoadPanelElement) {\n        bottomLoadPanelElement.remove();\n      }\n    },\n    _handleScroll: function (e) {\n      var that = this;\n\n      if (that._hasHeight && that._rowHeight) {\n        that._dataController.setViewportPosition(e.scrollOffset.top);\n      }\n\n      that.callBase.apply(that, arguments);\n    },\n    _needUpdateRowHeight: function (itemsCount) {\n      var that = this;\n      return that.callBase.apply(that, arguments) || itemsCount > 0 && that.option(\"scrolling.mode\") === SCROLLING_MODE_INFINITE && that.option(\"scrolling.rowRenderingMode\") !== SCROLLING_MODE_VIRTUAL;\n    },\n    _updateRowHeight: function () {\n      this.callBase.apply(this, arguments);\n\n      if (this._rowHeight) {\n        this._updateContentPosition();\n\n        var viewportHeight = this._hasHeight ? this.element().outerHeight() : $(getWindow()).outerHeight();\n        var dataController = this._dataController;\n        dataController.viewportSize(Math.ceil(viewportHeight / this._rowHeight));\n\n        if (this.option(NEW_SCROLLING_MODE) && !isDefined(dataController._loadViewportParams)) {\n          var viewportSize = dataController.viewportSize();\n          var viewportIsNotFilled = viewportSize > dataController.items().length && (isAppendMode(this) || dataController.totalItemsCount() > viewportSize);\n          viewportIsNotFilled && dataController.loadViewport();\n        }\n      }\n    },\n    updateFreeSpaceRowHeight: function () {\n      var result = this.callBase.apply(this, arguments);\n\n      if (result) {\n        this._updateContentPosition();\n      }\n\n      return result;\n    },\n    setLoading: function (isLoading, messageText) {\n      var dataController = this._dataController;\n      var hasBottomLoadPanel = dataController.pageIndex() > 0 && dataController.isLoaded() && !!this._findBottomLoadPanel();\n\n      if (this.option(NEW_SCROLLING_MODE) && isLoading && dataController.isViewportChanging()) {\n        return;\n      }\n\n      if (hasBottomLoadPanel) {\n        isLoading = false;\n      }\n\n      this.callBase.call(this, isLoading, messageText);\n    },\n    _resizeCore: function () {\n      var that = this;\n      var $element = that.element();\n      that.callBase();\n\n      if (that.component.$element() && !that._windowScroll && $element.closest(getWindow().document).length) {\n        that._windowScroll = subscribeToExternalScrollers($element, function (scrollPos) {\n          if (!that._hasHeight && that._rowHeight) {\n            that._dataController.setViewportPosition(scrollPos);\n          }\n        }, that.component.$element());\n        that.on(\"disposing\", function () {\n          that._windowScroll.dispose();\n        });\n      }\n\n      that.loadIfNeed();\n    },\n    loadIfNeed: function () {\n      var _dataController$loadI;\n\n      var dataController = this._dataController;\n      null === dataController || void 0 === dataController ? void 0 : null === (_dataController$loadI = dataController.loadIfNeed) || void 0 === _dataController$loadI ? void 0 : _dataController$loadI.call(dataController);\n    },\n    setColumnWidths: function (widths) {\n      var scrollable = this.getScrollable();\n      var $content;\n      this.callBase.apply(this, arguments);\n\n      if (\"virtual\" === this.option(\"scrolling.mode\")) {\n        $content = scrollable ? $(scrollable.content()) : this.element();\n        this.callBase(widths, $content.children(\".\" + this.addWidgetPrefix(CONTENT_CLASS)).children(\":not(.\" + this.addWidgetPrefix(TABLE_CONTENT_CLASS) + \")\"));\n      }\n    },\n    dispose: function () {\n      clearTimeout(this._scrollTimeoutID);\n      this.callBase();\n    }\n  };\n}();\n\nexport var virtualScrollingModule = {\n  defaultOptions: function () {\n    return {\n      scrolling: {\n        timeout: 300,\n        updateTimeout: 300,\n        minTimeout: 0,\n        renderingThreshold: 100,\n        removeInvisiblePages: true,\n        rowPageSize: 5,\n        mode: \"standard\",\n        preloadEnabled: false,\n        rowRenderingMode: \"standard\",\n        loadTwoPagesOnStart: false,\n        newMode: false,\n        minGap: 1\n      }\n    };\n  },\n  extenders: {\n    dataSourceAdapter: VirtualScrollingDataSourceAdapterExtender,\n    controllers: {\n      data: function () {\n        var members = {\n          _refreshDataSource: function () {\n            var baseResult = this.callBase.apply(this, arguments) || new Deferred().resolve().promise();\n            baseResult.done(this.initVirtualRows.bind(this));\n            return baseResult;\n          },\n          getRowPageSize: function () {\n            var rowPageSize = this.option(\"scrolling.rowPageSize\");\n            var pageSize = this.pageSize();\n            return pageSize && pageSize < rowPageSize ? pageSize : rowPageSize;\n          },\n          reload: function () {\n            var rowsScrollController = this._rowsScrollController || this._dataSource;\n            var itemIndex = rowsScrollController && rowsScrollController.getItemIndexByPosition();\n            var result = this.callBase.apply(this, arguments);\n            return result && result.done(() => {\n              if (isVirtualMode(this) || isVirtualRowRendering(this)) {\n                var rowIndexOffset = this.getRowIndexOffset();\n                var rowIndex = Math.floor(itemIndex) - rowIndexOffset;\n                var component = this.component;\n                var scrollable = component.getScrollable && component.getScrollable();\n                var isSortingOperation = this.dataSource().operationTypes().sorting;\n\n                if (scrollable && !isSortingOperation) {\n                  var rowElement = component.getRowElement(rowIndex);\n                  var $rowElement = rowElement && rowElement[0] && $(rowElement[0]);\n                  var top = $rowElement && $rowElement.position().top;\n                  var isChromeLatest = browser.chrome && browser.version >= 91;\n                  var allowedTopOffset = browser.mozilla || browser.msie || isChromeLatest ? 1 : 0;\n\n                  if (top > allowedTopOffset) {\n                    top = Math.round(top + $rowElement.outerHeight() * (itemIndex % 1));\n                    scrollable.scrollTo({\n                      y: top\n                    });\n                  }\n                }\n              }\n            });\n          },\n          initVirtualRows: function () {\n            var virtualRowsRendering = isVirtualRowRendering(this);\n\n            if (\"virtual\" !== this.option(\"scrolling.mode\") && true !== virtualRowsRendering || false === virtualRowsRendering || !this.option(\"scrolling.rowPageSize\")) {\n              this._visibleItems = null;\n              this._rowsScrollController = null;\n              return;\n            }\n\n            var pageIndex = !isVirtualMode(this) && this.pageIndex() >= this.pageCount() ? this.pageCount() - 1 : this.pageIndex();\n            this._rowPageIndex = Math.ceil(pageIndex * this.pageSize() / this.getRowPageSize());\n            this._uncountableItemCount = 0;\n            this._visibleItems = this.option(NEW_SCROLLING_MODE) ? null : [];\n            this._rowsScrollController = new VirtualScrollController(this.component, this._getRowsScrollDataOptions(), true);\n            this._viewportChanging = false;\n\n            this._rowsScrollController.positionChanged.add(() => {\n              var _this$_dataSource;\n\n              if (this.option(NEW_SCROLLING_MODE)) {\n                this._viewportChanging = true;\n                this.loadViewport();\n                this._viewportChanging = false;\n                return;\n              }\n\n              null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.setViewportItemIndex(this._rowsScrollController.getViewportItemIndex());\n            });\n\n            if (this.isLoaded() && !this.option(NEW_SCROLLING_MODE)) {\n              this._rowsScrollController.load();\n            }\n          },\n          isViewportChanging: function () {\n            return this._viewportChanging;\n          },\n          _getRowsScrollDataOptions: function () {\n            var that = this;\n\n            var isItemCountable = function (item) {\n              return isItemCountableByDataSource(item, that._dataSource);\n            };\n\n            return {\n              pageSize: function () {\n                return that.getRowPageSize();\n              },\n              totalItemsCount: function () {\n                if (that.option(NEW_SCROLLING_MODE)) {\n                  return that.totalItemsCount() + that._uncountableItemCount;\n                }\n\n                return isVirtualMode(that) ? that.totalItemsCount() : that._items.filter(isItemCountable).length;\n              },\n              hasKnownLastPage: function () {\n                return true;\n              },\n              pageIndex: function (index) {\n                if (void 0 !== index) {\n                  that._rowPageIndex = index;\n                }\n\n                return that._rowPageIndex;\n              },\n              isLoading: function () {\n                return that.isLoading();\n              },\n              pageCount: function () {\n                var pageCount = Math.ceil(this.totalItemsCount() / this.pageSize());\n                return pageCount ? pageCount : 1;\n              },\n              load: function () {\n                if (that._rowsScrollController.pageIndex() >= this.pageCount()) {\n                  that._rowPageIndex = this.pageCount() - 1;\n\n                  that._rowsScrollController.pageIndex(that._rowPageIndex);\n                }\n\n                if (!this.items().length && this.totalItemsCount()) {\n                  return;\n                }\n\n                that._rowsScrollController.handleDataChanged(change => {\n                  change = change || {};\n                  change.changeType = change.changeType || \"refresh\";\n                  change.items = change.items || that._visibleItems;\n\n                  that._visibleItems.forEach((item, index) => {\n                    item.rowIndex = index;\n                  });\n\n                  that._fireChanged(change);\n                });\n              },\n              updateLoading: function () {},\n              itemsCount: function () {\n                return this.items().filter(isItemCountable).length;\n              },\n              correctCount: function (items, count, fromEnd) {\n                return _correctCount(items, count, fromEnd, (item, isNextAfterLast, fromEnd) => {\n                  if (item.isNewRow) {\n                    return isNextAfterLast && !fromEnd;\n                  }\n\n                  if (isNextAfterLast && fromEnd) {\n                    return !item.isNewRow;\n                  }\n\n                  return isItemCountable(item);\n                });\n              },\n              items: function (countableOnly) {\n                var dataSource = that.dataSource();\n                var virtualItemsCount = dataSource && dataSource.virtualItemsCount();\n                var begin = virtualItemsCount ? virtualItemsCount.begin : 0;\n                var rowPageSize = that.getRowPageSize();\n                var skip = that._rowPageIndex * rowPageSize - begin;\n                var take = rowPageSize;\n                var result = that._items;\n\n                if (skip < 0) {\n                  return [];\n                }\n\n                if (skip) {\n                  skip = this.correctCount(result, skip);\n                  result = result.slice(skip);\n                }\n\n                if (take) {\n                  take = this.correctCount(result, take);\n                  result = result.slice(0, take);\n                }\n\n                return countableOnly ? result.filter(isItemCountable) : result;\n              },\n              viewportItems: function (items) {\n                if (items && !that.option(NEW_SCROLLING_MODE)) {\n                  that._visibleItems = items;\n                }\n\n                return that._visibleItems;\n              },\n              onChanged: function () {},\n              changingDuration: function (e) {\n                var dataSource = that.dataSource();\n\n                if (dataSource.isLoading() && !that.option(NEW_SCROLLING_MODE)) {\n                  return LOAD_TIMEOUT;\n                }\n\n                return (null === dataSource || void 0 === dataSource ? void 0 : dataSource._renderTime) || 0;\n              }\n            };\n          },\n          _updateItemsCore: function (change) {\n            var delta = this.getRowIndexDelta();\n            this.callBase.apply(this, arguments);\n\n            if (this.option(NEW_SCROLLING_MODE) && isVirtualRowRendering(this)) {\n              return;\n            }\n\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              var visibleItems = this._visibleItems;\n              var isRefresh = \"refresh\" === change.changeType || change.isLiveUpdate;\n\n              if (\"append\" === change.changeType && change.items && !change.items.length) {\n                return;\n              }\n\n              if (isRefresh || \"append\" === change.changeType || \"prepend\" === change.changeType) {\n                change.cancel = true;\n                isRefresh && rowsScrollController.reset(true);\n                rowsScrollController.load();\n              } else {\n                if (\"update\" === change.changeType) {\n                  change.rowIndices.forEach((rowIndex, index) => {\n                    var changeType = change.changeTypes[index];\n                    var newItem = change.items[index];\n\n                    if (\"update\" === changeType) {\n                      visibleItems[rowIndex] = newItem;\n                    } else if (\"insert\" === changeType) {\n                      visibleItems.splice(rowIndex, 0, newItem);\n                    } else if (\"remove\" === changeType) {\n                      visibleItems.splice(rowIndex, 1);\n                    }\n                  });\n                } else {\n                  visibleItems.forEach((item, index) => {\n                    visibleItems[index] = this._items[index + delta] || visibleItems[index];\n                  });\n                  change.items = visibleItems;\n                }\n\n                updateItemIndices(visibleItems);\n              }\n            }\n          },\n          _updateLoadViewportParams: function () {\n            this._loadViewportParams = this._rowsScrollController.getViewportParams();\n          },\n          _afterProcessItems: function (items, change) {\n            this._uncountableItemCount = 0;\n\n            if (isDefined(this._loadViewportParams)) {\n              this._uncountableItemCount = items.filter(item => !isItemCountableByDataSource(item, this._dataSource)).length;\n\n              this._updateLoadViewportParams();\n\n              var {\n                skipForCurrentPage: skipForCurrentPage\n              } = this.getLoadPageParams();\n              change.repaintChangesOnly = \"refresh\" === change.changeType;\n              return items.slice(skipForCurrentPage, skipForCurrentPage + this._loadViewportParams.take);\n            }\n\n            return this.callBase.apply(this, arguments);\n          },\n          _applyChange: function (change) {\n            var that = this;\n            var items = change.items;\n            var changeType = change.changeType;\n            var removeCount = change.removeCount;\n\n            if (removeCount) {\n              var fromEnd = \"prepend\" === changeType;\n              removeCount = _correctCount(that._items, removeCount, fromEnd, function (item, isNextAfterLast) {\n                return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && (that._dataSource.isGroupItemCountable(item.data) || isNextAfterLast);\n              });\n              change.removeCount = removeCount;\n            }\n\n            switch (changeType) {\n              case \"prepend\":\n                that._items.unshift.apply(that._items, items);\n\n                if (removeCount) {\n                  that._items.splice(-removeCount);\n                }\n\n                break;\n\n              case \"append\":\n                that._items.push.apply(that._items, items);\n\n                if (removeCount) {\n                  that._items.splice(0, removeCount);\n                }\n\n                break;\n\n              default:\n                that.callBase(change);\n            }\n          },\n          items: function (allItems) {\n            return allItems ? this._items : this._visibleItems || this._items;\n          },\n          getRowIndexDelta: function () {\n            var visibleItems = this._visibleItems;\n            var delta = 0;\n\n            if (visibleItems && visibleItems[0]) {\n              delta = this._items.indexOf(visibleItems[0]);\n            }\n\n            return delta < 0 ? 0 : delta;\n          },\n          getRowIndexOffset: function (byLoadedRows) {\n            var offset = 0;\n            var dataSource = this.dataSource();\n            var rowsScrollController = this._rowsScrollController;\n            var virtualMode = isVirtualMode(this);\n            var appendMode = isAppendMode(this);\n            var newMode = this.option(NEW_SCROLLING_MODE);\n\n            if (rowsScrollController && !byLoadedRows) {\n              if (this.option(NEW_SCROLLING_MODE) && isDefined(this._loadViewportParams)) {\n                var {\n                  skipForCurrentPage: skipForCurrentPage,\n                  pageIndex: pageIndex\n                } = this.getLoadPageParams();\n                offset = pageIndex * this.pageSize() + skipForCurrentPage;\n              } else {\n                offset = rowsScrollController.beginPageIndex() * rowsScrollController.pageSize();\n              }\n            } else if ((virtualMode || appendMode && newMode) && dataSource) {\n              offset = dataSource.beginPageIndex() * dataSource.pageSize();\n            }\n\n            return offset;\n          },\n          viewportSize: function () {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n            var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportSize.apply(rowsScrollController, arguments);\n\n            if (this.option(NEW_SCROLLING_MODE)) {\n              return result;\n            }\n\n            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportSize.apply(dataSource, arguments);\n          },\n          viewportItemSize: function () {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n            var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportItemSize.apply(rowsScrollController, arguments);\n\n            if (this.option(NEW_SCROLLING_MODE)) {\n              return result;\n            }\n\n            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportItemSize.apply(dataSource, arguments);\n          },\n          setViewportPosition: function () {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n\n            if (rowsScrollController) {\n              rowsScrollController.setViewportPosition.apply(rowsScrollController, arguments);\n            } else {\n              null === dataSource || void 0 === dataSource ? void 0 : dataSource.setViewportPosition.apply(dataSource, arguments);\n            }\n          },\n          setContentItemSizes: function (sizes) {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n            var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.setContentItemSizes(sizes);\n\n            if (this.option(NEW_SCROLLING_MODE)) {\n              return result;\n            }\n\n            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.setContentItemSizes(sizes);\n          },\n          getLoadPageParams: function () {\n            var viewportParams = this._loadViewportParams;\n            var pageIndex = Math.floor(viewportParams.skip / this.pageSize());\n            var skipForCurrentPage = viewportParams.skip - pageIndex * this.pageSize();\n            var loadPageCount = Math.ceil((skipForCurrentPage + viewportParams.take) / this.pageSize());\n            return {\n              pageIndex: pageIndex,\n              loadPageCount: loadPageCount,\n              skipForCurrentPage: skipForCurrentPage\n            };\n          },\n          loadViewport: function () {\n            if (isVirtualMode(this) || isAppendMode(this)) {\n              this._updateLoadViewportParams();\n\n              var {\n                pageIndex: pageIndex,\n                loadPageCount: loadPageCount\n              } = this.getLoadPageParams();\n              var dataSourceAdapter = this._dataSource;\n\n              if (pageIndex !== dataSourceAdapter.pageIndex() || loadPageCount !== dataSourceAdapter.loadPageCount()) {\n                dataSourceAdapter.pageIndex(pageIndex);\n                dataSourceAdapter.loadPageCount(loadPageCount);\n                this.load();\n              } else if (!this._isLoading) {\n                this.updateItems();\n              }\n            }\n          },\n          loadIfNeed: function () {\n            if (this.option(NEW_SCROLLING_MODE)) {\n              return;\n            }\n\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.loadIfNeed();\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.loadIfNeed();\n          },\n          getItemSize: function () {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.getItemSize.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getItemSize.apply(dataSource, arguments);\n          },\n          getItemSizes: function () {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.getItemSizes.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getItemSizes.apply(dataSource, arguments);\n          },\n          getContentOffset: function () {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.getContentOffset.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getContentOffset.apply(dataSource, arguments);\n          },\n          refresh: function (options) {\n            var dataSource = this._dataSource;\n\n            if (dataSource && options && options.load && isAppendMode(this)) {\n              dataSource.resetCurrentTotalCount();\n            }\n\n            return this.callBase.apply(this, arguments);\n          },\n          dispose: function () {\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.dispose();\n            this.callBase.apply(this, arguments);\n          },\n          topItemIndex: function () {\n            var _this$_loadViewportPa;\n\n            return null === (_this$_loadViewportPa = this._loadViewportParams) || void 0 === _this$_loadViewportPa ? void 0 : _this$_loadViewportPa.skip;\n          },\n          bottomItemIndex: function () {\n            var viewportParams = this._loadViewportParams;\n            return viewportParams && viewportParams.skip + viewportParams.take;\n          },\n          virtualItemsCount: function () {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.virtualItemsCount.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount.apply(dataSource, arguments);\n          }\n        };\n        gridCoreUtils.proxyMethod(members, \"getVirtualContentSize\");\n        gridCoreUtils.proxyMethod(members, \"setViewportItemIndex\");\n        return members;\n      }(),\n      resizing: {\n        resize: function () {\n          var that = this;\n          var callBase = that.callBase;\n          var result;\n\n          if (isVirtualMode(that) || isVirtualRowRendering(that)) {\n            clearTimeout(that._resizeTimeout);\n            var diff = new Date() - that._lastTime;\n            var updateTimeout = that.option(\"scrolling.updateTimeout\");\n\n            if (that._lastTime && diff < updateTimeout) {\n              result = new Deferred();\n              that._resizeTimeout = setTimeout(function () {\n                callBase.apply(that).done(result.resolve).fail(result.reject);\n                that._lastTime = new Date();\n              }, updateTimeout);\n              that._lastTime = new Date();\n            } else {\n              result = callBase.apply(that);\n\n              if (that._dataController.isLoaded()) {\n                that._lastTime = new Date();\n              }\n            }\n          } else {\n            result = callBase.apply(that);\n          }\n\n          return result;\n        },\n        dispose: function () {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._resizeTimeout);\n        }\n      }\n    },\n    views: {\n      rowsView: VirtualScrollingRowsViewExtender\n    }\n  }\n};","map":{"version":3,"sources":["/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.virtual_scrolling.js"],"names":["$","getWindow","VirtualScrollController","subscribeToExternalScrollers","gridCoreUtils","each","Deferred","LoadIndicator","browser","getBoundingRect","isDefined","TABLE_CLASS","BOTTOM_LOAD_PANEL_CLASS","TABLE_CONTENT_CLASS","GROUP_SPACE_CLASS","CONTENT_CLASS","ROW_CLASS","FREESPACE_CLASS","COLUMN_LINES_CLASS","VIRTUAL_ROW_CLASS","SCROLLING_MODE_INFINITE","SCROLLING_MODE_VIRTUAL","SCROLLING_MODE_STANDARD","PIXELS_LIMIT","LOAD_TIMEOUT","NEW_SCROLLING_MODE","isVirtualMode","that","option","isAppendMode","isVirtualRowRendering","rowRenderingMode","_correctCount","items","count","fromEnd","isItemCountableFunc","i","item","length","isItemCountableByDataSource","dataSource","rowType","isNewRow","isGroupItemCountable","data","updateItemIndices","forEach","index","rowIndex","VirtualScrollingDataSourceAdapterExtender","_updateLoading","beginPageIndex","_virtualScrollController","viewportSize","getViewportItemIndex","pageSize","itemsCount","_dataSource","isLoading","_isLoading","loadingChanged","fire","result","init","callBase","apply","arguments","_items","_isLoaded","_loadPageCount","component","_getVirtualScrollDataOptions","totalItemsCount","hasKnownLastPage","pageIndex","isCustomLoading","pageCount","load","updateLoading","viewportItems","onChanged","e","changed","changingDuration","_renderTime","_handleLoadingChanged","_isLoadingAll","_startLoadTime","Date","_handleLoadError","_handleDataChanged","bind","handleDataChanged","_customizeRemoteOperations","options","operationTypes","newMode","reload","skip","delay","isBase","loadOptions","isLoaded","resetPagesCache","isLiveUpdate","reset","_changeRowExpandCore","virtualScrollController","d","done","r","delayDeferred","getDelayDeferred","resolve","fail","reject","refresh","storeLoadOptions","paginate","_skipCorrection","dispose","loadPageCount","_handleDataLoading","take","_loadPageSize","name","VirtualScrollingRowsViewExtender","removeEmptyRows","$emptyRows","className","tBodies","toArray","map","row","parent","get","filter","rowCount","eq","remove","_dataController$state","dataController","getController","pageChanged","add","scrollToPage","dataSourceChanged","_scrollTop","_scrollToCurrentPageOnResize","stateLoaded","resizeHandler","resizeCompleted","_dataController","scrollPosition","itemSize","getItemSize","itemSizes","getItemSizes","itemIndex","scrollTo","y","x","_scrollLeft","renderDelayedTemplates","_updateContentPosition","_renderCore","startRenderTime","itemCount","_getRowElements","tableElement","$rows","not","_removeRowsElements","contentTable","removeCount","changeType","rowElements","slice","errorHandlingController","rowElement","$rowElement","removeErrorRow","next","_restoreErrorRow","editingController","hasChanges","_","rowOptions","change","getChangeByKey","key","_showErrorRow","_updateContent","$freeSpaceRowElements","contentElement","_findContentElement","children","first","$tBodies","_getBodies","_getFreeSpaceRowElements","_updateBottomLoading","_addVirtualRow","$table","isFixed","location","position","$virtualRow","_createEmptyRow","_wrapRowIfNeed","_appendEmptyRow","_getRowHeights","rowHeights","_tableElement","height","_correctRowHeights","correctedRowHeights","visibleRows","getVisibleRows","firstCountableItem","currentItem","push","isRender","rowHeight","_rowHeight","viewportItemSize","setContentItemSizes","top","getContentOffset","bottom","$tables","getTableElements","$virtualRows","element","_isFixedTableRendering","_isTableLinesDisplaysCorrect","table","hasColumnLines","find","_isColumnElementsEqual","$columns","$virtualColumns","style","width","_renderVirtualTableContent","container","columns","_columnsController","getVisibleColumns","html","_createColGroup","prop","freeSpaceCellsHtml","columnLinesClass","createFreeSpaceRowHtml","classes","_getCellClasses","classString","join","addClass","addWidgetPrefix","column","cssClass","isExpandColumn","command","_findBottomLoadPanel","$contentElement","$element","$bottomLoadPanel","virtualMode","appendMode","showBottomLoading","bottomLoadPanelElement","append","_createComponent","appendTo","_handleScroll","_hasHeight","setViewportPosition","scrollOffset","_needUpdateRowHeight","_updateRowHeight","viewportHeight","outerHeight","Math","ceil","_loadViewportParams","viewportIsNotFilled","loadViewport","updateFreeSpaceRowHeight","setLoading","messageText","hasBottomLoadPanel","isViewportChanging","call","_resizeCore","_windowScroll","closest","document","scrollPos","on","loadIfNeed","_dataController$loadI","setColumnWidths","widths","scrollable","getScrollable","$content","content","clearTimeout","_scrollTimeoutID","virtualScrollingModule","defaultOptions","scrolling","timeout","updateTimeout","minTimeout","renderingThreshold","removeInvisiblePages","rowPageSize","mode","preloadEnabled","loadTwoPagesOnStart","minGap","extenders","dataSourceAdapter","controllers","members","_refreshDataSource","baseResult","promise","initVirtualRows","getRowPageSize","rowsScrollController","_rowsScrollController","getItemIndexByPosition","rowIndexOffset","getRowIndexOffset","floor","isSortingOperation","sorting","getRowElement","isChromeLatest","chrome","version","allowedTopOffset","mozilla","msie","round","virtualRowsRendering","_visibleItems","_rowPageIndex","_uncountableItemCount","_getRowsScrollDataOptions","_viewportChanging","positionChanged","_this$_dataSource","setViewportItemIndex","isItemCountable","_fireChanged","correctCount","isNextAfterLast","countableOnly","virtualItemsCount","begin","_updateItemsCore","delta","getRowIndexDelta","visibleItems","isRefresh","cancel","rowIndices","changeTypes","newItem","splice","_updateLoadViewportParams","getViewportParams","_afterProcessItems","skipForCurrentPage","getLoadPageParams","repaintChangesOnly","_applyChange","unshift","allItems","indexOf","byLoadedRows","offset","sizes","viewportParams","updateItems","resetCurrentTotalCount","topItemIndex","_this$_loadViewportPa","bottomItemIndex","proxyMethod","resizing","resize","_resizeTimeout","diff","_lastTime","setTimeout","views","rowsView"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.virtual_scrolling.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    getWindow\r\n} from \"../../core/utils/window\";\r\nimport {\r\n    VirtualScrollController,\r\n    subscribeToExternalScrollers\r\n} from \"./ui.grid_core.virtual_scrolling_core\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport LoadIndicator from \"../load_indicator\";\r\nimport browser from \"../../core/utils/browser\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../core/utils/position\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nvar TABLE_CLASS = \"table\";\r\nvar BOTTOM_LOAD_PANEL_CLASS = \"bottom-load-panel\";\r\nvar TABLE_CONTENT_CLASS = \"table-content\";\r\nvar GROUP_SPACE_CLASS = \"group-space\";\r\nvar CONTENT_CLASS = \"content\";\r\nvar ROW_CLASS = \"dx-row\";\r\nvar FREESPACE_CLASS = \"dx-freespace-row\";\r\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\r\nvar VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\r\nvar SCROLLING_MODE_INFINITE = \"infinite\";\r\nvar SCROLLING_MODE_VIRTUAL = \"virtual\";\r\nvar SCROLLING_MODE_STANDARD = \"standard\";\r\nvar PIXELS_LIMIT = 25e4;\r\nvar LOAD_TIMEOUT = 300;\r\nvar NEW_SCROLLING_MODE = \"scrolling.newMode\";\r\nvar isVirtualMode = function(that) {\r\n    return that.option(\"scrolling.mode\") === SCROLLING_MODE_VIRTUAL\r\n};\r\nvar isAppendMode = function(that) {\r\n    return that.option(\"scrolling.mode\") === SCROLLING_MODE_INFINITE\r\n};\r\nvar isVirtualRowRendering = function(that) {\r\n    var rowRenderingMode = that.option(\"scrolling.rowRenderingMode\");\r\n    if (rowRenderingMode === SCROLLING_MODE_VIRTUAL) {\r\n        return true\r\n    } else if (rowRenderingMode === SCROLLING_MODE_STANDARD) {\r\n        return false\r\n    }\r\n};\r\nvar _correctCount = function(items, count, fromEnd, isItemCountableFunc) {\r\n    for (var i = 0; i < count + 1; i++) {\r\n        var item = items[fromEnd ? items.length - 1 - i : i];\r\n        if (item && !isItemCountableFunc(item, i === count, fromEnd)) {\r\n            count++\r\n        }\r\n    }\r\n    return count\r\n};\r\nvar isItemCountableByDataSource = function(item, dataSource) {\r\n    return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && dataSource.isGroupItemCountable(item.data)\r\n};\r\nvar updateItemIndices = function(items) {\r\n    items.forEach((function(item, index) {\r\n        item.rowIndex = index\r\n    }));\r\n    return items\r\n};\r\nvar VirtualScrollingDataSourceAdapterExtender = function() {\r\n    var _updateLoading = function(that) {\r\n        var beginPageIndex = that._virtualScrollController.beginPageIndex(-1);\r\n        if (isVirtualMode(that)) {\r\n            if (beginPageIndex < 0 || that.viewportSize() >= 0 && that.getViewportItemIndex() >= 0 && (beginPageIndex * that.pageSize() > that.getViewportItemIndex() || beginPageIndex * that.pageSize() + that.itemsCount() < that.getViewportItemIndex() + that.viewportSize()) && that._dataSource.isLoading()) {\r\n                if (!that._isLoading) {\r\n                    that._isLoading = true;\r\n                    that.loadingChanged.fire(true)\r\n                }\r\n            } else if (that._isLoading) {\r\n                that._isLoading = false;\r\n                that.loadingChanged.fire(false)\r\n            }\r\n        }\r\n    };\r\n    var result = {\r\n        init: function() {\r\n            this.callBase.apply(this, arguments);\r\n            this._items = [];\r\n            this._isLoaded = true;\r\n            this._loadPageCount = 1;\r\n            this._virtualScrollController = new VirtualScrollController(this.component, this._getVirtualScrollDataOptions())\r\n        },\r\n        _getVirtualScrollDataOptions: function() {\r\n            var that = this;\r\n            return {\r\n                pageSize: function() {\r\n                    return that.pageSize()\r\n                },\r\n                totalItemsCount: function() {\r\n                    return that.totalItemsCount()\r\n                },\r\n                hasKnownLastPage: function() {\r\n                    return that.hasKnownLastPage()\r\n                },\r\n                pageIndex: function(index) {\r\n                    return that._dataSource.pageIndex(index)\r\n                },\r\n                isLoading: function() {\r\n                    return that._dataSource.isLoading() && !that.isCustomLoading()\r\n                },\r\n                pageCount: function() {\r\n                    return that.pageCount()\r\n                },\r\n                load: function() {\r\n                    return that._dataSource.load()\r\n                },\r\n                updateLoading: function() {\r\n                    _updateLoading(that)\r\n                },\r\n                itemsCount: function() {\r\n                    return that.itemsCount(true)\r\n                },\r\n                items: function() {\r\n                    return that._dataSource.items()\r\n                },\r\n                viewportItems: function(items) {\r\n                    if (items) {\r\n                        that._items = items\r\n                    }\r\n                    return that._items\r\n                },\r\n                onChanged: function(e) {\r\n                    that.changed.fire(e)\r\n                },\r\n                changingDuration: function(e) {\r\n                    if (that.isLoading()) {\r\n                        return LOAD_TIMEOUT\r\n                    }\r\n                    return that._renderTime || 0\r\n                }\r\n            }\r\n        },\r\n        _handleLoadingChanged: function(isLoading) {\r\n            if (this.option(NEW_SCROLLING_MODE)) {\r\n                this.callBase.apply(this, arguments);\r\n                return\r\n            }\r\n            if (!isVirtualMode(this) || this._isLoadingAll) {\r\n                this._isLoading = isLoading;\r\n                this.callBase.apply(this, arguments)\r\n            }\r\n            if (isLoading) {\r\n                this._startLoadTime = new Date\r\n            } else {\r\n                this._startLoadTime = void 0\r\n            }\r\n        },\r\n        _handleLoadError: function() {\r\n            if (!this.option(NEW_SCROLLING_MODE)) {\r\n                this._isLoading = false;\r\n                this.loadingChanged.fire(false)\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _handleDataChanged: function(e) {\r\n            if (this.option(NEW_SCROLLING_MODE)) {\r\n                this.callBase.apply(this, arguments);\r\n                return\r\n            }\r\n            var callBase = this.callBase.bind(this);\r\n            this._virtualScrollController.handleDataChanged(callBase, e)\r\n        },\r\n        _customizeRemoteOperations: function(options, operationTypes) {\r\n            var newMode = this.option(NEW_SCROLLING_MODE);\r\n            if ((isVirtualMode(this) || isAppendMode(this) && newMode) && !operationTypes.reload && (operationTypes.skip || newMode) && this._renderTime < this.option(\"scrolling.renderingThreshold\")) {\r\n                options.delay = void 0\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        items: function() {\r\n            if (this.option(NEW_SCROLLING_MODE)) {\r\n                return this._dataSource.items()\r\n            }\r\n            return this._items\r\n        },\r\n        itemsCount: function(isBase) {\r\n            if (isBase) {\r\n                return this.callBase()\r\n            }\r\n            return this._virtualScrollController.itemsCount()\r\n        },\r\n        load: function(loadOptions) {\r\n            if (this.option(NEW_SCROLLING_MODE) || loadOptions) {\r\n                return this.callBase(loadOptions)\r\n            }\r\n            return this._virtualScrollController.load()\r\n        },\r\n        isLoading: function() {\r\n            return this._isLoading\r\n        },\r\n        isLoaded: function() {\r\n            return this._dataSource.isLoaded() && this._isLoaded\r\n        },\r\n        resetPagesCache: function(isLiveUpdate) {\r\n            if (!isLiveUpdate) {\r\n                this._virtualScrollController.reset(true)\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _changeRowExpandCore: function() {\r\n            var result = this.callBase.apply(this, arguments);\r\n            if (this.option(NEW_SCROLLING_MODE)) {\r\n                return result\r\n            }\r\n            this.resetPagesCache();\r\n            _updateLoading(this);\r\n            return result\r\n        },\r\n        reload: function() {\r\n            this._dataSource.pageIndex(this.pageIndex());\r\n            var virtualScrollController = this._virtualScrollController;\r\n            if (!this.option(NEW_SCROLLING_MODE) && virtualScrollController) {\r\n                var d = new Deferred;\r\n                this.callBase.apply(this, arguments).done((function(r) {\r\n                    var delayDeferred = virtualScrollController.getDelayDeferred();\r\n                    if (delayDeferred) {\r\n                        delayDeferred.done(d.resolve).fail(d.reject)\r\n                    } else {\r\n                        d.resolve(r)\r\n                    }\r\n                })).fail(d.reject);\r\n                return d\r\n            } else {\r\n                return this.callBase.apply(this, arguments)\r\n            }\r\n        },\r\n        refresh: function(options, operationTypes) {\r\n            if (!this.option(NEW_SCROLLING_MODE)) {\r\n                var storeLoadOptions = options.storeLoadOptions;\r\n                var dataSource = this._dataSource;\r\n                if (operationTypes.reload) {\r\n                    this._virtualScrollController.reset();\r\n                    dataSource.items().length = 0;\r\n                    this._isLoaded = false;\r\n                    _updateLoading(this);\r\n                    this._isLoaded = true;\r\n                    if (isAppendMode(this)) {\r\n                        this.pageIndex(0);\r\n                        dataSource.pageIndex(0);\r\n                        storeLoadOptions.pageIndex = 0;\r\n                        options.pageIndex = 0;\r\n                        storeLoadOptions.skip = 0\r\n                    } else {\r\n                        dataSource.pageIndex(this.pageIndex());\r\n                        if (dataSource.paginate()) {\r\n                            options.pageIndex = this.pageIndex();\r\n                            storeLoadOptions.skip = this.pageIndex() * this.pageSize()\r\n                        }\r\n                    }\r\n                } else if (isAppendMode(this) && storeLoadOptions.skip && this._skipCorrection < 0) {\r\n                    storeLoadOptions.skip += this._skipCorrection\r\n                }\r\n            }\r\n            return this.callBase.apply(this, arguments)\r\n        },\r\n        dispose: function() {\r\n            this._virtualScrollController.dispose();\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        loadPageCount: function(count) {\r\n            if (!isDefined(count)) {\r\n                return this._loadPageCount\r\n            }\r\n            this._loadPageCount = count\r\n        },\r\n        _handleDataLoading: function(options) {\r\n            var loadPageCount = this.loadPageCount();\r\n            options.loadPageCount = loadPageCount;\r\n            if (this.option(NEW_SCROLLING_MODE) && loadPageCount > 1) {\r\n                options.storeLoadOptions.take = loadPageCount * this.pageSize()\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _loadPageSize: function() {\r\n            return this.callBase.apply(this, arguments) * this.loadPageCount()\r\n        }\r\n    };\r\n    [\"beginPageIndex\", \"endPageIndex\"].forEach((function(name) {\r\n        result[name] = function() {\r\n            if (this.option(NEW_SCROLLING_MODE)) {\r\n                var dataSource = this._dataSource;\r\n                return dataSource.pageIndex.apply(dataSource, arguments)\r\n            }\r\n            var virtualScrollController = this._virtualScrollController;\r\n            return virtualScrollController[name].apply(virtualScrollController, arguments)\r\n        }\r\n    }));\r\n    [\"virtualItemsCount\", \"getContentOffset\", \"getVirtualContentSize\", \"setContentItemSizes\", \"setViewportPosition\", \"getViewportItemIndex\", \"setViewportItemIndex\", \"getItemIndexByPosition\", \"viewportSize\", \"viewportItemSize\", \"getItemSize\", \"getItemSizes\", \"pageIndex\", \"loadIfNeed\"].forEach((function(name) {\r\n        result[name] = function() {\r\n            var virtualScrollController = this._virtualScrollController;\r\n            return virtualScrollController[name].apply(virtualScrollController, arguments)\r\n        }\r\n    }));\r\n    return result\r\n}();\r\nvar VirtualScrollingRowsViewExtender = function() {\r\n    var removeEmptyRows = function($emptyRows, className) {\r\n        var tBodies = $emptyRows.toArray().map(row => $(row).parent(\".\" + className).get(0)).filter(row => row);\r\n        if (tBodies.length) {\r\n            $emptyRows = $(tBodies)\r\n        }\r\n        var rowCount = className === FREESPACE_CLASS ? $emptyRows.length - 1 : $emptyRows.length;\r\n        for (var i = 0; i < rowCount; i++) {\r\n            $emptyRows.eq(i).remove()\r\n        }\r\n    };\r\n    return {\r\n        init: function() {\r\n            var _dataController$state;\r\n            var dataController = this.getController(\"data\");\r\n            this.callBase();\r\n            dataController.pageChanged.add(() => {\r\n                this.scrollToPage(dataController.pageIndex())\r\n            });\r\n            dataController.dataSourceChanged.add(() => {\r\n                !this._scrollTop && this._scrollToCurrentPageOnResize()\r\n            });\r\n            null === (_dataController$state = dataController.stateLoaded) || void 0 === _dataController$state ? void 0 : _dataController$state.add(() => {\r\n                this._scrollToCurrentPageOnResize()\r\n            });\r\n            this._scrollToCurrentPageOnResize()\r\n        },\r\n        _scrollToCurrentPageOnResize: function() {\r\n            var dataController = this.getController(\"data\");\r\n            if (dataController.pageIndex() > 0) {\r\n                var resizeHandler = () => {\r\n                    this.resizeCompleted.remove(resizeHandler);\r\n                    this.scrollToPage(dataController.pageIndex())\r\n                };\r\n                this.resizeCompleted.add(resizeHandler)\r\n            }\r\n        },\r\n        scrollToPage: function(pageIndex) {\r\n            var dataController = this._dataController;\r\n            var pageSize = dataController ? dataController.pageSize() : 0;\r\n            var scrollPosition;\r\n            if (isVirtualMode(this) || isAppendMode(this)) {\r\n                var itemSize = dataController.getItemSize();\r\n                var itemSizes = dataController.getItemSizes();\r\n                var itemIndex = pageIndex * pageSize;\r\n                scrollPosition = itemIndex * itemSize;\r\n                for (var index in itemSizes) {\r\n                    if (index < itemIndex) {\r\n                        scrollPosition += itemSizes[index] - itemSize\r\n                    }\r\n                }\r\n            } else {\r\n                scrollPosition = 0\r\n            }\r\n            this.scrollTo({\r\n                y: scrollPosition,\r\n                x: this._scrollLeft\r\n            })\r\n        },\r\n        renderDelayedTemplates: function(e) {\r\n            this._updateContentPosition(true);\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _renderCore: function(e) {\r\n            var that = this;\r\n            var startRenderTime = new Date;\r\n            that.callBase.apply(that, arguments);\r\n            var dataSource = that._dataController._dataSource;\r\n            if (dataSource && e) {\r\n                var itemCount = e.items ? e.items.length : 20;\r\n                var viewportSize = that._dataController.viewportSize() || 20;\r\n                if (isVirtualRowRendering(that) && itemCount > 0) {\r\n                    dataSource._renderTime = (new Date - startRenderTime) * viewportSize / itemCount\r\n                } else {\r\n                    dataSource._renderTime = new Date - startRenderTime\r\n                }\r\n            }\r\n        },\r\n        _getRowElements: function(tableElement) {\r\n            var $rows = this.callBase(tableElement);\r\n            return $rows && $rows.not(\".\" + VIRTUAL_ROW_CLASS)\r\n        },\r\n        _removeRowsElements: function(contentTable, removeCount, changeType) {\r\n            var rowElements = this._getRowElements(contentTable).toArray();\r\n            if (\"append\" === changeType) {\r\n                rowElements = rowElements.slice(0, removeCount)\r\n            } else {\r\n                rowElements = rowElements.slice(-removeCount)\r\n            }\r\n            var errorHandlingController = this.getController(\"errorHandling\");\r\n            rowElements.map(rowElement => {\r\n                var $rowElement = $(rowElement);\r\n                errorHandlingController && errorHandlingController.removeErrorRow($rowElement.next());\r\n                $rowElement.remove()\r\n            })\r\n        },\r\n        _restoreErrorRow: function(contentTable) {\r\n            var editingController = this.getController(\"editing\");\r\n            editingController && editingController.hasChanges() && this._getRowElements(contentTable).each((_, item) => {\r\n                var rowOptions = $(item).data(\"options\");\r\n                if (rowOptions) {\r\n                    var change = editingController.getChangeByKey(rowOptions.key);\r\n                    change && editingController._showErrorRow(change)\r\n                }\r\n            })\r\n        },\r\n        _updateContent: function(tableElement, change) {\r\n            var $freeSpaceRowElements;\r\n            var contentElement = this._findContentElement();\r\n            var changeType = change && change.changeType;\r\n            if (\"append\" === changeType || \"prepend\" === changeType) {\r\n                var contentTable = contentElement.children().first();\r\n                var $tBodies = this._getBodies(tableElement);\r\n                if (1 === $tBodies.length) {\r\n                    this._getBodies(contentTable)[\"append\" === changeType ? \"append\" : \"prepend\"]($tBodies.children())\r\n                } else {\r\n                    $tBodies[\"append\" === changeType ? \"appendTo\" : \"prependTo\"](contentTable)\r\n                }\r\n                tableElement.remove();\r\n                $freeSpaceRowElements = this._getFreeSpaceRowElements(contentTable);\r\n                removeEmptyRows($freeSpaceRowElements, FREESPACE_CLASS);\r\n                if (change.removeCount) {\r\n                    this._removeRowsElements(contentTable, change.removeCount, changeType)\r\n                }\r\n                this._restoreErrorRow(contentTable)\r\n            } else {\r\n                this.callBase.apply(this, arguments)\r\n            }\r\n            this._updateBottomLoading()\r\n        },\r\n        _addVirtualRow: function($table, isFixed, location, position) {\r\n            if (!position) {\r\n                return\r\n            }\r\n            var $virtualRow = this._createEmptyRow(VIRTUAL_ROW_CLASS, isFixed, position);\r\n            $virtualRow = this._wrapRowIfNeed($table, $virtualRow);\r\n            this._appendEmptyRow($table, $virtualRow, location)\r\n        },\r\n        _getRowHeights: function() {\r\n            var rowHeights = this._getRowElements(this._tableElement).toArray().map((function(row) {\r\n                return getBoundingRect(row).height\r\n            }));\r\n            return rowHeights\r\n        },\r\n        _correctRowHeights: function(rowHeights) {\r\n            var dataController = this._dataController;\r\n            var dataSource = dataController._dataSource;\r\n            var correctedRowHeights = [];\r\n            var visibleRows = dataController.getVisibleRows();\r\n            var itemSize = 0;\r\n            var firstCountableItem = true;\r\n            for (var i = 0; i < rowHeights.length; i++) {\r\n                var currentItem = visibleRows[i];\r\n                if (!isDefined(currentItem)) {\r\n                    continue\r\n                }\r\n                if (isItemCountableByDataSource(currentItem, dataSource)) {\r\n                    if (firstCountableItem) {\r\n                        firstCountableItem = false\r\n                    } else {\r\n                        correctedRowHeights.push(itemSize);\r\n                        itemSize = 0\r\n                    }\r\n                }\r\n                itemSize += rowHeights[i]\r\n            }\r\n            itemSize > 0 && correctedRowHeights.push(itemSize);\r\n            return correctedRowHeights\r\n        },\r\n        _updateContentPosition: function(isRender) {\r\n            var dataController = this._dataController;\r\n            var rowHeight = this._rowHeight || 20;\r\n            dataController.viewportItemSize(rowHeight);\r\n            if (isVirtualMode(this) || isVirtualRowRendering(this)) {\r\n                if (!isRender) {\r\n                    var rowHeights = this._getRowHeights();\r\n                    var correctedRowHeights = this._correctRowHeights(rowHeights);\r\n                    dataController.setContentItemSizes(correctedRowHeights)\r\n                }\r\n                var top = dataController.getContentOffset(\"begin\");\r\n                var bottom = dataController.getContentOffset(\"end\");\r\n                var $tables = this.getTableElements();\r\n                var $virtualRows = $tables.children(\"tbody\").children(\".\" + VIRTUAL_ROW_CLASS);\r\n                removeEmptyRows($virtualRows, VIRTUAL_ROW_CLASS);\r\n                $tables.each((index, element) => {\r\n                    var isFixed = index > 0;\r\n                    this._isFixedTableRendering = isFixed;\r\n                    this._addVirtualRow($(element), isFixed, \"top\", top);\r\n                    this._addVirtualRow($(element), isFixed, \"bottom\", bottom);\r\n                    this._isFixedTableRendering = false\r\n                })\r\n            }\r\n        },\r\n        _isTableLinesDisplaysCorrect: function(table) {\r\n            var hasColumnLines = table.find(\".\" + COLUMN_LINES_CLASS).length > 0;\r\n            return hasColumnLines === this.option(\"showColumnLines\")\r\n        },\r\n        _isColumnElementsEqual: function($columns, $virtualColumns) {\r\n            var result = $columns.length === $virtualColumns.length;\r\n            if (result) {\r\n                each($columns, (function(index, element) {\r\n                    if (element.style.width !== $virtualColumns[index].style.width) {\r\n                        result = false;\r\n                        return result\r\n                    }\r\n                }))\r\n            }\r\n            return result\r\n        },\r\n        _renderVirtualTableContent: function(container, height) {\r\n            var columns = this._columnsController.getVisibleColumns();\r\n            var html = this._createColGroup(columns).prop(\"outerHTML\");\r\n            var freeSpaceCellsHtml = \"\";\r\n            var columnLinesClass = this.option(\"showColumnLines\") ? COLUMN_LINES_CLASS : \"\";\r\n            var createFreeSpaceRowHtml = function(height) {\r\n                return \"<tr style='height:\" + height + \"px;' class='\" + FREESPACE_CLASS + \" \" + ROW_CLASS + \" \" + columnLinesClass + \"' >\" + freeSpaceCellsHtml + \"</tr>\"\r\n            };\r\n            for (var i = 0; i < columns.length; i++) {\r\n                var classes = this._getCellClasses(columns[i]);\r\n                var classString = classes.length ? \" class='\" + classes.join(\" \") + \"'\" : \"\";\r\n                freeSpaceCellsHtml += \"<td\" + classString + \"/>\"\r\n            }\r\n            while (height > PIXELS_LIMIT) {\r\n                html += createFreeSpaceRowHtml(PIXELS_LIMIT);\r\n                height -= PIXELS_LIMIT\r\n            }\r\n            html += createFreeSpaceRowHtml(height);\r\n            container.addClass(this.addWidgetPrefix(TABLE_CLASS));\r\n            container.html(html)\r\n        },\r\n        _getCellClasses: function(column) {\r\n            var classes = [];\r\n            var cssClass = column.cssClass;\r\n            var isExpandColumn = \"expand\" === column.command;\r\n            cssClass && classes.push(cssClass);\r\n            isExpandColumn && classes.push(this.addWidgetPrefix(GROUP_SPACE_CLASS));\r\n            return classes\r\n        },\r\n        _findBottomLoadPanel: function($contentElement) {\r\n            var $element = $contentElement || this.element();\r\n            var $bottomLoadPanel = $element && $element.find(\".\" + this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS));\r\n            if ($bottomLoadPanel && $bottomLoadPanel.length) {\r\n                return $bottomLoadPanel\r\n            }\r\n        },\r\n        _updateBottomLoading: function() {\r\n            var virtualMode = isVirtualMode(this);\r\n            var appendMode = isAppendMode(this);\r\n            var showBottomLoading = !this._dataController.hasKnownLastPage() && this._dataController.isLoaded() && (virtualMode || appendMode);\r\n            var $contentElement = this._findContentElement();\r\n            var bottomLoadPanelElement = this._findBottomLoadPanel($contentElement);\r\n            if (showBottomLoading) {\r\n                if (!bottomLoadPanelElement) {\r\n                    $(\"<div>\").addClass(this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS)).append(this._createComponent($(\"<div>\"), LoadIndicator).$element()).appendTo($contentElement)\r\n                }\r\n            } else if (bottomLoadPanelElement) {\r\n                bottomLoadPanelElement.remove()\r\n            }\r\n        },\r\n        _handleScroll: function(e) {\r\n            var that = this;\r\n            if (that._hasHeight && that._rowHeight) {\r\n                that._dataController.setViewportPosition(e.scrollOffset.top)\r\n            }\r\n            that.callBase.apply(that, arguments)\r\n        },\r\n        _needUpdateRowHeight: function(itemsCount) {\r\n            var that = this;\r\n            return that.callBase.apply(that, arguments) || itemsCount > 0 && that.option(\"scrolling.mode\") === SCROLLING_MODE_INFINITE && that.option(\"scrolling.rowRenderingMode\") !== SCROLLING_MODE_VIRTUAL\r\n        },\r\n        _updateRowHeight: function() {\r\n            this.callBase.apply(this, arguments);\r\n            if (this._rowHeight) {\r\n                this._updateContentPosition();\r\n                var viewportHeight = this._hasHeight ? this.element().outerHeight() : $(getWindow()).outerHeight();\r\n                var dataController = this._dataController;\r\n                dataController.viewportSize(Math.ceil(viewportHeight / this._rowHeight));\r\n                if (this.option(NEW_SCROLLING_MODE) && !isDefined(dataController._loadViewportParams)) {\r\n                    var viewportSize = dataController.viewportSize();\r\n                    var viewportIsNotFilled = viewportSize > dataController.items().length && (isAppendMode(this) || dataController.totalItemsCount() > viewportSize);\r\n                    viewportIsNotFilled && dataController.loadViewport()\r\n                }\r\n            }\r\n        },\r\n        updateFreeSpaceRowHeight: function() {\r\n            var result = this.callBase.apply(this, arguments);\r\n            if (result) {\r\n                this._updateContentPosition()\r\n            }\r\n            return result\r\n        },\r\n        setLoading: function(isLoading, messageText) {\r\n            var dataController = this._dataController;\r\n            var hasBottomLoadPanel = dataController.pageIndex() > 0 && dataController.isLoaded() && !!this._findBottomLoadPanel();\r\n            if (this.option(NEW_SCROLLING_MODE) && isLoading && dataController.isViewportChanging()) {\r\n                return\r\n            }\r\n            if (hasBottomLoadPanel) {\r\n                isLoading = false\r\n            }\r\n            this.callBase.call(this, isLoading, messageText)\r\n        },\r\n        _resizeCore: function() {\r\n            var that = this;\r\n            var $element = that.element();\r\n            that.callBase();\r\n            if (that.component.$element() && !that._windowScroll && $element.closest(getWindow().document).length) {\r\n                that._windowScroll = subscribeToExternalScrollers($element, (function(scrollPos) {\r\n                    if (!that._hasHeight && that._rowHeight) {\r\n                        that._dataController.setViewportPosition(scrollPos)\r\n                    }\r\n                }), that.component.$element());\r\n                that.on(\"disposing\", (function() {\r\n                    that._windowScroll.dispose()\r\n                }))\r\n            }\r\n            that.loadIfNeed()\r\n        },\r\n        loadIfNeed: function() {\r\n            var _dataController$loadI;\r\n            var dataController = this._dataController;\r\n            null === dataController || void 0 === dataController ? void 0 : null === (_dataController$loadI = dataController.loadIfNeed) || void 0 === _dataController$loadI ? void 0 : _dataController$loadI.call(dataController)\r\n        },\r\n        setColumnWidths: function(widths) {\r\n            var scrollable = this.getScrollable();\r\n            var $content;\r\n            this.callBase.apply(this, arguments);\r\n            if (\"virtual\" === this.option(\"scrolling.mode\")) {\r\n                $content = scrollable ? $(scrollable.content()) : this.element();\r\n                this.callBase(widths, $content.children(\".\" + this.addWidgetPrefix(CONTENT_CLASS)).children(\":not(.\" + this.addWidgetPrefix(TABLE_CONTENT_CLASS) + \")\"))\r\n            }\r\n        },\r\n        dispose: function() {\r\n            clearTimeout(this._scrollTimeoutID);\r\n            this.callBase()\r\n        }\r\n    }\r\n}();\r\nexport var virtualScrollingModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            scrolling: {\r\n                timeout: 300,\r\n                updateTimeout: 300,\r\n                minTimeout: 0,\r\n                renderingThreshold: 100,\r\n                removeInvisiblePages: true,\r\n                rowPageSize: 5,\r\n                mode: \"standard\",\r\n                preloadEnabled: false,\r\n                rowRenderingMode: \"standard\",\r\n                loadTwoPagesOnStart: false,\r\n                newMode: false,\r\n                minGap: 1\r\n            }\r\n        }\r\n    },\r\n    extenders: {\r\n        dataSourceAdapter: VirtualScrollingDataSourceAdapterExtender,\r\n        controllers: {\r\n            data: function() {\r\n                var members = {\r\n                    _refreshDataSource: function() {\r\n                        var baseResult = this.callBase.apply(this, arguments) || (new Deferred).resolve().promise();\r\n                        baseResult.done(this.initVirtualRows.bind(this));\r\n                        return baseResult\r\n                    },\r\n                    getRowPageSize: function() {\r\n                        var rowPageSize = this.option(\"scrolling.rowPageSize\");\r\n                        var pageSize = this.pageSize();\r\n                        return pageSize && pageSize < rowPageSize ? pageSize : rowPageSize\r\n                    },\r\n                    reload: function() {\r\n                        var rowsScrollController = this._rowsScrollController || this._dataSource;\r\n                        var itemIndex = rowsScrollController && rowsScrollController.getItemIndexByPosition();\r\n                        var result = this.callBase.apply(this, arguments);\r\n                        return result && result.done(() => {\r\n                            if (isVirtualMode(this) || isVirtualRowRendering(this)) {\r\n                                var rowIndexOffset = this.getRowIndexOffset();\r\n                                var rowIndex = Math.floor(itemIndex) - rowIndexOffset;\r\n                                var component = this.component;\r\n                                var scrollable = component.getScrollable && component.getScrollable();\r\n                                var isSortingOperation = this.dataSource().operationTypes().sorting;\r\n                                if (scrollable && !isSortingOperation) {\r\n                                    var rowElement = component.getRowElement(rowIndex);\r\n                                    var $rowElement = rowElement && rowElement[0] && $(rowElement[0]);\r\n                                    var top = $rowElement && $rowElement.position().top;\r\n                                    var isChromeLatest = browser.chrome && browser.version >= 91;\r\n                                    var allowedTopOffset = browser.mozilla || browser.msie || isChromeLatest ? 1 : 0;\r\n                                    if (top > allowedTopOffset) {\r\n                                        top = Math.round(top + $rowElement.outerHeight() * (itemIndex % 1));\r\n                                        scrollable.scrollTo({\r\n                                            y: top\r\n                                        })\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    },\r\n                    initVirtualRows: function() {\r\n                        var virtualRowsRendering = isVirtualRowRendering(this);\r\n                        if (\"virtual\" !== this.option(\"scrolling.mode\") && true !== virtualRowsRendering || false === virtualRowsRendering || !this.option(\"scrolling.rowPageSize\")) {\r\n                            this._visibleItems = null;\r\n                            this._rowsScrollController = null;\r\n                            return\r\n                        }\r\n                        var pageIndex = !isVirtualMode(this) && this.pageIndex() >= this.pageCount() ? this.pageCount() - 1 : this.pageIndex();\r\n                        this._rowPageIndex = Math.ceil(pageIndex * this.pageSize() / this.getRowPageSize());\r\n                        this._uncountableItemCount = 0;\r\n                        this._visibleItems = this.option(NEW_SCROLLING_MODE) ? null : [];\r\n                        this._rowsScrollController = new VirtualScrollController(this.component, this._getRowsScrollDataOptions(), true);\r\n                        this._viewportChanging = false;\r\n                        this._rowsScrollController.positionChanged.add(() => {\r\n                            var _this$_dataSource;\r\n                            if (this.option(NEW_SCROLLING_MODE)) {\r\n                                this._viewportChanging = true;\r\n                                this.loadViewport();\r\n                                this._viewportChanging = false;\r\n                                return\r\n                            }\r\n                            null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.setViewportItemIndex(this._rowsScrollController.getViewportItemIndex())\r\n                        });\r\n                        if (this.isLoaded() && !this.option(NEW_SCROLLING_MODE)) {\r\n                            this._rowsScrollController.load()\r\n                        }\r\n                    },\r\n                    isViewportChanging: function() {\r\n                        return this._viewportChanging\r\n                    },\r\n                    _getRowsScrollDataOptions: function() {\r\n                        var that = this;\r\n                        var isItemCountable = function(item) {\r\n                            return isItemCountableByDataSource(item, that._dataSource)\r\n                        };\r\n                        return {\r\n                            pageSize: function() {\r\n                                return that.getRowPageSize()\r\n                            },\r\n                            totalItemsCount: function() {\r\n                                if (that.option(NEW_SCROLLING_MODE)) {\r\n                                    return that.totalItemsCount() + that._uncountableItemCount\r\n                                }\r\n                                return isVirtualMode(that) ? that.totalItemsCount() : that._items.filter(isItemCountable).length\r\n                            },\r\n                            hasKnownLastPage: function() {\r\n                                return true\r\n                            },\r\n                            pageIndex: function(index) {\r\n                                if (void 0 !== index) {\r\n                                    that._rowPageIndex = index\r\n                                }\r\n                                return that._rowPageIndex\r\n                            },\r\n                            isLoading: function() {\r\n                                return that.isLoading()\r\n                            },\r\n                            pageCount: function() {\r\n                                var pageCount = Math.ceil(this.totalItemsCount() / this.pageSize());\r\n                                return pageCount ? pageCount : 1\r\n                            },\r\n                            load: function() {\r\n                                if (that._rowsScrollController.pageIndex() >= this.pageCount()) {\r\n                                    that._rowPageIndex = this.pageCount() - 1;\r\n                                    that._rowsScrollController.pageIndex(that._rowPageIndex)\r\n                                }\r\n                                if (!this.items().length && this.totalItemsCount()) {\r\n                                    return\r\n                                }\r\n                                that._rowsScrollController.handleDataChanged(change => {\r\n                                    change = change || {};\r\n                                    change.changeType = change.changeType || \"refresh\";\r\n                                    change.items = change.items || that._visibleItems;\r\n                                    that._visibleItems.forEach((item, index) => {\r\n                                        item.rowIndex = index\r\n                                    });\r\n                                    that._fireChanged(change)\r\n                                })\r\n                            },\r\n                            updateLoading: function() {},\r\n                            itemsCount: function() {\r\n                                return this.items().filter(isItemCountable).length\r\n                            },\r\n                            correctCount: function(items, count, fromEnd) {\r\n                                return _correctCount(items, count, fromEnd, (item, isNextAfterLast, fromEnd) => {\r\n                                    if (item.isNewRow) {\r\n                                        return isNextAfterLast && !fromEnd\r\n                                    }\r\n                                    if (isNextAfterLast && fromEnd) {\r\n                                        return !item.isNewRow\r\n                                    }\r\n                                    return isItemCountable(item)\r\n                                })\r\n                            },\r\n                            items: function(countableOnly) {\r\n                                var dataSource = that.dataSource();\r\n                                var virtualItemsCount = dataSource && dataSource.virtualItemsCount();\r\n                                var begin = virtualItemsCount ? virtualItemsCount.begin : 0;\r\n                                var rowPageSize = that.getRowPageSize();\r\n                                var skip = that._rowPageIndex * rowPageSize - begin;\r\n                                var take = rowPageSize;\r\n                                var result = that._items;\r\n                                if (skip < 0) {\r\n                                    return []\r\n                                }\r\n                                if (skip) {\r\n                                    skip = this.correctCount(result, skip);\r\n                                    result = result.slice(skip)\r\n                                }\r\n                                if (take) {\r\n                                    take = this.correctCount(result, take);\r\n                                    result = result.slice(0, take)\r\n                                }\r\n                                return countableOnly ? result.filter(isItemCountable) : result\r\n                            },\r\n                            viewportItems: function(items) {\r\n                                if (items && !that.option(NEW_SCROLLING_MODE)) {\r\n                                    that._visibleItems = items\r\n                                }\r\n                                return that._visibleItems\r\n                            },\r\n                            onChanged: function() {},\r\n                            changingDuration: function(e) {\r\n                                var dataSource = that.dataSource();\r\n                                if (dataSource.isLoading() && !that.option(NEW_SCROLLING_MODE)) {\r\n                                    return LOAD_TIMEOUT\r\n                                }\r\n                                return (null === dataSource || void 0 === dataSource ? void 0 : dataSource._renderTime) || 0\r\n                            }\r\n                        }\r\n                    },\r\n                    _updateItemsCore: function(change) {\r\n                        var delta = this.getRowIndexDelta();\r\n                        this.callBase.apply(this, arguments);\r\n                        if (this.option(NEW_SCROLLING_MODE) && isVirtualRowRendering(this)) {\r\n                            return\r\n                        }\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            var visibleItems = this._visibleItems;\r\n                            var isRefresh = \"refresh\" === change.changeType || change.isLiveUpdate;\r\n                            if (\"append\" === change.changeType && change.items && !change.items.length) {\r\n                                return\r\n                            }\r\n                            if (isRefresh || \"append\" === change.changeType || \"prepend\" === change.changeType) {\r\n                                change.cancel = true;\r\n                                isRefresh && rowsScrollController.reset(true);\r\n                                rowsScrollController.load()\r\n                            } else {\r\n                                if (\"update\" === change.changeType) {\r\n                                    change.rowIndices.forEach((rowIndex, index) => {\r\n                                        var changeType = change.changeTypes[index];\r\n                                        var newItem = change.items[index];\r\n                                        if (\"update\" === changeType) {\r\n                                            visibleItems[rowIndex] = newItem\r\n                                        } else if (\"insert\" === changeType) {\r\n                                            visibleItems.splice(rowIndex, 0, newItem)\r\n                                        } else if (\"remove\" === changeType) {\r\n                                            visibleItems.splice(rowIndex, 1)\r\n                                        }\r\n                                    })\r\n                                } else {\r\n                                    visibleItems.forEach((item, index) => {\r\n                                        visibleItems[index] = this._items[index + delta] || visibleItems[index]\r\n                                    });\r\n                                    change.items = visibleItems\r\n                                }\r\n                                updateItemIndices(visibleItems)\r\n                            }\r\n                        }\r\n                    },\r\n                    _updateLoadViewportParams: function() {\r\n                        this._loadViewportParams = this._rowsScrollController.getViewportParams()\r\n                    },\r\n                    _afterProcessItems: function(items, change) {\r\n                        this._uncountableItemCount = 0;\r\n                        if (isDefined(this._loadViewportParams)) {\r\n                            this._uncountableItemCount = items.filter(item => !isItemCountableByDataSource(item, this._dataSource)).length;\r\n                            this._updateLoadViewportParams();\r\n                            var {\r\n                                skipForCurrentPage: skipForCurrentPage\r\n                            } = this.getLoadPageParams();\r\n                            change.repaintChangesOnly = \"refresh\" === change.changeType;\r\n                            return items.slice(skipForCurrentPage, skipForCurrentPage + this._loadViewportParams.take)\r\n                        }\r\n                        return this.callBase.apply(this, arguments)\r\n                    },\r\n                    _applyChange: function(change) {\r\n                        var that = this;\r\n                        var items = change.items;\r\n                        var changeType = change.changeType;\r\n                        var removeCount = change.removeCount;\r\n                        if (removeCount) {\r\n                            var fromEnd = \"prepend\" === changeType;\r\n                            removeCount = _correctCount(that._items, removeCount, fromEnd, (function(item, isNextAfterLast) {\r\n                                return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && (that._dataSource.isGroupItemCountable(item.data) || isNextAfterLast)\r\n                            }));\r\n                            change.removeCount = removeCount\r\n                        }\r\n                        switch (changeType) {\r\n                            case \"prepend\":\r\n                                that._items.unshift.apply(that._items, items);\r\n                                if (removeCount) {\r\n                                    that._items.splice(-removeCount)\r\n                                }\r\n                                break;\r\n                            case \"append\":\r\n                                that._items.push.apply(that._items, items);\r\n                                if (removeCount) {\r\n                                    that._items.splice(0, removeCount)\r\n                                }\r\n                                break;\r\n                            default:\r\n                                that.callBase(change)\r\n                        }\r\n                    },\r\n                    items: function(allItems) {\r\n                        return allItems ? this._items : this._visibleItems || this._items\r\n                    },\r\n                    getRowIndexDelta: function() {\r\n                        var visibleItems = this._visibleItems;\r\n                        var delta = 0;\r\n                        if (visibleItems && visibleItems[0]) {\r\n                            delta = this._items.indexOf(visibleItems[0])\r\n                        }\r\n                        return delta < 0 ? 0 : delta\r\n                    },\r\n                    getRowIndexOffset: function(byLoadedRows) {\r\n                        var offset = 0;\r\n                        var dataSource = this.dataSource();\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var virtualMode = isVirtualMode(this);\r\n                        var appendMode = isAppendMode(this);\r\n                        var newMode = this.option(NEW_SCROLLING_MODE);\r\n                        if (rowsScrollController && !byLoadedRows) {\r\n                            if (this.option(NEW_SCROLLING_MODE) && isDefined(this._loadViewportParams)) {\r\n                                var {\r\n                                    skipForCurrentPage: skipForCurrentPage,\r\n                                    pageIndex: pageIndex\r\n                                } = this.getLoadPageParams();\r\n                                offset = pageIndex * this.pageSize() + skipForCurrentPage\r\n                            } else {\r\n                                offset = rowsScrollController.beginPageIndex() * rowsScrollController.pageSize()\r\n                            }\r\n                        } else if ((virtualMode || appendMode && newMode) && dataSource) {\r\n                            offset = dataSource.beginPageIndex() * dataSource.pageSize()\r\n                        }\r\n                        return offset\r\n                    },\r\n                    viewportSize: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var dataSource = this._dataSource;\r\n                        var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportSize.apply(rowsScrollController, arguments);\r\n                        if (this.option(NEW_SCROLLING_MODE)) {\r\n                            return result\r\n                        }\r\n                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportSize.apply(dataSource, arguments)\r\n                    },\r\n                    viewportItemSize: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var dataSource = this._dataSource;\r\n                        var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportItemSize.apply(rowsScrollController, arguments);\r\n                        if (this.option(NEW_SCROLLING_MODE)) {\r\n                            return result\r\n                        }\r\n                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportItemSize.apply(dataSource, arguments)\r\n                    },\r\n                    setViewportPosition: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var dataSource = this._dataSource;\r\n                        if (rowsScrollController) {\r\n                            rowsScrollController.setViewportPosition.apply(rowsScrollController, arguments)\r\n                        } else {\r\n                            null === dataSource || void 0 === dataSource ? void 0 : dataSource.setViewportPosition.apply(dataSource, arguments)\r\n                        }\r\n                    },\r\n                    setContentItemSizes: function(sizes) {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var dataSource = this._dataSource;\r\n                        var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.setContentItemSizes(sizes);\r\n                        if (this.option(NEW_SCROLLING_MODE)) {\r\n                            return result\r\n                        }\r\n                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.setContentItemSizes(sizes)\r\n                    },\r\n                    getLoadPageParams: function() {\r\n                        var viewportParams = this._loadViewportParams;\r\n                        var pageIndex = Math.floor(viewportParams.skip / this.pageSize());\r\n                        var skipForCurrentPage = viewportParams.skip - pageIndex * this.pageSize();\r\n                        var loadPageCount = Math.ceil((skipForCurrentPage + viewportParams.take) / this.pageSize());\r\n                        return {\r\n                            pageIndex: pageIndex,\r\n                            loadPageCount: loadPageCount,\r\n                            skipForCurrentPage: skipForCurrentPage\r\n                        }\r\n                    },\r\n                    loadViewport: function() {\r\n                        if (isVirtualMode(this) || isAppendMode(this)) {\r\n                            this._updateLoadViewportParams();\r\n                            var {\r\n                                pageIndex: pageIndex,\r\n                                loadPageCount: loadPageCount\r\n                            } = this.getLoadPageParams();\r\n                            var dataSourceAdapter = this._dataSource;\r\n                            if (pageIndex !== dataSourceAdapter.pageIndex() || loadPageCount !== dataSourceAdapter.loadPageCount()) {\r\n                                dataSourceAdapter.pageIndex(pageIndex);\r\n                                dataSourceAdapter.loadPageCount(loadPageCount);\r\n                                this.load()\r\n                            } else if (!this._isLoading) {\r\n                                this.updateItems()\r\n                            }\r\n                        }\r\n                    },\r\n                    loadIfNeed: function() {\r\n                        if (this.option(NEW_SCROLLING_MODE)) {\r\n                            return\r\n                        }\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        rowsScrollController && rowsScrollController.loadIfNeed();\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.loadIfNeed()\r\n                    },\r\n                    getItemSize: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            return rowsScrollController.getItemSize.apply(rowsScrollController, arguments)\r\n                        }\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.getItemSize.apply(dataSource, arguments)\r\n                    },\r\n                    getItemSizes: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            return rowsScrollController.getItemSizes.apply(rowsScrollController, arguments)\r\n                        }\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.getItemSizes.apply(dataSource, arguments)\r\n                    },\r\n                    getContentOffset: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            return rowsScrollController.getContentOffset.apply(rowsScrollController, arguments)\r\n                        }\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.getContentOffset.apply(dataSource, arguments)\r\n                    },\r\n                    refresh: function(options) {\r\n                        var dataSource = this._dataSource;\r\n                        if (dataSource && options && options.load && isAppendMode(this)) {\r\n                            dataSource.resetCurrentTotalCount()\r\n                        }\r\n                        return this.callBase.apply(this, arguments)\r\n                    },\r\n                    dispose: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        rowsScrollController && rowsScrollController.dispose();\r\n                        this.callBase.apply(this, arguments)\r\n                    },\r\n                    topItemIndex: function() {\r\n                        var _this$_loadViewportPa;\r\n                        return null === (_this$_loadViewportPa = this._loadViewportParams) || void 0 === _this$_loadViewportPa ? void 0 : _this$_loadViewportPa.skip\r\n                    },\r\n                    bottomItemIndex: function() {\r\n                        var viewportParams = this._loadViewportParams;\r\n                        return viewportParams && viewportParams.skip + viewportParams.take\r\n                    },\r\n                    virtualItemsCount: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            return rowsScrollController.virtualItemsCount.apply(rowsScrollController, arguments)\r\n                        }\r\n                        var dataSource = this._dataSource;\r\n                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount.apply(dataSource, arguments)\r\n                    }\r\n                };\r\n                gridCoreUtils.proxyMethod(members, \"getVirtualContentSize\");\r\n                gridCoreUtils.proxyMethod(members, \"setViewportItemIndex\");\r\n                return members\r\n            }(),\r\n            resizing: {\r\n                resize: function() {\r\n                    var that = this;\r\n                    var callBase = that.callBase;\r\n                    var result;\r\n                    if (isVirtualMode(that) || isVirtualRowRendering(that)) {\r\n                        clearTimeout(that._resizeTimeout);\r\n                        var diff = new Date - that._lastTime;\r\n                        var updateTimeout = that.option(\"scrolling.updateTimeout\");\r\n                        if (that._lastTime && diff < updateTimeout) {\r\n                            result = new Deferred;\r\n                            that._resizeTimeout = setTimeout((function() {\r\n                                callBase.apply(that).done(result.resolve).fail(result.reject);\r\n                                that._lastTime = new Date\r\n                            }), updateTimeout);\r\n                            that._lastTime = new Date\r\n                        } else {\r\n                            result = callBase.apply(that);\r\n                            if (that._dataController.isLoaded()) {\r\n                                that._lastTime = new Date\r\n                            }\r\n                        }\r\n                    } else {\r\n                        result = callBase.apply(that)\r\n                    }\r\n                    return result\r\n                },\r\n                dispose: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    clearTimeout(this._resizeTimeout)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: VirtualScrollingRowsViewExtender\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}