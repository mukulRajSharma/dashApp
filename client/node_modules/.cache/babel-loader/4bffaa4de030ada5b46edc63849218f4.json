{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.rows.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../core/renderer\";\nimport { getWindow, hasWindow } from \"../../core/utils/window\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { deferRender, deferUpdate } from \"../../core/utils/common\";\nimport { setHeight } from \"../../core/utils/style\";\nimport { isDefined, isNumeric, isString } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getBoundingRect, getDefaultAlignment } from \"../../core/utils/position\";\nimport { isEmpty } from \"../../core/utils/string\";\nimport { compileGetter } from \"../../core/utils/data\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { ColumnsView } from \"./ui.grid_core.columns_view\";\nimport Scrollable from \"../scroll_view/ui.scrollable\";\nimport { removeEvent } from \"../../core/remove_event\";\nimport messageLocalization from \"../../localization/message\";\nimport browser from \"../../core/utils/browser\";\nimport getScrollRtlBehavior from \"../../core/utils/scroll_rtl_behavior\";\nvar ROWS_VIEW_CLASS = \"rowsview\";\nvar CONTENT_CLASS = \"content\";\nvar NOWRAP_CLASS = \"nowrap\";\nvar GROUP_ROW_CLASS = \"dx-group-row\";\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar FREE_SPACE_CLASS = \"dx-freespace-row\";\nvar ROW_LINES_CLASS = \"dx-row-lines\";\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\nvar ROW_ALTERNATION_CLASS = \"dx-row-alt\";\nvar LAST_ROW_BORDER = \"dx-last-row-border\";\nvar EMPTY_CLASS = \"dx-empty\";\nvar ROW_INSERTED_ANIMATION_CLASS = \"row-inserted-animation\";\nvar LOADPANEL_HIDE_TIMEOUT = 200;\n\nfunction getMaxHorizontalScrollOffset(scrollable) {\n  return scrollable ? Math.round(scrollable.scrollWidth() - scrollable.clientWidth()) : 0;\n}\n\nexport var rowsModule = {\n  defaultOptions: function () {\n    return {\n      hoverStateEnabled: false,\n      scrolling: {\n        useNative: \"auto\"\n      },\n      loadPanel: {\n        enabled: \"auto\",\n        text: messageLocalization.format(\"Loading\"),\n        width: 200,\n        height: 90,\n        showIndicator: true,\n        indicatorSrc: \"\",\n        showPane: true\n      },\n      rowTemplate: null,\n      columnAutoWidth: false,\n      noDataText: messageLocalization.format(\"dxDataGrid-noDataText\"),\n      wordWrapEnabled: false,\n      showColumnLines: true,\n      showRowLines: false,\n      rowAlternationEnabled: false,\n      activeStateEnabled: false,\n      twoWayBindingEnabled: true\n    };\n  },\n  views: {\n    rowsView: ColumnsView.inherit(function () {\n      var defaultCellTemplate = function ($container, options) {\n        var isDataTextEmpty = isEmpty(options.text) && \"data\" === options.rowType;\n        var text = options.text;\n        var container = $container.get(0);\n\n        if (isDataTextEmpty) {\n          gridCoreUtils.setEmptyText($container);\n        } else if (options.column.encodeHtml) {\n          container.textContent = text;\n        } else {\n          container.innerHTML = text;\n        }\n      };\n\n      return {\n        _getDefaultTemplate: function (column) {\n          switch (column.command) {\n            case \"empty\":\n              return function (container) {\n                container.html(\"&nbsp;\");\n              };\n\n            default:\n              return defaultCellTemplate;\n          }\n        },\n        _getDefaultGroupTemplate: function (column) {\n          var summaryTexts = this.option(\"summary.texts\");\n          return function ($container, options) {\n            var data = options.data;\n            var text = options.column.caption + \": \" + options.text;\n            var container = $container.get(0);\n\n            if (options.summaryItems && options.summaryItems.length) {\n              text += \" \" + gridCoreUtils.getGroupRowSummaryText(options.summaryItems, summaryTexts);\n            }\n\n            if (data) {\n              if (options.groupContinuedMessage && options.groupContinuesMessage) {\n                text += \" (\" + options.groupContinuedMessage + \". \" + options.groupContinuesMessage + \")\";\n              } else if (options.groupContinuesMessage) {\n                text += \" (\" + options.groupContinuesMessage + \")\";\n              } else if (options.groupContinuedMessage) {\n                text += \" (\" + options.groupContinuedMessage + \")\";\n              }\n            }\n\n            $container.addClass(GROUP_CELL_CLASS);\n\n            if (column.encodeHtml) {\n              container.textContent = text;\n            } else {\n              container.innerHTML = text;\n            }\n          };\n        },\n        _update: function () {},\n        _getCellTemplate: function (options) {\n          var column = options.column;\n          var template;\n\n          if (\"group\" === options.rowType && isDefined(column.groupIndex) && !column.showWhenGrouped && !column.command) {\n            template = column.groupCellTemplate || {\n              allowRenderToDetachedContainer: true,\n              render: this._getDefaultGroupTemplate(column)\n            };\n          } else if ((\"data\" === options.rowType || column.command) && column.cellTemplate) {\n            template = column.cellTemplate;\n          } else {\n            template = {\n              allowRenderToDetachedContainer: true,\n              render: this._getDefaultTemplate(column)\n            };\n          }\n\n          return template;\n        },\n        _createRow: function (row) {\n          var $row = this.callBase(row);\n\n          if (row) {\n            var isGroup = \"group\" === row.rowType;\n            var isDataRow = \"data\" === row.rowType;\n            isDataRow && $row.addClass(DATA_ROW_CLASS);\n            isDataRow && this.option(\"showRowLines\") && $row.addClass(ROW_LINES_CLASS);\n            this.option(\"showColumnLines\") && $row.addClass(COLUMN_LINES_CLASS);\n\n            if (false === row.visible) {\n              $row.hide();\n            }\n\n            if (isGroup) {\n              $row.addClass(GROUP_ROW_CLASS);\n              var isRowExpanded = row.isExpanded;\n              this.setAria(\"role\", \"row\", $row);\n              this.setAria(\"expanded\", isDefined(isRowExpanded) && isRowExpanded.toString(), $row);\n            }\n          }\n\n          return $row;\n        },\n        _rowPrepared: function ($row, rowOptions, row) {\n          if (\"data\" === rowOptions.rowType) {\n            if (this.option(\"rowAlternationEnabled\")) {\n              this._isAltRow(row) && $row.addClass(ROW_ALTERNATION_CLASS);\n              rowOptions.watch && rowOptions.watch(() => this._isAltRow(row), value => {\n                $row.toggleClass(ROW_ALTERNATION_CLASS, value);\n              });\n            }\n\n            this._setAriaRowIndex(rowOptions, $row);\n\n            rowOptions.watch && rowOptions.watch(() => rowOptions.rowIndex, () => this._setAriaRowIndex(rowOptions, $row));\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _setAriaRowIndex: function (row, $row) {\n          var component = this.component;\n          var isPagerMode = \"standard\" === component.option(\"scrolling.mode\") && \"virtual\" !== component.option(\"scrolling.rowRenderingMode\");\n          var rowIndex = row.rowIndex + 1;\n\n          if (isPagerMode) {\n            rowIndex = component.pageIndex() * component.pageSize() + rowIndex;\n          } else {\n            rowIndex += this._dataController.getRowIndexOffset();\n          }\n\n          this.setAria(\"rowindex\", rowIndex, $row);\n        },\n        _afterRowPrepared: function (e) {\n          var arg = e.args[0];\n          var dataController = this._dataController;\n          var row = dataController.getVisibleRows()[arg.rowIndex];\n          var watch = this.option(\"integrationOptions.watchMethod\");\n\n          if (!arg.data || \"data\" !== arg.rowType || arg.isNewRow || !this.option(\"twoWayBindingEnabled\") || !watch || !row) {\n            return;\n          }\n\n          var dispose = watch(() => dataController.generateDataValues(arg.data, arg.columns), () => {\n            dataController.repaintRows([row.rowIndex], this.option(\"repaintChangesOnly\"));\n          }, {\n            deep: true,\n            skipImmediate: true\n          });\n          eventsEngine.on(arg.rowElement, removeEvent, dispose);\n        },\n        _renderScrollable: function (force) {\n          var $element = this.element();\n\n          if (!$element.children().length) {\n            $element.append(\"<div>\");\n          }\n\n          if (force || !this._loadPanel) {\n            this._renderLoadPanel($element, $element.parent(), this._dataController.isLocalStore());\n          }\n\n          if ((force || !this.getScrollable()) && this._dataController.isLoaded()) {\n            var columns = this.getColumns();\n            var allColumnsHasWidth = true;\n\n            for (var i = 0; i < columns.length; i++) {\n              if (!columns[i].width && !columns[i].minWidth) {\n                allColumnsHasWidth = false;\n                break;\n              }\n            }\n\n            if (this.option(\"columnAutoWidth\") || this._hasHeight || allColumnsHasWidth || this._columnsController._isColumnFixing()) {\n              this._renderScrollableCore($element);\n            }\n          }\n        },\n        _handleScroll: function (e) {\n          var rtlEnabled = this.option(\"rtlEnabled\");\n          var isNativeScrolling = e.component.option(\"useNative\");\n          this._isScrollByEvent = !!e.event;\n          this._scrollTop = e.scrollOffset.top;\n          this._scrollLeft = e.scrollOffset.left;\n          var scrollLeft = e.scrollOffset.left;\n\n          if (rtlEnabled) {\n            this._scrollRight = getMaxHorizontalScrollOffset(e.component) - this._scrollLeft;\n\n            if (isNativeScrolling) {\n              scrollLeft = getScrollRtlBehavior().positive ? this._scrollRight : -this._scrollRight;\n            }\n\n            if (!this.isScrollbarVisible(true)) {\n              this._scrollLeft = -1;\n            }\n          }\n\n          this.scrollChanged.fire(_extends({}, e.scrollOffset, {\n            left: scrollLeft\n          }), this.name);\n        },\n        _renderScrollableCore: function ($element) {\n          var dxScrollableOptions = this._createScrollableOptions();\n\n          var scrollHandler = this._handleScroll.bind(this);\n\n          dxScrollableOptions.onScroll = scrollHandler;\n          this._scrollable = this._createComponent($element, Scrollable, dxScrollableOptions);\n          this._scrollableContainer = this._scrollable && this._scrollable._$container;\n        },\n        _renderLoadPanel: gridCoreUtils.renderLoadPanel,\n        _renderContent: function (contentElement, tableElement) {\n          contentElement.empty().append(tableElement);\n          return this._findContentElement();\n        },\n        _updateContent: function (newTableElement, change) {\n          var that = this;\n          var tableElement = that.getTableElement();\n\n          var contentElement = that._findContentElement();\n\n          var changeType = change && change.changeType;\n          var executors = [];\n          var highlightChanges = this.option(\"highlightChanges\");\n          var rowInsertedClass = this.addWidgetPrefix(ROW_INSERTED_ANIMATION_CLASS);\n\n          switch (changeType) {\n            case \"update\":\n              each(change.rowIndices, function (index, rowIndex) {\n                var $newRowElement = that._getRowElements(newTableElement).eq(index);\n\n                var changeType = change.changeTypes && change.changeTypes[index];\n                var item = change.items && change.items[index];\n                executors.push(function () {\n                  var $rowsElement = that._getRowElements();\n\n                  var $rowElement = $rowsElement.eq(rowIndex);\n\n                  switch (changeType) {\n                    case \"update\":\n                      if (item) {\n                        var columnIndices = change.columnIndices && change.columnIndices[index];\n\n                        if (isDefined(item.visible) && item.visible !== $rowElement.is(\":visible\")) {\n                          $rowElement.toggle(item.visible);\n                        } else if (columnIndices) {\n                          that._updateCells($rowElement, $newRowElement, columnIndices);\n                        } else {\n                          $rowElement.replaceWith($newRowElement);\n                        }\n                      }\n\n                      break;\n\n                    case \"insert\":\n                      if (!$rowsElement.length) {\n                        if (tableElement) {\n                          var target = $newRowElement.is(\"tbody\") ? tableElement : tableElement.children(\"tbody\");\n                          $newRowElement.prependTo(target);\n                        }\n                      } else if ($rowElement.length) {\n                        $newRowElement.insertBefore($rowElement);\n                      } else {\n                        $newRowElement.insertAfter($rowsElement.last());\n                      }\n\n                      if (highlightChanges && change.isLiveUpdate) {\n                        $newRowElement.addClass(rowInsertedClass);\n                      }\n\n                      break;\n\n                    case \"remove\":\n                      $rowElement.remove();\n                  }\n                });\n              });\n              each(executors, function () {\n                this();\n              });\n              newTableElement.remove();\n              break;\n\n            default:\n              that.setTableElement(newTableElement);\n              contentElement.addClass(that.addWidgetPrefix(CONTENT_CLASS));\n\n              that._renderContent(contentElement, newTableElement);\n\n          }\n        },\n        _createEmptyRow: function (className, isFixed, height) {\n          var $cell;\n\n          var $row = this._createRow();\n\n          var columns = isFixed ? this.getFixedColumns() : this.getColumns();\n          $row.addClass(className).toggleClass(COLUMN_LINES_CLASS, this.option(\"showColumnLines\"));\n\n          for (var i = 0; i < columns.length; i++) {\n            $cell = this._createCell({\n              column: columns[i],\n              rowType: \"freeSpace\",\n              columnIndex: i,\n              columns: columns\n            });\n            isNumeric(height) && $cell.css(\"height\", height);\n            $row.append($cell);\n          }\n\n          this.setAria(\"role\", \"presentation\", $row);\n          return $row;\n        },\n        _appendEmptyRow: function ($table, $emptyRow, location) {\n          var $tBodies = this._getBodies($table);\n\n          var isTableContainer = !$tBodies.length || $emptyRow.is(\"tbody\");\n          var $container = isTableContainer ? $table : $tBodies;\n\n          if (\"top\" === location) {\n            $container.first().prepend($emptyRow);\n\n            if (isTableContainer) {\n              var $colgroup = $container.children(\"colgroup\");\n              $container.prepend($colgroup);\n            }\n          } else {\n            $container.last().append($emptyRow);\n          }\n        },\n        _renderFreeSpaceRow: function ($tableElement) {\n          var $freeSpaceRowElement = this._createEmptyRow(FREE_SPACE_CLASS);\n\n          $freeSpaceRowElement = this._wrapRowIfNeed($tableElement, $freeSpaceRowElement);\n\n          this._appendEmptyRow($tableElement, $freeSpaceRowElement);\n        },\n        _checkRowKeys: function (options) {\n          var that = this;\n\n          var rows = that._getRows(options);\n\n          var keyExpr = that._dataController.store() && that._dataController.store().key();\n\n          keyExpr && rows.some(function (row) {\n            if (\"data\" === row.rowType && void 0 === row.key) {\n              that._dataController.fireError(\"E1046\", keyExpr);\n\n              return true;\n            }\n          });\n        },\n        _needUpdateRowHeight: function (itemsCount) {\n          return itemsCount > 0 && !this._rowHeight;\n        },\n        _getRowsHeight: function ($tableElement) {\n          var $rowElements = $tableElement.children(\"tbody\").children().not(\".dx-virtual-row\").not(\".\" + FREE_SPACE_CLASS);\n          return $rowElements.toArray().reduce(function (sum, row) {\n            return sum + getBoundingRect(row).height;\n          }, 0);\n        },\n        _updateRowHeight: function () {\n          var $tableElement = this.getTableElement();\n\n          var itemsCount = this._dataController.items().length;\n\n          if ($tableElement && this._needUpdateRowHeight(itemsCount)) {\n            var rowsHeight = this._getRowsHeight($tableElement);\n\n            this._rowHeight = rowsHeight / itemsCount;\n          }\n        },\n        _findContentElement: function () {\n          var $content = this.element();\n          var scrollable = this.getScrollable();\n\n          if ($content) {\n            if (scrollable) {\n              $content = $(scrollable.content());\n            }\n\n            return $content.children().first();\n          }\n        },\n        _getRowElements: function (tableElement) {\n          var $rows = this.callBase(tableElement);\n          return $rows && $rows.not(\".\" + FREE_SPACE_CLASS);\n        },\n        _getFreeSpaceRowElements: function ($table) {\n          var tableElements = $table || this.getTableElements();\n          return tableElements && tableElements.children(\"tbody\").children(\".\" + FREE_SPACE_CLASS);\n        },\n        _getNoDataText: function () {\n          return this.option(\"noDataText\");\n        },\n        _rowClick: function (e) {\n          var item = this._dataController.items()[e.rowIndex] || {};\n          this.executeAction(\"onRowClick\", extend({\n            evaluate: function (expr) {\n              var getter = compileGetter(expr);\n              return getter(item.data);\n            }\n          }, e, item));\n        },\n        _rowDblClick: function (e) {\n          var item = this._dataController.items()[e.rowIndex] || {};\n          this.executeAction(\"onRowDblClick\", extend({}, e, item));\n        },\n        _getColumnsCountBeforeGroups: function (columns) {\n          for (var i = 0; i < columns.length; i++) {\n            if (\"groupExpand\" === columns[i].type) {\n              return i;\n            }\n          }\n\n          return 0;\n        },\n        _getGroupCellOptions: function (options) {\n          var columnsCountBeforeGroups = this._getColumnsCountBeforeGroups(options.columns);\n\n          var columnIndex = (options.row.groupIndex || 0) + columnsCountBeforeGroups;\n          return {\n            columnIndex: columnIndex,\n            colspan: options.columns.length - columnIndex - 1\n          };\n        },\n        _renderCells: function ($row, options) {\n          if (\"group\" === options.row.rowType) {\n            this._renderGroupedCells($row, options);\n          } else if (options.row.values) {\n            this.callBase($row, options);\n          }\n        },\n        _renderGroupedCells: function ($row, options) {\n          var row = options.row;\n          var expandColumn;\n          var columns = options.columns;\n          var rowIndex = row.rowIndex;\n          var isExpanded;\n\n          var groupCellOptions = this._getGroupCellOptions(options);\n\n          for (var i = 0; i <= groupCellOptions.columnIndex; i++) {\n            if (i === groupCellOptions.columnIndex && columns[i].allowCollapsing && \"infinite\" !== options.scrollingMode) {\n              isExpanded = !!row.isExpanded;\n              expandColumn = columns[i];\n            } else {\n              isExpanded = null;\n              expandColumn = {\n                command: \"expand\",\n                cssClass: columns[i].cssClass\n              };\n            }\n\n            this._renderCell($row, {\n              value: isExpanded,\n              row: row,\n              rowIndex: rowIndex,\n              column: expandColumn,\n              columnIndex: i\n            });\n          }\n\n          var groupColumnAlignment = getDefaultAlignment(this.option(\"rtlEnabled\"));\n          var groupColumn = extend({}, columns[groupCellOptions.columnIndex], {\n            command: null,\n            cssClass: null,\n            width: null,\n            showWhenGrouped: false,\n            alignment: groupColumnAlignment\n          });\n\n          if (groupCellOptions.colspan > 1) {\n            groupColumn.colspan = groupCellOptions.colspan;\n          }\n\n          this._renderCell($row, {\n            value: row.values[row.groupIndex],\n            row: row,\n            rowIndex: rowIndex,\n            column: groupColumn,\n            columnIndex: groupCellOptions.columnIndex\n          });\n        },\n        _renderRows: function ($table, options) {\n          var scrollingMode = this.option(\"scrolling.mode\");\n          this.callBase($table, extend({\n            scrollingMode: scrollingMode\n          }, options));\n\n          this._checkRowKeys(options.change);\n\n          this._renderFreeSpaceRow($table);\n\n          if (!this._hasHeight) {\n            this.updateFreeSpaceRowHeight($table);\n          }\n        },\n        _renderRow: function ($table, options) {\n          var row = options.row;\n          var rowTemplate = this.option(\"rowTemplate\");\n\n          if ((\"data\" === row.rowType || \"group\" === row.rowType) && !isDefined(row.groupIndex) && rowTemplate) {\n            this.renderTemplate($table, rowTemplate, extend({\n              columns: options.columns\n            }, row), true);\n          } else {\n            this.callBase($table, options);\n          }\n        },\n        _renderTable: function (options) {\n          var that = this;\n          var $table = that.callBase(options);\n\n          if (!isDefined(that.getTableElement())) {\n            that.setTableElement($table);\n\n            that._renderScrollable(true);\n\n            that.resizeCompleted.add(function resizeCompletedHandler() {\n              var scrollableInstance = that.getScrollable();\n\n              if (scrollableInstance && that.element().closest(getWindow().document).length) {\n                that.resizeCompleted.remove(resizeCompletedHandler);\n\n                scrollableInstance._visibilityChanged(true);\n              }\n            });\n          } else {\n            that._renderScrollable();\n          }\n\n          return $table;\n        },\n        _createTable: function () {\n          var $table = this.callBase.apply(this, arguments);\n\n          if (this.option(\"rowTemplate\")) {\n            $table.appendTo(this.component.$element());\n          }\n\n          return $table;\n        },\n        _renderCore: function (change) {\n          var $element = this.element();\n          $element.addClass(this.addWidgetPrefix(ROWS_VIEW_CLASS)).toggleClass(this.addWidgetPrefix(NOWRAP_CLASS), !this.option(\"wordWrapEnabled\"));\n          $element.toggleClass(EMPTY_CLASS, 0 === this._dataController.items().length);\n          this.setAria(\"role\", \"presentation\", $element);\n\n          var $table = this._renderTable({\n            change: change\n          });\n\n          this._updateContent($table, change);\n\n          this.callBase(change);\n          this._lastColumnWidths = null;\n        },\n        _getRows: function (change) {\n          return change && change.items || this._dataController.items();\n        },\n        _getCellOptions: function (options) {\n          var column = options.column;\n          var row = options.row;\n          var data = row.data;\n          var summaryCells = row && row.summaryCells;\n          var value = options.value;\n          var displayValue = gridCoreUtils.getDisplayValue(column, value, data, row.rowType);\n          var parameters = this.callBase(options);\n          parameters.value = value;\n          parameters.oldValue = options.oldValue;\n          parameters.displayValue = displayValue;\n          parameters.row = row;\n          parameters.key = row.key;\n          parameters.data = data;\n          parameters.rowType = row.rowType;\n          parameters.values = row.values;\n          parameters.text = !column.command ? gridCoreUtils.formatValue(displayValue, column) : \"\";\n          parameters.rowIndex = row.rowIndex;\n          parameters.summaryItems = summaryCells && summaryCells[options.columnIndex];\n          parameters.resized = column.resizedCallbacks;\n\n          if (isDefined(column.groupIndex) && !column.command) {\n            var groupingTextsOptions = this.option(\"grouping.texts\");\n            var scrollingMode = this.option(\"scrolling.mode\");\n\n            if (\"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\n              parameters.groupContinuesMessage = data && data.isContinuationOnNextPage && groupingTextsOptions && groupingTextsOptions.groupContinuesMessage;\n              parameters.groupContinuedMessage = data && data.isContinuation && groupingTextsOptions && groupingTextsOptions.groupContinuedMessage;\n            }\n          }\n\n          return parameters;\n        },\n        _setRowsOpacityCore: function ($rows, visibleColumns, columnIndex, value) {\n          var columnsController = this._columnsController;\n          var columns = columnsController.getColumns();\n          var column = columns && columns[columnIndex];\n          var columnID = column && column.isBand && column.index;\n          each($rows, function (rowIndex, row) {\n            if (!$(row).hasClass(GROUP_ROW_CLASS)) {\n              for (var i = 0; i < visibleColumns.length; i++) {\n                if (isNumeric(columnID) && columnsController.isParentBandColumn(visibleColumns[i].index, columnID) || visibleColumns[i].index === columnIndex) {\n                  $rows.eq(rowIndex).children().eq(i).css({\n                    opacity: value\n                  });\n\n                  if (!isNumeric(columnID)) {\n                    break;\n                  }\n                }\n              }\n            }\n          });\n        },\n        _getDevicePixelRatio: function () {\n          return getWindow().devicePixelRatio;\n        },\n        renderNoDataText: gridCoreUtils.renderNoDataText,\n        getCellOptions: function (rowIndex, columnIdentifier) {\n          var rowOptions = this._dataController.items()[rowIndex];\n\n          var cellOptions;\n          var column;\n\n          if (rowOptions) {\n            if (isString(columnIdentifier)) {\n              column = this._columnsController.columnOption(columnIdentifier);\n            } else {\n              column = this._columnsController.getVisibleColumns()[columnIdentifier];\n            }\n\n            if (column) {\n              cellOptions = this._getCellOptions({\n                value: column.calculateCellValue(rowOptions.data),\n                rowIndex: rowOptions.rowIndex,\n                row: rowOptions,\n                column: column\n              });\n            }\n          }\n\n          return cellOptions;\n        },\n        getRow: function (index) {\n          if (index >= 0) {\n            var rows = this._getRowElements();\n\n            if (rows.length > index) {\n              return $(rows[index]);\n            }\n          }\n        },\n        updateFreeSpaceRowHeight: function ($table) {\n          var dataController = this._dataController;\n          var itemCount = dataController.items(true).length;\n\n          var contentElement = this._findContentElement();\n\n          var freeSpaceRowElements = this._getFreeSpaceRowElements($table);\n\n          if (freeSpaceRowElements && contentElement && dataController.totalCount() >= 0) {\n            var isFreeSpaceRowVisible = false;\n\n            if (itemCount > 0) {\n              if (!this._hasHeight) {\n                var freeSpaceRowCount = dataController.pageSize() - itemCount;\n                var scrollingMode = this.option(\"scrolling.mode\");\n\n                if (freeSpaceRowCount > 0 && dataController.pageCount() > 1 && \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\n                  setHeight(freeSpaceRowElements, freeSpaceRowCount * this._rowHeight);\n                  isFreeSpaceRowVisible = true;\n                }\n\n                if (!isFreeSpaceRowVisible && $table) {\n                  setHeight(freeSpaceRowElements, 0);\n                } else {\n                  freeSpaceRowElements.toggle(isFreeSpaceRowVisible);\n                }\n\n                this._updateLastRowBorder(isFreeSpaceRowVisible);\n              } else {\n                freeSpaceRowElements.hide();\n                deferUpdate(() => {\n                  var scrollbarWidth = this.getScrollbarWidth(true);\n                  var elementHeightWithoutScrollbar = this.element().height() - scrollbarWidth;\n                  var contentHeight = contentElement.outerHeight();\n                  var showFreeSpaceRow = elementHeightWithoutScrollbar - contentHeight > 0;\n\n                  var rowsHeight = this._getRowsHeight(contentElement.children().first());\n\n                  var $tableElement = $table || this.getTableElements();\n                  var borderTopWidth = Math.ceil(parseFloat($tableElement.css(\"borderTopWidth\")));\n\n                  var heightCorrection = this._getHeightCorrection();\n\n                  var resultHeight = elementHeightWithoutScrollbar - rowsHeight - borderTopWidth - heightCorrection;\n\n                  if (showFreeSpaceRow) {\n                    deferRender(() => {\n                      freeSpaceRowElements.css(\"height\", resultHeight);\n                      isFreeSpaceRowVisible = true;\n                      freeSpaceRowElements.show();\n                    });\n                  }\n\n                  deferRender(() => this._updateLastRowBorder(isFreeSpaceRowVisible));\n                });\n              }\n            } else {\n              freeSpaceRowElements.css(\"height\", 0);\n              freeSpaceRowElements.show();\n\n              this._updateLastRowBorder(true);\n            }\n          }\n        },\n        _getHeightCorrection: function () {\n          var isZoomedWebkit = browser.webkit && this._getDevicePixelRatio() >= 2;\n          var isChromeLatest = browser.chrome && browser.version >= 91;\n          var hasExtraBorderTop = browser.mozilla && browser.version >= 70 && !this.option(\"showRowLines\");\n          return isZoomedWebkit || hasExtraBorderTop || isChromeLatest ? 1 : 0;\n        },\n        _columnOptionChanged: function (e) {\n          var optionNames = e.optionNames;\n\n          if (e.changeTypes.grouping) {\n            return;\n          }\n\n          if (optionNames.width || optionNames.visibleWidth) {\n            this.callBase(e);\n\n            this._fireColumnResizedCallbacks();\n          }\n        },\n        getScrollable: function () {\n          return this._scrollable;\n        },\n        init: function () {\n          var that = this;\n          var dataController = that.getController(\"data\");\n          that.callBase();\n          that._editorFactoryController = that.getController(\"editorFactory\");\n          that._rowHeight = 0;\n          that._scrollTop = 0;\n          that._scrollLeft = -1;\n          that._scrollRight = 0;\n          that._hasHeight = false;\n          dataController.loadingChanged.add(function (isLoading, messageText) {\n            that.setLoading(isLoading, messageText);\n          });\n          dataController.dataSourceChanged.add(function () {\n            if (that._scrollLeft >= 0) {\n              that._handleScroll({\n                component: that.getScrollable(),\n                scrollOffset: {\n                  top: that._scrollTop,\n                  left: that._scrollLeft\n                }\n              });\n            }\n          });\n        },\n        _handleDataChanged: function (change) {\n          switch (change.changeType) {\n            case \"refresh\":\n            case \"prepend\":\n            case \"append\":\n            case \"update\":\n              this.render(null, change);\n              break;\n\n            default:\n              this._update(change);\n\n          }\n        },\n        publicMethods: function () {\n          return [\"isScrollbarVisible\", \"getTopVisibleRowData\", \"getScrollbarWidth\", \"getCellElement\", \"getRowElement\", \"getScrollable\"];\n        },\n        contentWidth: function () {\n          return this.element().width() - this.getScrollbarWidth();\n        },\n        getScrollbarWidth: function (isHorizontal) {\n          var scrollableContainer = this._scrollableContainer && this._scrollableContainer.get(0);\n\n          var scrollbarWidth = 0;\n\n          if (scrollableContainer) {\n            if (!isHorizontal) {\n              scrollbarWidth = scrollableContainer.clientWidth ? scrollableContainer.offsetWidth - scrollableContainer.clientWidth : 0;\n            } else {\n              scrollbarWidth = scrollableContainer.clientHeight ? scrollableContainer.offsetHeight - scrollableContainer.clientHeight : 0;\n              scrollbarWidth += (that = this, scrollable = that.getScrollable(), scrollable ? Math.ceil(parseFloat($(scrollable.content()).css(\"paddingBottom\"))) : 0);\n            }\n          }\n\n          var that, scrollable;\n          return scrollbarWidth > 0 ? scrollbarWidth : 0;\n        },\n        _fireColumnResizedCallbacks: function () {\n          var lastColumnWidths = this._lastColumnWidths || [];\n          var columnWidths = [];\n          var columns = this.getColumns();\n\n          for (var i = 0; i < columns.length; i++) {\n            columnWidths[i] = columns[i].visibleWidth;\n\n            if (columns[i].resizedCallbacks && !isDefined(columns[i].groupIndex) && lastColumnWidths[i] !== columnWidths[i]) {\n              columns[i].resizedCallbacks.fire(columnWidths[i]);\n            }\n          }\n\n          this._lastColumnWidths = columnWidths;\n        },\n        _updateLastRowBorder: function (isFreeSpaceRowVisible) {\n          if (this.option(\"showBorders\") && this.option(\"showRowLines\") && !isFreeSpaceRowVisible) {\n            this.element().addClass(LAST_ROW_BORDER);\n          } else {\n            this.element().removeClass(LAST_ROW_BORDER);\n          }\n        },\n        _updateScrollable: function () {\n          var dxScrollable = Scrollable.getInstance(this.element());\n\n          if (dxScrollable) {\n            dxScrollable.update();\n\n            this._updateHorizontalScrollPosition();\n          }\n        },\n        _updateHorizontalScrollPosition: function () {\n          var scrollable = this.getScrollable();\n          var scrollLeft = scrollable && scrollable.scrollOffset().left;\n          var rtlEnabled = this.option(\"rtlEnabled\");\n\n          if (rtlEnabled) {\n            var maxHorizontalScrollOffset = getMaxHorizontalScrollOffset(scrollable);\n            var scrollRight = maxHorizontalScrollOffset - scrollLeft;\n\n            if (scrollRight !== this._scrollRight) {\n              this._scrollLeft = maxHorizontalScrollOffset - this._scrollRight;\n            }\n          }\n\n          if (this._scrollLeft >= 0 && scrollLeft !== this._scrollLeft) {\n            scrollable.scrollTo({\n              x: this._scrollLeft\n            });\n          }\n        },\n        _resizeCore: function () {\n          var that = this;\n\n          that._fireColumnResizedCallbacks();\n\n          that._updateRowHeight();\n\n          deferRender(function () {\n            that._renderScrollable();\n\n            that.renderNoDataText();\n            that.updateFreeSpaceRowHeight();\n            deferUpdate(function () {\n              that._updateScrollable();\n            });\n          });\n        },\n        scrollTo: function (location) {\n          var $element = this.element();\n          var dxScrollable = $element && Scrollable.getInstance($element);\n\n          if (dxScrollable) {\n            dxScrollable.scrollTo(location);\n          }\n        },\n        height: function (_height, hasHeight) {\n          var that = this;\n          var $element = this.element();\n\n          if (0 === arguments.length) {\n            return $element ? $element.outerHeight(true) : 0;\n          }\n\n          that._hasHeight = void 0 === hasHeight ? \"auto\" !== _height : hasHeight;\n\n          if (isDefined(_height) && $element) {\n            setHeight($element, _height);\n          }\n        },\n        setLoading: function (isLoading, messageText) {\n          var loadPanel = this._loadPanel;\n          var dataController = this._dataController;\n          var loadPanelOptions = this.option(\"loadPanel\") || {};\n          var animation = dataController.isLoaded() ? loadPanelOptions.animation : null;\n          var $element = this.element();\n\n          if (!hasWindow()) {\n            return;\n          }\n\n          if (!loadPanel && void 0 !== messageText && dataController.isLocalStore() && \"auto\" === loadPanelOptions.enabled && $element) {\n            this._renderLoadPanel($element, $element.parent());\n\n            loadPanel = this._loadPanel;\n          }\n\n          if (loadPanel) {\n            var visibilityOptions = {\n              message: messageText || loadPanelOptions.text,\n              animation: animation,\n              visible: isLoading\n            };\n            clearTimeout(this._hideLoadingTimeoutID);\n\n            if (loadPanel.option(\"visible\") && !isLoading) {\n              this._hideLoadingTimeoutID = setTimeout(function () {\n                loadPanel.option(visibilityOptions);\n              }, LOADPANEL_HIDE_TIMEOUT);\n            } else {\n              loadPanel.option(visibilityOptions);\n            }\n          }\n        },\n        setRowsOpacity: function (columnIndex, value) {\n          var $rows = this._getRowElements().not(\".\" + GROUP_ROW_CLASS) || [];\n\n          this._setRowsOpacityCore($rows, this.getColumns(), columnIndex, value);\n        },\n        _getCellElementsCore: function (rowIndex) {\n          var $cells = this.callBase.apply(this, arguments);\n\n          if ($cells) {\n            var groupCellIndex = $cells.filter(\".\" + GROUP_CELL_CLASS).index();\n\n            if (groupCellIndex >= 0 && $cells.length > groupCellIndex + 1) {\n              return $cells.slice(0, groupCellIndex + 1);\n            }\n          }\n\n          return $cells;\n        },\n        getTopVisibleItemIndex: function (isFloor) {\n          var itemIndex = 0;\n          var prevOffsetTop = 0;\n          var offsetTop = 0;\n          var scrollPosition = this._scrollTop;\n\n          var $contentElement = this._findContentElement();\n\n          var contentElementOffsetTop = $contentElement && $contentElement.offset().top;\n\n          var items = this._dataController.items();\n\n          var tableElement = this.getTableElement();\n\n          if (items.length && tableElement) {\n            var rowElements = this._getRowElements(tableElement).filter(\":visible\");\n\n            for (itemIndex = 0; itemIndex < items.length; itemIndex++) {\n              prevOffsetTop = offsetTop;\n              var rowElement = rowElements.eq(itemIndex);\n\n              if (rowElement.length) {\n                offsetTop = rowElement.offset().top - contentElementOffsetTop;\n\n                if (offsetTop > scrollPosition) {\n                  if (itemIndex) {\n                    if (isFloor || 2 * scrollPosition < Math.round(offsetTop + prevOffsetTop)) {\n                      itemIndex--;\n                    }\n                  }\n\n                  break;\n                }\n              }\n            }\n\n            if (itemIndex && itemIndex === items.length) {\n              itemIndex--;\n            }\n          }\n\n          return itemIndex;\n        },\n        getTopVisibleRowData: function () {\n          var itemIndex = this.getTopVisibleItemIndex();\n\n          var items = this._dataController.items();\n\n          if (items[itemIndex]) {\n            return items[itemIndex].data;\n          }\n        },\n        _scrollToElement: function ($element, offset) {\n          var scrollable = this.getScrollable();\n          scrollable && scrollable.scrollToElement($element, offset);\n        },\n        optionChanged: function (args) {\n          this.callBase(args);\n\n          switch (args.name) {\n            case \"wordWrapEnabled\":\n            case \"showColumnLines\":\n            case \"showRowLines\":\n            case \"rowAlternationEnabled\":\n            case \"rowTemplate\":\n            case \"twoWayBindingEnabled\":\n              this._invalidate(true, true);\n\n              args.handled = true;\n              break;\n\n            case \"scrolling\":\n              this._rowHeight = null;\n              this._tableElement = null;\n              args.handled = true;\n              break;\n\n            case \"rtlEnabled\":\n              this._rowHeight = null;\n              this._tableElement = null;\n              break;\n\n            case \"loadPanel\":\n              this._tableElement = null;\n\n              this._invalidate(true, \"loadPanel.enabled\" !== args.fullName);\n\n              args.handled = true;\n              break;\n\n            case \"noDataText\":\n              this.renderNoDataText();\n              args.handled = true;\n          }\n        },\n        dispose: function () {\n          clearTimeout(this._hideLoadingTimeoutID);\n          this._scrollable && this._scrollable.dispose();\n        },\n        setScrollerSpacing: function () {}\n      };\n    }())\n  }\n};","map":{"version":3,"sources":["/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.rows.js"],"names":["_extends","$","getWindow","hasWindow","eventsEngine","deferRender","deferUpdate","setHeight","isDefined","isNumeric","isString","each","extend","getBoundingRect","getDefaultAlignment","isEmpty","compileGetter","gridCoreUtils","ColumnsView","Scrollable","removeEvent","messageLocalization","browser","getScrollRtlBehavior","ROWS_VIEW_CLASS","CONTENT_CLASS","NOWRAP_CLASS","GROUP_ROW_CLASS","GROUP_CELL_CLASS","DATA_ROW_CLASS","FREE_SPACE_CLASS","ROW_LINES_CLASS","COLUMN_LINES_CLASS","ROW_ALTERNATION_CLASS","LAST_ROW_BORDER","EMPTY_CLASS","ROW_INSERTED_ANIMATION_CLASS","LOADPANEL_HIDE_TIMEOUT","getMaxHorizontalScrollOffset","scrollable","Math","round","scrollWidth","clientWidth","rowsModule","defaultOptions","hoverStateEnabled","scrolling","useNative","loadPanel","enabled","text","format","width","height","showIndicator","indicatorSrc","showPane","rowTemplate","columnAutoWidth","noDataText","wordWrapEnabled","showColumnLines","showRowLines","rowAlternationEnabled","activeStateEnabled","twoWayBindingEnabled","views","rowsView","inherit","defaultCellTemplate","$container","options","isDataTextEmpty","rowType","container","get","setEmptyText","column","encodeHtml","textContent","innerHTML","_getDefaultTemplate","command","html","_getDefaultGroupTemplate","summaryTexts","option","data","caption","summaryItems","length","getGroupRowSummaryText","groupContinuedMessage","groupContinuesMessage","addClass","_update","_getCellTemplate","template","groupIndex","showWhenGrouped","groupCellTemplate","allowRenderToDetachedContainer","render","cellTemplate","_createRow","row","$row","callBase","isGroup","isDataRow","visible","hide","isRowExpanded","isExpanded","setAria","toString","_rowPrepared","rowOptions","_isAltRow","watch","value","toggleClass","_setAriaRowIndex","rowIndex","apply","arguments","component","isPagerMode","pageIndex","pageSize","_dataController","getRowIndexOffset","_afterRowPrepared","e","arg","args","dataController","getVisibleRows","isNewRow","dispose","generateDataValues","columns","repaintRows","deep","skipImmediate","on","rowElement","_renderScrollable","force","$element","element","children","append","_loadPanel","_renderLoadPanel","parent","isLocalStore","getScrollable","isLoaded","getColumns","allColumnsHasWidth","i","minWidth","_hasHeight","_columnsController","_isColumnFixing","_renderScrollableCore","_handleScroll","rtlEnabled","isNativeScrolling","_isScrollByEvent","event","_scrollTop","scrollOffset","top","_scrollLeft","left","scrollLeft","_scrollRight","positive","isScrollbarVisible","scrollChanged","fire","name","dxScrollableOptions","_createScrollableOptions","scrollHandler","bind","onScroll","_scrollable","_createComponent","_scrollableContainer","_$container","renderLoadPanel","_renderContent","contentElement","tableElement","empty","_findContentElement","_updateContent","newTableElement","change","that","getTableElement","changeType","executors","highlightChanges","rowInsertedClass","addWidgetPrefix","rowIndices","index","$newRowElement","_getRowElements","eq","changeTypes","item","items","push","$rowsElement","$rowElement","columnIndices","is","toggle","_updateCells","replaceWith","target","prependTo","insertBefore","insertAfter","last","isLiveUpdate","remove","setTableElement","_createEmptyRow","className","isFixed","$cell","getFixedColumns","_createCell","columnIndex","css","_appendEmptyRow","$table","$emptyRow","location","$tBodies","_getBodies","isTableContainer","first","prepend","$colgroup","_renderFreeSpaceRow","$tableElement","$freeSpaceRowElement","_wrapRowIfNeed","_checkRowKeys","rows","_getRows","keyExpr","store","key","some","fireError","_needUpdateRowHeight","itemsCount","_rowHeight","_getRowsHeight","$rowElements","not","toArray","reduce","sum","_updateRowHeight","rowsHeight","$content","content","$rows","_getFreeSpaceRowElements","tableElements","getTableElements","_getNoDataText","_rowClick","executeAction","evaluate","expr","getter","_rowDblClick","_getColumnsCountBeforeGroups","type","_getGroupCellOptions","columnsCountBeforeGroups","colspan","_renderCells","_renderGroupedCells","values","expandColumn","groupCellOptions","allowCollapsing","scrollingMode","cssClass","_renderCell","groupColumnAlignment","groupColumn","alignment","_renderRows","updateFreeSpaceRowHeight","_renderRow","renderTemplate","_renderTable","resizeCompleted","add","resizeCompletedHandler","scrollableInstance","closest","document","_visibilityChanged","_createTable","appendTo","_renderCore","_lastColumnWidths","_getCellOptions","summaryCells","displayValue","getDisplayValue","parameters","oldValue","formatValue","resized","resizedCallbacks","groupingTextsOptions","isContinuationOnNextPage","isContinuation","_setRowsOpacityCore","visibleColumns","columnsController","columnID","isBand","hasClass","isParentBandColumn","opacity","_getDevicePixelRatio","devicePixelRatio","renderNoDataText","getCellOptions","columnIdentifier","cellOptions","columnOption","getVisibleColumns","calculateCellValue","getRow","itemCount","freeSpaceRowElements","totalCount","isFreeSpaceRowVisible","freeSpaceRowCount","pageCount","_updateLastRowBorder","scrollbarWidth","getScrollbarWidth","elementHeightWithoutScrollbar","contentHeight","outerHeight","showFreeSpaceRow","borderTopWidth","ceil","parseFloat","heightCorrection","_getHeightCorrection","resultHeight","show","isZoomedWebkit","webkit","isChromeLatest","chrome","version","hasExtraBorderTop","mozilla","_columnOptionChanged","optionNames","grouping","visibleWidth","_fireColumnResizedCallbacks","init","getController","_editorFactoryController","loadingChanged","isLoading","messageText","setLoading","dataSourceChanged","_handleDataChanged","publicMethods","contentWidth","isHorizontal","scrollableContainer","offsetWidth","clientHeight","offsetHeight","lastColumnWidths","columnWidths","removeClass","_updateScrollable","dxScrollable","getInstance","update","_updateHorizontalScrollPosition","maxHorizontalScrollOffset","scrollRight","scrollTo","x","_resizeCore","_height","hasHeight","loadPanelOptions","animation","visibilityOptions","message","clearTimeout","_hideLoadingTimeoutID","setTimeout","setRowsOpacity","_getCellElementsCore","$cells","groupCellIndex","filter","slice","getTopVisibleItemIndex","isFloor","itemIndex","prevOffsetTop","offsetTop","scrollPosition","$contentElement","contentElementOffsetTop","offset","rowElements","getTopVisibleRowData","_scrollToElement","scrollToElement","optionChanged","_invalidate","handled","_tableElement","fullName","setScrollerSpacing"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.rows.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    getWindow,\r\n    hasWindow\r\n} from \"../../core/utils/window\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    deferRender,\r\n    deferUpdate\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    setHeight\r\n} from \"../../core/utils/style\";\r\nimport {\r\n    isDefined,\r\n    isNumeric,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    getBoundingRect,\r\n    getDefaultAlignment\r\n} from \"../../core/utils/position\";\r\nimport {\r\n    isEmpty\r\n} from \"../../core/utils/string\";\r\nimport {\r\n    compileGetter\r\n} from \"../../core/utils/data\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    ColumnsView\r\n} from \"./ui.grid_core.columns_view\";\r\nimport Scrollable from \"../scroll_view/ui.scrollable\";\r\nimport {\r\n    removeEvent\r\n} from \"../../core/remove_event\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport browser from \"../../core/utils/browser\";\r\nimport getScrollRtlBehavior from \"../../core/utils/scroll_rtl_behavior\";\r\nvar ROWS_VIEW_CLASS = \"rowsview\";\r\nvar CONTENT_CLASS = \"content\";\r\nvar NOWRAP_CLASS = \"nowrap\";\r\nvar GROUP_ROW_CLASS = \"dx-group-row\";\r\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\r\nvar DATA_ROW_CLASS = \"dx-data-row\";\r\nvar FREE_SPACE_CLASS = \"dx-freespace-row\";\r\nvar ROW_LINES_CLASS = \"dx-row-lines\";\r\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\r\nvar ROW_ALTERNATION_CLASS = \"dx-row-alt\";\r\nvar LAST_ROW_BORDER = \"dx-last-row-border\";\r\nvar EMPTY_CLASS = \"dx-empty\";\r\nvar ROW_INSERTED_ANIMATION_CLASS = \"row-inserted-animation\";\r\nvar LOADPANEL_HIDE_TIMEOUT = 200;\r\n\r\nfunction getMaxHorizontalScrollOffset(scrollable) {\r\n    return scrollable ? Math.round(scrollable.scrollWidth() - scrollable.clientWidth()) : 0\r\n}\r\nexport var rowsModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            hoverStateEnabled: false,\r\n            scrolling: {\r\n                useNative: \"auto\"\r\n            },\r\n            loadPanel: {\r\n                enabled: \"auto\",\r\n                text: messageLocalization.format(\"Loading\"),\r\n                width: 200,\r\n                height: 90,\r\n                showIndicator: true,\r\n                indicatorSrc: \"\",\r\n                showPane: true\r\n            },\r\n            rowTemplate: null,\r\n            columnAutoWidth: false,\r\n            noDataText: messageLocalization.format(\"dxDataGrid-noDataText\"),\r\n            wordWrapEnabled: false,\r\n            showColumnLines: true,\r\n            showRowLines: false,\r\n            rowAlternationEnabled: false,\r\n            activeStateEnabled: false,\r\n            twoWayBindingEnabled: true\r\n        }\r\n    },\r\n    views: {\r\n        rowsView: ColumnsView.inherit(function() {\r\n            var defaultCellTemplate = function($container, options) {\r\n                var isDataTextEmpty = isEmpty(options.text) && \"data\" === options.rowType;\r\n                var text = options.text;\r\n                var container = $container.get(0);\r\n                if (isDataTextEmpty) {\r\n                    gridCoreUtils.setEmptyText($container)\r\n                } else if (options.column.encodeHtml) {\r\n                    container.textContent = text\r\n                } else {\r\n                    container.innerHTML = text\r\n                }\r\n            };\r\n            return {\r\n                _getDefaultTemplate: function(column) {\r\n                    switch (column.command) {\r\n                        case \"empty\":\r\n                            return function(container) {\r\n                                container.html(\"&nbsp;\")\r\n                            };\r\n                        default:\r\n                            return defaultCellTemplate\r\n                    }\r\n                },\r\n                _getDefaultGroupTemplate: function(column) {\r\n                    var summaryTexts = this.option(\"summary.texts\");\r\n                    return function($container, options) {\r\n                        var data = options.data;\r\n                        var text = options.column.caption + \": \" + options.text;\r\n                        var container = $container.get(0);\r\n                        if (options.summaryItems && options.summaryItems.length) {\r\n                            text += \" \" + gridCoreUtils.getGroupRowSummaryText(options.summaryItems, summaryTexts)\r\n                        }\r\n                        if (data) {\r\n                            if (options.groupContinuedMessage && options.groupContinuesMessage) {\r\n                                text += \" (\" + options.groupContinuedMessage + \". \" + options.groupContinuesMessage + \")\"\r\n                            } else if (options.groupContinuesMessage) {\r\n                                text += \" (\" + options.groupContinuesMessage + \")\"\r\n                            } else if (options.groupContinuedMessage) {\r\n                                text += \" (\" + options.groupContinuedMessage + \")\"\r\n                            }\r\n                        }\r\n                        $container.addClass(GROUP_CELL_CLASS);\r\n                        if (column.encodeHtml) {\r\n                            container.textContent = text\r\n                        } else {\r\n                            container.innerHTML = text\r\n                        }\r\n                    }\r\n                },\r\n                _update: function() {},\r\n                _getCellTemplate: function(options) {\r\n                    var column = options.column;\r\n                    var template;\r\n                    if (\"group\" === options.rowType && isDefined(column.groupIndex) && !column.showWhenGrouped && !column.command) {\r\n                        template = column.groupCellTemplate || {\r\n                            allowRenderToDetachedContainer: true,\r\n                            render: this._getDefaultGroupTemplate(column)\r\n                        }\r\n                    } else if ((\"data\" === options.rowType || column.command) && column.cellTemplate) {\r\n                        template = column.cellTemplate\r\n                    } else {\r\n                        template = {\r\n                            allowRenderToDetachedContainer: true,\r\n                            render: this._getDefaultTemplate(column)\r\n                        }\r\n                    }\r\n                    return template\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase(row);\r\n                    if (row) {\r\n                        var isGroup = \"group\" === row.rowType;\r\n                        var isDataRow = \"data\" === row.rowType;\r\n                        isDataRow && $row.addClass(DATA_ROW_CLASS);\r\n                        isDataRow && this.option(\"showRowLines\") && $row.addClass(ROW_LINES_CLASS);\r\n                        this.option(\"showColumnLines\") && $row.addClass(COLUMN_LINES_CLASS);\r\n                        if (false === row.visible) {\r\n                            $row.hide()\r\n                        }\r\n                        if (isGroup) {\r\n                            $row.addClass(GROUP_ROW_CLASS);\r\n                            var isRowExpanded = row.isExpanded;\r\n                            this.setAria(\"role\", \"row\", $row);\r\n                            this.setAria(\"expanded\", isDefined(isRowExpanded) && isRowExpanded.toString(), $row)\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _rowPrepared: function($row, rowOptions, row) {\r\n                    if (\"data\" === rowOptions.rowType) {\r\n                        if (this.option(\"rowAlternationEnabled\")) {\r\n                            this._isAltRow(row) && $row.addClass(ROW_ALTERNATION_CLASS);\r\n                            rowOptions.watch && rowOptions.watch(() => this._isAltRow(row), value => {\r\n                                $row.toggleClass(ROW_ALTERNATION_CLASS, value)\r\n                            })\r\n                        }\r\n                        this._setAriaRowIndex(rowOptions, $row);\r\n                        rowOptions.watch && rowOptions.watch(() => rowOptions.rowIndex, () => this._setAriaRowIndex(rowOptions, $row))\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _setAriaRowIndex: function(row, $row) {\r\n                    var component = this.component;\r\n                    var isPagerMode = \"standard\" === component.option(\"scrolling.mode\") && \"virtual\" !== component.option(\"scrolling.rowRenderingMode\");\r\n                    var rowIndex = row.rowIndex + 1;\r\n                    if (isPagerMode) {\r\n                        rowIndex = component.pageIndex() * component.pageSize() + rowIndex\r\n                    } else {\r\n                        rowIndex += this._dataController.getRowIndexOffset()\r\n                    }\r\n                    this.setAria(\"rowindex\", rowIndex, $row)\r\n                },\r\n                _afterRowPrepared: function(e) {\r\n                    var arg = e.args[0];\r\n                    var dataController = this._dataController;\r\n                    var row = dataController.getVisibleRows()[arg.rowIndex];\r\n                    var watch = this.option(\"integrationOptions.watchMethod\");\r\n                    if (!arg.data || \"data\" !== arg.rowType || arg.isNewRow || !this.option(\"twoWayBindingEnabled\") || !watch || !row) {\r\n                        return\r\n                    }\r\n                    var dispose = watch(() => dataController.generateDataValues(arg.data, arg.columns), () => {\r\n                        dataController.repaintRows([row.rowIndex], this.option(\"repaintChangesOnly\"))\r\n                    }, {\r\n                        deep: true,\r\n                        skipImmediate: true\r\n                    });\r\n                    eventsEngine.on(arg.rowElement, removeEvent, dispose)\r\n                },\r\n                _renderScrollable: function(force) {\r\n                    var $element = this.element();\r\n                    if (!$element.children().length) {\r\n                        $element.append(\"<div>\")\r\n                    }\r\n                    if (force || !this._loadPanel) {\r\n                        this._renderLoadPanel($element, $element.parent(), this._dataController.isLocalStore())\r\n                    }\r\n                    if ((force || !this.getScrollable()) && this._dataController.isLoaded()) {\r\n                        var columns = this.getColumns();\r\n                        var allColumnsHasWidth = true;\r\n                        for (var i = 0; i < columns.length; i++) {\r\n                            if (!columns[i].width && !columns[i].minWidth) {\r\n                                allColumnsHasWidth = false;\r\n                                break\r\n                            }\r\n                        }\r\n                        if (this.option(\"columnAutoWidth\") || this._hasHeight || allColumnsHasWidth || this._columnsController._isColumnFixing()) {\r\n                            this._renderScrollableCore($element)\r\n                        }\r\n                    }\r\n                },\r\n                _handleScroll: function(e) {\r\n                    var rtlEnabled = this.option(\"rtlEnabled\");\r\n                    var isNativeScrolling = e.component.option(\"useNative\");\r\n                    this._isScrollByEvent = !!e.event;\r\n                    this._scrollTop = e.scrollOffset.top;\r\n                    this._scrollLeft = e.scrollOffset.left;\r\n                    var scrollLeft = e.scrollOffset.left;\r\n                    if (rtlEnabled) {\r\n                        this._scrollRight = getMaxHorizontalScrollOffset(e.component) - this._scrollLeft;\r\n                        if (isNativeScrolling) {\r\n                            scrollLeft = getScrollRtlBehavior().positive ? this._scrollRight : -this._scrollRight\r\n                        }\r\n                        if (!this.isScrollbarVisible(true)) {\r\n                            this._scrollLeft = -1\r\n                        }\r\n                    }\r\n                    this.scrollChanged.fire(_extends({}, e.scrollOffset, {\r\n                        left: scrollLeft\r\n                    }), this.name)\r\n                },\r\n                _renderScrollableCore: function($element) {\r\n                    var dxScrollableOptions = this._createScrollableOptions();\r\n                    var scrollHandler = this._handleScroll.bind(this);\r\n                    dxScrollableOptions.onScroll = scrollHandler;\r\n                    this._scrollable = this._createComponent($element, Scrollable, dxScrollableOptions);\r\n                    this._scrollableContainer = this._scrollable && this._scrollable._$container\r\n                },\r\n                _renderLoadPanel: gridCoreUtils.renderLoadPanel,\r\n                _renderContent: function(contentElement, tableElement) {\r\n                    contentElement.empty().append(tableElement);\r\n                    return this._findContentElement()\r\n                },\r\n                _updateContent: function(newTableElement, change) {\r\n                    var that = this;\r\n                    var tableElement = that.getTableElement();\r\n                    var contentElement = that._findContentElement();\r\n                    var changeType = change && change.changeType;\r\n                    var executors = [];\r\n                    var highlightChanges = this.option(\"highlightChanges\");\r\n                    var rowInsertedClass = this.addWidgetPrefix(ROW_INSERTED_ANIMATION_CLASS);\r\n                    switch (changeType) {\r\n                        case \"update\":\r\n                            each(change.rowIndices, (function(index, rowIndex) {\r\n                                var $newRowElement = that._getRowElements(newTableElement).eq(index);\r\n                                var changeType = change.changeTypes && change.changeTypes[index];\r\n                                var item = change.items && change.items[index];\r\n                                executors.push((function() {\r\n                                    var $rowsElement = that._getRowElements();\r\n                                    var $rowElement = $rowsElement.eq(rowIndex);\r\n                                    switch (changeType) {\r\n                                        case \"update\":\r\n                                            if (item) {\r\n                                                var columnIndices = change.columnIndices && change.columnIndices[index];\r\n                                                if (isDefined(item.visible) && item.visible !== $rowElement.is(\":visible\")) {\r\n                                                    $rowElement.toggle(item.visible)\r\n                                                } else if (columnIndices) {\r\n                                                    that._updateCells($rowElement, $newRowElement, columnIndices)\r\n                                                } else {\r\n                                                    $rowElement.replaceWith($newRowElement)\r\n                                                }\r\n                                            }\r\n                                            break;\r\n                                        case \"insert\":\r\n                                            if (!$rowsElement.length) {\r\n                                                if (tableElement) {\r\n                                                    var target = $newRowElement.is(\"tbody\") ? tableElement : tableElement.children(\"tbody\");\r\n                                                    $newRowElement.prependTo(target)\r\n                                                }\r\n                                            } else if ($rowElement.length) {\r\n                                                $newRowElement.insertBefore($rowElement)\r\n                                            } else {\r\n                                                $newRowElement.insertAfter($rowsElement.last())\r\n                                            }\r\n                                            if (highlightChanges && change.isLiveUpdate) {\r\n                                                $newRowElement.addClass(rowInsertedClass)\r\n                                            }\r\n                                            break;\r\n                                        case \"remove\":\r\n                                            $rowElement.remove()\r\n                                    }\r\n                                }))\r\n                            }));\r\n                            each(executors, (function() {\r\n                                this()\r\n                            }));\r\n                            newTableElement.remove();\r\n                            break;\r\n                        default:\r\n                            that.setTableElement(newTableElement);\r\n                            contentElement.addClass(that.addWidgetPrefix(CONTENT_CLASS));\r\n                            that._renderContent(contentElement, newTableElement)\r\n                    }\r\n                },\r\n                _createEmptyRow: function(className, isFixed, height) {\r\n                    var $cell;\r\n                    var $row = this._createRow();\r\n                    var columns = isFixed ? this.getFixedColumns() : this.getColumns();\r\n                    $row.addClass(className).toggleClass(COLUMN_LINES_CLASS, this.option(\"showColumnLines\"));\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        $cell = this._createCell({\r\n                            column: columns[i],\r\n                            rowType: \"freeSpace\",\r\n                            columnIndex: i,\r\n                            columns: columns\r\n                        });\r\n                        isNumeric(height) && $cell.css(\"height\", height);\r\n                        $row.append($cell)\r\n                    }\r\n                    this.setAria(\"role\", \"presentation\", $row);\r\n                    return $row\r\n                },\r\n                _appendEmptyRow: function($table, $emptyRow, location) {\r\n                    var $tBodies = this._getBodies($table);\r\n                    var isTableContainer = !$tBodies.length || $emptyRow.is(\"tbody\");\r\n                    var $container = isTableContainer ? $table : $tBodies;\r\n                    if (\"top\" === location) {\r\n                        $container.first().prepend($emptyRow);\r\n                        if (isTableContainer) {\r\n                            var $colgroup = $container.children(\"colgroup\");\r\n                            $container.prepend($colgroup)\r\n                        }\r\n                    } else {\r\n                        $container.last().append($emptyRow)\r\n                    }\r\n                },\r\n                _renderFreeSpaceRow: function($tableElement) {\r\n                    var $freeSpaceRowElement = this._createEmptyRow(FREE_SPACE_CLASS);\r\n                    $freeSpaceRowElement = this._wrapRowIfNeed($tableElement, $freeSpaceRowElement);\r\n                    this._appendEmptyRow($tableElement, $freeSpaceRowElement)\r\n                },\r\n                _checkRowKeys: function(options) {\r\n                    var that = this;\r\n                    var rows = that._getRows(options);\r\n                    var keyExpr = that._dataController.store() && that._dataController.store().key();\r\n                    keyExpr && rows.some((function(row) {\r\n                        if (\"data\" === row.rowType && void 0 === row.key) {\r\n                            that._dataController.fireError(\"E1046\", keyExpr);\r\n                            return true\r\n                        }\r\n                    }))\r\n                },\r\n                _needUpdateRowHeight: function(itemsCount) {\r\n                    return itemsCount > 0 && !this._rowHeight\r\n                },\r\n                _getRowsHeight: function($tableElement) {\r\n                    var $rowElements = $tableElement.children(\"tbody\").children().not(\".dx-virtual-row\").not(\".\" + FREE_SPACE_CLASS);\r\n                    return $rowElements.toArray().reduce((function(sum, row) {\r\n                        return sum + getBoundingRect(row).height\r\n                    }), 0)\r\n                },\r\n                _updateRowHeight: function() {\r\n                    var $tableElement = this.getTableElement();\r\n                    var itemsCount = this._dataController.items().length;\r\n                    if ($tableElement && this._needUpdateRowHeight(itemsCount)) {\r\n                        var rowsHeight = this._getRowsHeight($tableElement);\r\n                        this._rowHeight = rowsHeight / itemsCount\r\n                    }\r\n                },\r\n                _findContentElement: function() {\r\n                    var $content = this.element();\r\n                    var scrollable = this.getScrollable();\r\n                    if ($content) {\r\n                        if (scrollable) {\r\n                            $content = $(scrollable.content())\r\n                        }\r\n                        return $content.children().first()\r\n                    }\r\n                },\r\n                _getRowElements: function(tableElement) {\r\n                    var $rows = this.callBase(tableElement);\r\n                    return $rows && $rows.not(\".\" + FREE_SPACE_CLASS)\r\n                },\r\n                _getFreeSpaceRowElements: function($table) {\r\n                    var tableElements = $table || this.getTableElements();\r\n                    return tableElements && tableElements.children(\"tbody\").children(\".\" + FREE_SPACE_CLASS)\r\n                },\r\n                _getNoDataText: function() {\r\n                    return this.option(\"noDataText\")\r\n                },\r\n                _rowClick: function(e) {\r\n                    var item = this._dataController.items()[e.rowIndex] || {};\r\n                    this.executeAction(\"onRowClick\", extend({\r\n                        evaluate: function(expr) {\r\n                            var getter = compileGetter(expr);\r\n                            return getter(item.data)\r\n                        }\r\n                    }, e, item))\r\n                },\r\n                _rowDblClick: function(e) {\r\n                    var item = this._dataController.items()[e.rowIndex] || {};\r\n                    this.executeAction(\"onRowDblClick\", extend({}, e, item))\r\n                },\r\n                _getColumnsCountBeforeGroups: function(columns) {\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        if (\"groupExpand\" === columns[i].type) {\r\n                            return i\r\n                        }\r\n                    }\r\n                    return 0\r\n                },\r\n                _getGroupCellOptions: function(options) {\r\n                    var columnsCountBeforeGroups = this._getColumnsCountBeforeGroups(options.columns);\r\n                    var columnIndex = (options.row.groupIndex || 0) + columnsCountBeforeGroups;\r\n                    return {\r\n                        columnIndex: columnIndex,\r\n                        colspan: options.columns.length - columnIndex - 1\r\n                    }\r\n                },\r\n                _renderCells: function($row, options) {\r\n                    if (\"group\" === options.row.rowType) {\r\n                        this._renderGroupedCells($row, options)\r\n                    } else if (options.row.values) {\r\n                        this.callBase($row, options)\r\n                    }\r\n                },\r\n                _renderGroupedCells: function($row, options) {\r\n                    var row = options.row;\r\n                    var expandColumn;\r\n                    var columns = options.columns;\r\n                    var rowIndex = row.rowIndex;\r\n                    var isExpanded;\r\n                    var groupCellOptions = this._getGroupCellOptions(options);\r\n                    for (var i = 0; i <= groupCellOptions.columnIndex; i++) {\r\n                        if (i === groupCellOptions.columnIndex && columns[i].allowCollapsing && \"infinite\" !== options.scrollingMode) {\r\n                            isExpanded = !!row.isExpanded;\r\n                            expandColumn = columns[i]\r\n                        } else {\r\n                            isExpanded = null;\r\n                            expandColumn = {\r\n                                command: \"expand\",\r\n                                cssClass: columns[i].cssClass\r\n                            }\r\n                        }\r\n                        this._renderCell($row, {\r\n                            value: isExpanded,\r\n                            row: row,\r\n                            rowIndex: rowIndex,\r\n                            column: expandColumn,\r\n                            columnIndex: i\r\n                        })\r\n                    }\r\n                    var groupColumnAlignment = getDefaultAlignment(this.option(\"rtlEnabled\"));\r\n                    var groupColumn = extend({}, columns[groupCellOptions.columnIndex], {\r\n                        command: null,\r\n                        cssClass: null,\r\n                        width: null,\r\n                        showWhenGrouped: false,\r\n                        alignment: groupColumnAlignment\r\n                    });\r\n                    if (groupCellOptions.colspan > 1) {\r\n                        groupColumn.colspan = groupCellOptions.colspan\r\n                    }\r\n                    this._renderCell($row, {\r\n                        value: row.values[row.groupIndex],\r\n                        row: row,\r\n                        rowIndex: rowIndex,\r\n                        column: groupColumn,\r\n                        columnIndex: groupCellOptions.columnIndex\r\n                    })\r\n                },\r\n                _renderRows: function($table, options) {\r\n                    var scrollingMode = this.option(\"scrolling.mode\");\r\n                    this.callBase($table, extend({\r\n                        scrollingMode: scrollingMode\r\n                    }, options));\r\n                    this._checkRowKeys(options.change);\r\n                    this._renderFreeSpaceRow($table);\r\n                    if (!this._hasHeight) {\r\n                        this.updateFreeSpaceRowHeight($table)\r\n                    }\r\n                },\r\n                _renderRow: function($table, options) {\r\n                    var row = options.row;\r\n                    var rowTemplate = this.option(\"rowTemplate\");\r\n                    if ((\"data\" === row.rowType || \"group\" === row.rowType) && !isDefined(row.groupIndex) && rowTemplate) {\r\n                        this.renderTemplate($table, rowTemplate, extend({\r\n                            columns: options.columns\r\n                        }, row), true)\r\n                    } else {\r\n                        this.callBase($table, options)\r\n                    }\r\n                },\r\n                _renderTable: function(options) {\r\n                    var that = this;\r\n                    var $table = that.callBase(options);\r\n                    if (!isDefined(that.getTableElement())) {\r\n                        that.setTableElement($table);\r\n                        that._renderScrollable(true);\r\n                        that.resizeCompleted.add((function resizeCompletedHandler() {\r\n                            var scrollableInstance = that.getScrollable();\r\n                            if (scrollableInstance && that.element().closest(getWindow().document).length) {\r\n                                that.resizeCompleted.remove(resizeCompletedHandler);\r\n                                scrollableInstance._visibilityChanged(true)\r\n                            }\r\n                        }))\r\n                    } else {\r\n                        that._renderScrollable()\r\n                    }\r\n                    return $table\r\n                },\r\n                _createTable: function() {\r\n                    var $table = this.callBase.apply(this, arguments);\r\n                    if (this.option(\"rowTemplate\")) {\r\n                        $table.appendTo(this.component.$element())\r\n                    }\r\n                    return $table\r\n                },\r\n                _renderCore: function(change) {\r\n                    var $element = this.element();\r\n                    $element.addClass(this.addWidgetPrefix(ROWS_VIEW_CLASS)).toggleClass(this.addWidgetPrefix(NOWRAP_CLASS), !this.option(\"wordWrapEnabled\"));\r\n                    $element.toggleClass(EMPTY_CLASS, 0 === this._dataController.items().length);\r\n                    this.setAria(\"role\", \"presentation\", $element);\r\n                    var $table = this._renderTable({\r\n                        change: change\r\n                    });\r\n                    this._updateContent($table, change);\r\n                    this.callBase(change);\r\n                    this._lastColumnWidths = null\r\n                },\r\n                _getRows: function(change) {\r\n                    return change && change.items || this._dataController.items()\r\n                },\r\n                _getCellOptions: function(options) {\r\n                    var column = options.column;\r\n                    var row = options.row;\r\n                    var data = row.data;\r\n                    var summaryCells = row && row.summaryCells;\r\n                    var value = options.value;\r\n                    var displayValue = gridCoreUtils.getDisplayValue(column, value, data, row.rowType);\r\n                    var parameters = this.callBase(options);\r\n                    parameters.value = value;\r\n                    parameters.oldValue = options.oldValue;\r\n                    parameters.displayValue = displayValue;\r\n                    parameters.row = row;\r\n                    parameters.key = row.key;\r\n                    parameters.data = data;\r\n                    parameters.rowType = row.rowType;\r\n                    parameters.values = row.values;\r\n                    parameters.text = !column.command ? gridCoreUtils.formatValue(displayValue, column) : \"\";\r\n                    parameters.rowIndex = row.rowIndex;\r\n                    parameters.summaryItems = summaryCells && summaryCells[options.columnIndex];\r\n                    parameters.resized = column.resizedCallbacks;\r\n                    if (isDefined(column.groupIndex) && !column.command) {\r\n                        var groupingTextsOptions = this.option(\"grouping.texts\");\r\n                        var scrollingMode = this.option(\"scrolling.mode\");\r\n                        if (\"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\r\n                            parameters.groupContinuesMessage = data && data.isContinuationOnNextPage && groupingTextsOptions && groupingTextsOptions.groupContinuesMessage;\r\n                            parameters.groupContinuedMessage = data && data.isContinuation && groupingTextsOptions && groupingTextsOptions.groupContinuedMessage\r\n                        }\r\n                    }\r\n                    return parameters\r\n                },\r\n                _setRowsOpacityCore: function($rows, visibleColumns, columnIndex, value) {\r\n                    var columnsController = this._columnsController;\r\n                    var columns = columnsController.getColumns();\r\n                    var column = columns && columns[columnIndex];\r\n                    var columnID = column && column.isBand && column.index;\r\n                    each($rows, (function(rowIndex, row) {\r\n                        if (!$(row).hasClass(GROUP_ROW_CLASS)) {\r\n                            for (var i = 0; i < visibleColumns.length; i++) {\r\n                                if (isNumeric(columnID) && columnsController.isParentBandColumn(visibleColumns[i].index, columnID) || visibleColumns[i].index === columnIndex) {\r\n                                    $rows.eq(rowIndex).children().eq(i).css({\r\n                                        opacity: value\r\n                                    });\r\n                                    if (!isNumeric(columnID)) {\r\n                                        break\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }))\r\n                },\r\n                _getDevicePixelRatio: function() {\r\n                    return getWindow().devicePixelRatio\r\n                },\r\n                renderNoDataText: gridCoreUtils.renderNoDataText,\r\n                getCellOptions: function(rowIndex, columnIdentifier) {\r\n                    var rowOptions = this._dataController.items()[rowIndex];\r\n                    var cellOptions;\r\n                    var column;\r\n                    if (rowOptions) {\r\n                        if (isString(columnIdentifier)) {\r\n                            column = this._columnsController.columnOption(columnIdentifier)\r\n                        } else {\r\n                            column = this._columnsController.getVisibleColumns()[columnIdentifier]\r\n                        }\r\n                        if (column) {\r\n                            cellOptions = this._getCellOptions({\r\n                                value: column.calculateCellValue(rowOptions.data),\r\n                                rowIndex: rowOptions.rowIndex,\r\n                                row: rowOptions,\r\n                                column: column\r\n                            })\r\n                        }\r\n                    }\r\n                    return cellOptions\r\n                },\r\n                getRow: function(index) {\r\n                    if (index >= 0) {\r\n                        var rows = this._getRowElements();\r\n                        if (rows.length > index) {\r\n                            return $(rows[index])\r\n                        }\r\n                    }\r\n                },\r\n                updateFreeSpaceRowHeight: function($table) {\r\n                    var dataController = this._dataController;\r\n                    var itemCount = dataController.items(true).length;\r\n                    var contentElement = this._findContentElement();\r\n                    var freeSpaceRowElements = this._getFreeSpaceRowElements($table);\r\n                    if (freeSpaceRowElements && contentElement && dataController.totalCount() >= 0) {\r\n                        var isFreeSpaceRowVisible = false;\r\n                        if (itemCount > 0) {\r\n                            if (!this._hasHeight) {\r\n                                var freeSpaceRowCount = dataController.pageSize() - itemCount;\r\n                                var scrollingMode = this.option(\"scrolling.mode\");\r\n                                if (freeSpaceRowCount > 0 && dataController.pageCount() > 1 && \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\r\n                                    setHeight(freeSpaceRowElements, freeSpaceRowCount * this._rowHeight);\r\n                                    isFreeSpaceRowVisible = true\r\n                                }\r\n                                if (!isFreeSpaceRowVisible && $table) {\r\n                                    setHeight(freeSpaceRowElements, 0)\r\n                                } else {\r\n                                    freeSpaceRowElements.toggle(isFreeSpaceRowVisible)\r\n                                }\r\n                                this._updateLastRowBorder(isFreeSpaceRowVisible)\r\n                            } else {\r\n                                freeSpaceRowElements.hide();\r\n                                deferUpdate(() => {\r\n                                    var scrollbarWidth = this.getScrollbarWidth(true);\r\n                                    var elementHeightWithoutScrollbar = this.element().height() - scrollbarWidth;\r\n                                    var contentHeight = contentElement.outerHeight();\r\n                                    var showFreeSpaceRow = elementHeightWithoutScrollbar - contentHeight > 0;\r\n                                    var rowsHeight = this._getRowsHeight(contentElement.children().first());\r\n                                    var $tableElement = $table || this.getTableElements();\r\n                                    var borderTopWidth = Math.ceil(parseFloat($tableElement.css(\"borderTopWidth\")));\r\n                                    var heightCorrection = this._getHeightCorrection();\r\n                                    var resultHeight = elementHeightWithoutScrollbar - rowsHeight - borderTopWidth - heightCorrection;\r\n                                    if (showFreeSpaceRow) {\r\n                                        deferRender(() => {\r\n                                            freeSpaceRowElements.css(\"height\", resultHeight);\r\n                                            isFreeSpaceRowVisible = true;\r\n                                            freeSpaceRowElements.show()\r\n                                        })\r\n                                    }\r\n                                    deferRender(() => this._updateLastRowBorder(isFreeSpaceRowVisible))\r\n                                })\r\n                            }\r\n                        } else {\r\n                            freeSpaceRowElements.css(\"height\", 0);\r\n                            freeSpaceRowElements.show();\r\n                            this._updateLastRowBorder(true)\r\n                        }\r\n                    }\r\n                },\r\n                _getHeightCorrection: function() {\r\n                    var isZoomedWebkit = browser.webkit && this._getDevicePixelRatio() >= 2;\r\n                    var isChromeLatest = browser.chrome && browser.version >= 91;\r\n                    var hasExtraBorderTop = browser.mozilla && browser.version >= 70 && !this.option(\"showRowLines\");\r\n                    return isZoomedWebkit || hasExtraBorderTop || isChromeLatest ? 1 : 0\r\n                },\r\n                _columnOptionChanged: function(e) {\r\n                    var optionNames = e.optionNames;\r\n                    if (e.changeTypes.grouping) {\r\n                        return\r\n                    }\r\n                    if (optionNames.width || optionNames.visibleWidth) {\r\n                        this.callBase(e);\r\n                        this._fireColumnResizedCallbacks()\r\n                    }\r\n                },\r\n                getScrollable: function() {\r\n                    return this._scrollable\r\n                },\r\n                init: function() {\r\n                    var that = this;\r\n                    var dataController = that.getController(\"data\");\r\n                    that.callBase();\r\n                    that._editorFactoryController = that.getController(\"editorFactory\");\r\n                    that._rowHeight = 0;\r\n                    that._scrollTop = 0;\r\n                    that._scrollLeft = -1;\r\n                    that._scrollRight = 0;\r\n                    that._hasHeight = false;\r\n                    dataController.loadingChanged.add((function(isLoading, messageText) {\r\n                        that.setLoading(isLoading, messageText)\r\n                    }));\r\n                    dataController.dataSourceChanged.add((function() {\r\n                        if (that._scrollLeft >= 0) {\r\n                            that._handleScroll({\r\n                                component: that.getScrollable(),\r\n                                scrollOffset: {\r\n                                    top: that._scrollTop,\r\n                                    left: that._scrollLeft\r\n                                }\r\n                            })\r\n                        }\r\n                    }))\r\n                },\r\n                _handleDataChanged: function(change) {\r\n                    switch (change.changeType) {\r\n                        case \"refresh\":\r\n                        case \"prepend\":\r\n                        case \"append\":\r\n                        case \"update\":\r\n                            this.render(null, change);\r\n                            break;\r\n                        default:\r\n                            this._update(change)\r\n                    }\r\n                },\r\n                publicMethods: function() {\r\n                    return [\"isScrollbarVisible\", \"getTopVisibleRowData\", \"getScrollbarWidth\", \"getCellElement\", \"getRowElement\", \"getScrollable\"]\r\n                },\r\n                contentWidth: function() {\r\n                    return this.element().width() - this.getScrollbarWidth()\r\n                },\r\n                getScrollbarWidth: function(isHorizontal) {\r\n                    var scrollableContainer = this._scrollableContainer && this._scrollableContainer.get(0);\r\n                    var scrollbarWidth = 0;\r\n                    if (scrollableContainer) {\r\n                        if (!isHorizontal) {\r\n                            scrollbarWidth = scrollableContainer.clientWidth ? scrollableContainer.offsetWidth - scrollableContainer.clientWidth : 0\r\n                        } else {\r\n                            scrollbarWidth = scrollableContainer.clientHeight ? scrollableContainer.offsetHeight - scrollableContainer.clientHeight : 0;\r\n                            scrollbarWidth += (that = this, scrollable = that.getScrollable(), scrollable ? Math.ceil(parseFloat($(scrollable.content()).css(\"paddingBottom\"))) : 0)\r\n                        }\r\n                    }\r\n                    var that, scrollable;\r\n                    return scrollbarWidth > 0 ? scrollbarWidth : 0\r\n                },\r\n                _fireColumnResizedCallbacks: function() {\r\n                    var lastColumnWidths = this._lastColumnWidths || [];\r\n                    var columnWidths = [];\r\n                    var columns = this.getColumns();\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        columnWidths[i] = columns[i].visibleWidth;\r\n                        if (columns[i].resizedCallbacks && !isDefined(columns[i].groupIndex) && lastColumnWidths[i] !== columnWidths[i]) {\r\n                            columns[i].resizedCallbacks.fire(columnWidths[i])\r\n                        }\r\n                    }\r\n                    this._lastColumnWidths = columnWidths\r\n                },\r\n                _updateLastRowBorder: function(isFreeSpaceRowVisible) {\r\n                    if (this.option(\"showBorders\") && this.option(\"showRowLines\") && !isFreeSpaceRowVisible) {\r\n                        this.element().addClass(LAST_ROW_BORDER)\r\n                    } else {\r\n                        this.element().removeClass(LAST_ROW_BORDER)\r\n                    }\r\n                },\r\n                _updateScrollable: function() {\r\n                    var dxScrollable = Scrollable.getInstance(this.element());\r\n                    if (dxScrollable) {\r\n                        dxScrollable.update();\r\n                        this._updateHorizontalScrollPosition()\r\n                    }\r\n                },\r\n                _updateHorizontalScrollPosition: function() {\r\n                    var scrollable = this.getScrollable();\r\n                    var scrollLeft = scrollable && scrollable.scrollOffset().left;\r\n                    var rtlEnabled = this.option(\"rtlEnabled\");\r\n                    if (rtlEnabled) {\r\n                        var maxHorizontalScrollOffset = getMaxHorizontalScrollOffset(scrollable);\r\n                        var scrollRight = maxHorizontalScrollOffset - scrollLeft;\r\n                        if (scrollRight !== this._scrollRight) {\r\n                            this._scrollLeft = maxHorizontalScrollOffset - this._scrollRight\r\n                        }\r\n                    }\r\n                    if (this._scrollLeft >= 0 && scrollLeft !== this._scrollLeft) {\r\n                        scrollable.scrollTo({\r\n                            x: this._scrollLeft\r\n                        })\r\n                    }\r\n                },\r\n                _resizeCore: function() {\r\n                    var that = this;\r\n                    that._fireColumnResizedCallbacks();\r\n                    that._updateRowHeight();\r\n                    deferRender((function() {\r\n                        that._renderScrollable();\r\n                        that.renderNoDataText();\r\n                        that.updateFreeSpaceRowHeight();\r\n                        deferUpdate((function() {\r\n                            that._updateScrollable()\r\n                        }))\r\n                    }))\r\n                },\r\n                scrollTo: function(location) {\r\n                    var $element = this.element();\r\n                    var dxScrollable = $element && Scrollable.getInstance($element);\r\n                    if (dxScrollable) {\r\n                        dxScrollable.scrollTo(location)\r\n                    }\r\n                },\r\n                height: function(_height, hasHeight) {\r\n                    var that = this;\r\n                    var $element = this.element();\r\n                    if (0 === arguments.length) {\r\n                        return $element ? $element.outerHeight(true) : 0\r\n                    }\r\n                    that._hasHeight = void 0 === hasHeight ? \"auto\" !== _height : hasHeight;\r\n                    if (isDefined(_height) && $element) {\r\n                        setHeight($element, _height)\r\n                    }\r\n                },\r\n                setLoading: function(isLoading, messageText) {\r\n                    var loadPanel = this._loadPanel;\r\n                    var dataController = this._dataController;\r\n                    var loadPanelOptions = this.option(\"loadPanel\") || {};\r\n                    var animation = dataController.isLoaded() ? loadPanelOptions.animation : null;\r\n                    var $element = this.element();\r\n                    if (!hasWindow()) {\r\n                        return\r\n                    }\r\n                    if (!loadPanel && void 0 !== messageText && dataController.isLocalStore() && \"auto\" === loadPanelOptions.enabled && $element) {\r\n                        this._renderLoadPanel($element, $element.parent());\r\n                        loadPanel = this._loadPanel\r\n                    }\r\n                    if (loadPanel) {\r\n                        var visibilityOptions = {\r\n                            message: messageText || loadPanelOptions.text,\r\n                            animation: animation,\r\n                            visible: isLoading\r\n                        };\r\n                        clearTimeout(this._hideLoadingTimeoutID);\r\n                        if (loadPanel.option(\"visible\") && !isLoading) {\r\n                            this._hideLoadingTimeoutID = setTimeout((function() {\r\n                                loadPanel.option(visibilityOptions)\r\n                            }), LOADPANEL_HIDE_TIMEOUT)\r\n                        } else {\r\n                            loadPanel.option(visibilityOptions)\r\n                        }\r\n                    }\r\n                },\r\n                setRowsOpacity: function(columnIndex, value) {\r\n                    var $rows = this._getRowElements().not(\".\" + GROUP_ROW_CLASS) || [];\r\n                    this._setRowsOpacityCore($rows, this.getColumns(), columnIndex, value)\r\n                },\r\n                _getCellElementsCore: function(rowIndex) {\r\n                    var $cells = this.callBase.apply(this, arguments);\r\n                    if ($cells) {\r\n                        var groupCellIndex = $cells.filter(\".\" + GROUP_CELL_CLASS).index();\r\n                        if (groupCellIndex >= 0 && $cells.length > groupCellIndex + 1) {\r\n                            return $cells.slice(0, groupCellIndex + 1)\r\n                        }\r\n                    }\r\n                    return $cells\r\n                },\r\n                getTopVisibleItemIndex: function(isFloor) {\r\n                    var itemIndex = 0;\r\n                    var prevOffsetTop = 0;\r\n                    var offsetTop = 0;\r\n                    var scrollPosition = this._scrollTop;\r\n                    var $contentElement = this._findContentElement();\r\n                    var contentElementOffsetTop = $contentElement && $contentElement.offset().top;\r\n                    var items = this._dataController.items();\r\n                    var tableElement = this.getTableElement();\r\n                    if (items.length && tableElement) {\r\n                        var rowElements = this._getRowElements(tableElement).filter(\":visible\");\r\n                        for (itemIndex = 0; itemIndex < items.length; itemIndex++) {\r\n                            prevOffsetTop = offsetTop;\r\n                            var rowElement = rowElements.eq(itemIndex);\r\n                            if (rowElement.length) {\r\n                                offsetTop = rowElement.offset().top - contentElementOffsetTop;\r\n                                if (offsetTop > scrollPosition) {\r\n                                    if (itemIndex) {\r\n                                        if (isFloor || 2 * scrollPosition < Math.round(offsetTop + prevOffsetTop)) {\r\n                                            itemIndex--\r\n                                        }\r\n                                    }\r\n                                    break\r\n                                }\r\n                            }\r\n                        }\r\n                        if (itemIndex && itemIndex === items.length) {\r\n                            itemIndex--\r\n                        }\r\n                    }\r\n                    return itemIndex\r\n                },\r\n                getTopVisibleRowData: function() {\r\n                    var itemIndex = this.getTopVisibleItemIndex();\r\n                    var items = this._dataController.items();\r\n                    if (items[itemIndex]) {\r\n                        return items[itemIndex].data\r\n                    }\r\n                },\r\n                _scrollToElement: function($element, offset) {\r\n                    var scrollable = this.getScrollable();\r\n                    scrollable && scrollable.scrollToElement($element, offset)\r\n                },\r\n                optionChanged: function(args) {\r\n                    this.callBase(args);\r\n                    switch (args.name) {\r\n                        case \"wordWrapEnabled\":\r\n                        case \"showColumnLines\":\r\n                        case \"showRowLines\":\r\n                        case \"rowAlternationEnabled\":\r\n                        case \"rowTemplate\":\r\n                        case \"twoWayBindingEnabled\":\r\n                            this._invalidate(true, true);\r\n                            args.handled = true;\r\n                            break;\r\n                        case \"scrolling\":\r\n                            this._rowHeight = null;\r\n                            this._tableElement = null;\r\n                            args.handled = true;\r\n                            break;\r\n                        case \"rtlEnabled\":\r\n                            this._rowHeight = null;\r\n                            this._tableElement = null;\r\n                            break;\r\n                        case \"loadPanel\":\r\n                            this._tableElement = null;\r\n                            this._invalidate(true, \"loadPanel.enabled\" !== args.fullName);\r\n                            args.handled = true;\r\n                            break;\r\n                        case \"noDataText\":\r\n                            this.renderNoDataText();\r\n                            args.handled = true\r\n                    }\r\n                },\r\n                dispose: function() {\r\n                    clearTimeout(this._hideLoadingTimeoutID);\r\n                    this._scrollable && this._scrollable.dispose()\r\n                },\r\n                setScrollerSpacing: function() {}\r\n            }\r\n        }())\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}