{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.column_chooser.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { deferUpdate, noop } from \"../../core/utils/common\";\nimport modules from \"./ui.grid_core.modules\";\nimport { ColumnsView } from \"./ui.grid_core.columns_view\";\nimport messageLocalization from \"../../localization/message\";\nimport { isMaterial as isMaterialTheme, isGeneric, current } from \"../themes\";\nimport Button from \"../button\";\nimport TreeView from \"../tree_view\";\nimport devices from \"../../core/devices\";\nimport Popup from \"../popup\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { each } from \"../../core/utils/iterator\";\nvar COLUMN_CHOOSER_CLASS = \"column-chooser\";\nvar COLUMN_CHOOSER_BUTTON_CLASS = \"column-chooser-button\";\nvar NOTOUCH_ACTION_CLASS = \"notouch-action\";\nvar COLUMN_CHOOSER_LIST_CLASS = \"column-chooser-list\";\nvar COLUMN_CHOOSER_PLAIN_CLASS = \"column-chooser-plain\";\nvar COLUMN_CHOOSER_DRAG_CLASS = \"column-chooser-mode-drag\";\nvar COLUMN_CHOOSER_SELECT_CLASS = \"column-chooser-mode-select\";\nvar COLUMN_CHOOSER_ICON_NAME = \"column-chooser\";\nvar COLUMN_CHOOSER_ITEM_CLASS = \"dx-column-chooser-item\";\nvar TREEVIEW_NODE_SELECTOR = \".dx-treeview-node\";\nvar CHECKBOX_SELECTOR = \".dx-checkbox\";\nvar CLICK_TIMEOUT = 300;\n\nvar processItems = function (that, chooserColumns) {\n  var items = [];\n  var isSelectMode = \"select\" === that.option(\"columnChooser.mode\");\n\n  if (chooserColumns.length) {\n    each(chooserColumns, function (index, column) {\n      var item = {\n        text: column.caption,\n        cssClass: column.cssClass,\n        allowHiding: column.allowHiding,\n        expanded: true,\n        id: column.index,\n        disabled: false,\n        disableCheckBox: false === column.allowHiding,\n        parentId: isDefined(column.ownerBand) ? column.ownerBand : null\n      };\n\n      if (isSelectMode) {\n        item.selected = column.visible;\n      }\n\n      items.push(item);\n    });\n  }\n\n  return items;\n};\n\nvar ColumnChooserController = modules.ViewController.inherit({\n  renderShowColumnChooserButton: function ($element) {\n    var that = this;\n    var columnChooserButtonClass = that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS);\n    var columnChooserEnabled = that.option(\"columnChooser.enabled\");\n    var $showColumnChooserButton = $element.find(\".\" + columnChooserButtonClass);\n    var $columnChooserButton;\n\n    if (columnChooserEnabled) {\n      if (!$showColumnChooserButton.length) {\n        $columnChooserButton = $(\"<div>\").addClass(columnChooserButtonClass).appendTo($element);\n\n        that._createComponent($columnChooserButton, Button, {\n          icon: COLUMN_CHOOSER_ICON_NAME,\n          onClick: function () {\n            that.getView(\"columnChooserView\").showColumnChooser();\n          },\n          hint: that.option(\"columnChooser.title\"),\n          integrationOptions: {}\n        });\n      } else {\n        $showColumnChooserButton.show();\n      }\n    } else {\n      $showColumnChooserButton.hide();\n    }\n  },\n  getPosition: function () {\n    var rowsView = this.getView(\"rowsView\");\n    return {\n      my: \"right bottom\",\n      at: \"right bottom\",\n      of: rowsView && rowsView.element(),\n      collision: \"fit\",\n      offset: \"-2 -2\",\n      boundaryOffset: \"2 2\"\n    };\n  }\n});\nvar ColumnChooserView = ColumnsView.inherit({\n  _resizeCore: noop,\n  _isWinDevice: function () {\n    return !!devices.real().win;\n  },\n  _updateList: function (change) {\n    var items;\n\n    var $popupContent = this._popupContainer.$content();\n\n    var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\n    var columnChooserList = this._columnChooserList;\n\n    var chooserColumns = this._columnsController.getChooserColumns(isSelectMode);\n\n    if (isSelectMode && columnChooserList && change && \"selection\" === change.changeType) {\n      items = processItems(this, chooserColumns);\n\n      for (var i = 0; i < items.length; i++) {\n        var selected = items[i].selected;\n        var id = items[i].id;\n\n        if (id === change.columnIndex) {\n          if (selected) {\n            columnChooserList.selectItem(id, selected);\n          } else {\n            columnChooserList.unselectItem(id, selected);\n          }\n        }\n      }\n    } else if (!isSelectMode || !columnChooserList || \"full\" === change) {\n      this._popupContainer.$wrapper().toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_DRAG_CLASS), !isSelectMode).toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_SELECT_CLASS), isSelectMode);\n\n      items = processItems(this, chooserColumns);\n\n      this._renderTreeView($popupContent, items);\n    }\n  },\n  _initializePopupContainer: function () {\n    var that = this;\n    var $element = that.element().addClass(that.addWidgetPrefix(COLUMN_CHOOSER_CLASS));\n    var columnChooserOptions = that.option(\"columnChooser\");\n    var themeName = current();\n    var isGenericTheme = isGeneric(themeName);\n    var isMaterial = isMaterialTheme(themeName);\n    var dxPopupOptions = {\n      visible: false,\n      shading: false,\n      showCloseButton: false,\n      dragEnabled: true,\n      resizeEnabled: true,\n      toolbarItems: [{\n        text: columnChooserOptions.title,\n        toolbar: \"top\",\n        location: isGenericTheme || isMaterial ? \"before\" : \"center\"\n      }],\n      position: that.getController(\"columnChooser\").getPosition(),\n      width: columnChooserOptions.width,\n      height: columnChooserOptions.height,\n      rtlEnabled: that.option(\"rtlEnabled\"),\n      onHidden: function () {\n        if (that._isWinDevice()) {\n          $(\"body\").removeClass(that.addWidgetPrefix(NOTOUCH_ACTION_CLASS));\n        }\n      },\n      container: columnChooserOptions.container\n    };\n\n    if (isGenericTheme || isMaterial) {\n      extend(dxPopupOptions, {\n        showCloseButton: true\n      });\n    } else {\n      dxPopupOptions.toolbarItems[dxPopupOptions.toolbarItems.length] = {\n        shortcut: \"cancel\"\n      };\n    }\n\n    if (!isDefined(this._popupContainer)) {\n      that._popupContainer = that._createComponent($element, Popup, dxPopupOptions);\n\n      that._popupContainer.on(\"optionChanged\", function (args) {\n        if (\"visible\" === args.name) {\n          that.renderCompleted.fire();\n        }\n      });\n    } else {\n      this._popupContainer.option(dxPopupOptions);\n    }\n  },\n  _renderCore: function (change) {\n    if (this._popupContainer) {\n      this._updateList(change);\n    }\n  },\n  _renderTreeView: function ($container, items) {\n    var that = this;\n    var columnChooser = this.option(\"columnChooser\");\n    var isSelectMode = \"select\" === columnChooser.mode;\n    var treeViewConfig = {\n      items: items,\n      dataStructure: \"plain\",\n      activeStateEnabled: true,\n      focusStateEnabled: true,\n      hoverStateEnabled: true,\n      itemTemplate: \"item\",\n      showCheckBoxesMode: \"none\",\n      rootValue: null,\n      searchEnabled: columnChooser.allowSearch,\n      searchTimeout: columnChooser.searchTimeout,\n      onItemRendered: function (e) {\n        if (e.itemData.disableCheckBox) {\n          var $treeViewNode = $(e.itemElement).closest(TREEVIEW_NODE_SELECTOR);\n          var $checkBox;\n\n          if ($treeViewNode.length) {\n            $checkBox = $treeViewNode.find(CHECKBOX_SELECTOR);\n\n            if ($checkBox.length) {\n              var checkBoxInstance = $checkBox.data(\"dxCheckBox\");\n              checkBoxInstance && checkBoxInstance.option(\"disabled\", true);\n            }\n          }\n        }\n      }\n    };\n    var scrollableInstance = $container.find(\".dx-scrollable\").data(\"dxScrollable\");\n    var scrollTop = scrollableInstance && scrollableInstance.scrollTop();\n\n    if (isSelectMode && !this._columnsController.isBandColumnsUsed()) {\n      $container.addClass(this.addWidgetPrefix(COLUMN_CHOOSER_PLAIN_CLASS));\n    }\n\n    treeViewConfig.onContentReady = function (e) {\n      deferUpdate(function () {\n        if (scrollTop) {\n          var scrollable = $(e.element).find(\".dx-scrollable\").data(\"dxScrollable\");\n          scrollable && scrollable.scrollTo({\n            y: scrollTop\n          });\n        }\n\n        that.renderCompleted.fire();\n      });\n    };\n\n    if (this._isWinDevice()) {\n      treeViewConfig.useNativeScrolling = false;\n    }\n\n    extend(treeViewConfig, isSelectMode ? this._prepareSelectModeConfig() : this._prepareDragModeConfig());\n\n    if (this._columnChooserList) {\n      if (!treeViewConfig.searchEnabled) {\n        treeViewConfig.searchValue = \"\";\n      }\n\n      this._columnChooserList.option(treeViewConfig);\n    } else {\n      this._columnChooserList = this._createComponent($container, TreeView, treeViewConfig);\n      $container.addClass(this.addWidgetPrefix(COLUMN_CHOOSER_LIST_CLASS));\n    }\n  },\n  _prepareDragModeConfig: function () {\n    var columnChooserOptions = this.option(\"columnChooser\");\n    return {\n      noDataText: columnChooserOptions.emptyPanelText,\n      activeStateEnabled: false,\n      focusStateEnabled: false,\n      hoverStateEnabled: false,\n      itemTemplate: function (data, index, item) {\n        $(item).text(data.text).parent().addClass(data.cssClass).addClass(COLUMN_CHOOSER_ITEM_CLASS);\n      }\n    };\n  },\n  _prepareSelectModeConfig: function () {\n    var that = this;\n    return {\n      selectNodesRecursive: false,\n      showCheckBoxesMode: \"normal\",\n      onItemSelectionChanged: function (e) {\n        var visibleColumns = that._columnsController.getVisibleColumns().filter(function (item) {\n          return !item.command;\n        });\n\n        var isLastColumnUnselected = 1 === visibleColumns.length && !e.itemData.selected;\n\n        if (isLastColumnUnselected) {\n          e.component.selectItem(e.itemElement);\n        } else {\n          setTimeout(function () {\n            that._columnsController.columnOption(e.itemData.id, \"visible\", e.itemData.selected);\n          }, CLICK_TIMEOUT);\n        }\n      }\n    };\n  },\n  _columnOptionChanged: function (e) {\n    var changeTypes = e.changeTypes;\n    var optionNames = e.optionNames;\n    var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\n    this.callBase(e);\n\n    if (isSelectMode) {\n      var needPartialRender = optionNames.visible && 1 === optionNames.length && void 0 !== e.columnIndex;\n      var needFullRender = optionNames.showInColumnChooser || optionNames.caption || optionNames.visible || changeTypes.columns && optionNames.all;\n\n      if (needPartialRender) {\n        this.render(null, {\n          changeType: \"selection\",\n          columnIndex: e.columnIndex\n        });\n      } else if (needFullRender) {\n        this.render(null, \"full\");\n      }\n    }\n  },\n  optionChanged: function (args) {\n    switch (args.name) {\n      case \"columnChooser\":\n        this._initializePopupContainer();\n\n        this.render(null, \"full\");\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  getColumnElements: function () {\n    var result = [];\n    var $node;\n    var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\n\n    var chooserColumns = this._columnsController.getChooserColumns(isSelectMode);\n\n    var $content = this._popupContainer && this._popupContainer.$content();\n\n    var $nodes = $content && $content.find(\".dx-treeview-node\");\n\n    if ($nodes) {\n      chooserColumns.forEach(function (column) {\n        $node = $nodes.filter(\"[data-item-id = '\" + column.index + \"']\");\n        var item = $node.length ? $node.children(\".\" + COLUMN_CHOOSER_ITEM_CLASS).get(0) : null;\n        result.push(item);\n      });\n    }\n\n    return $(result);\n  },\n  getName: function () {\n    return \"columnChooser\";\n  },\n  getColumns: function () {\n    return this._columnsController.getChooserColumns();\n  },\n  allowDragging: function (column, sourceLocation) {\n    var columnVisible = column && column.allowHiding && (\"columnChooser\" !== sourceLocation || !column.visible && this._columnsController.isParentColumnVisible(column.index));\n\n    return this.isColumnChooserVisible() && columnVisible;\n  },\n  getBoundingRect: function () {\n    var container = this._popupContainer && this._popupContainer.$overlayContent();\n\n    if (container && container.is(\":visible\")) {\n      var offset = container.offset();\n      return {\n        left: offset.left,\n        top: offset.top,\n        right: offset.left + container.outerWidth(),\n        bottom: offset.top + container.outerHeight()\n      };\n    }\n\n    return null;\n  },\n  showColumnChooser: function () {\n    if (!this._popupContainer) {\n      this._initializePopupContainer();\n\n      this.render();\n    }\n\n    this._popupContainer.show();\n\n    if (this._isWinDevice()) {\n      $(\"body\").addClass(this.addWidgetPrefix(NOTOUCH_ACTION_CLASS));\n    }\n  },\n  hideColumnChooser: function () {\n    if (this._popupContainer) {\n      this._popupContainer.hide();\n    }\n  },\n  isColumnChooserVisible: function () {\n    var popupContainer = this._popupContainer;\n    return popupContainer && popupContainer.option(\"visible\");\n  },\n  publicMethods: function () {\n    return [\"showColumnChooser\", \"hideColumnChooser\"];\n  }\n});\nexport var columnChooserModule = {\n  defaultOptions: function () {\n    return {\n      columnChooser: {\n        enabled: false,\n        allowSearch: false,\n        searchTimeout: 500,\n        mode: \"dragAndDrop\",\n        width: 250,\n        height: 260,\n        title: messageLocalization.format(\"dxDataGrid-columnChooserTitle\"),\n        emptyPanelText: messageLocalization.format(\"dxDataGrid-columnChooserEmptyText\"),\n        container: void 0\n      }\n    };\n  },\n  controllers: {\n    columnChooser: ColumnChooserController\n  },\n  views: {\n    columnChooserView: ColumnChooserView\n  },\n  extenders: {\n    views: {\n      headerPanel: {\n        _getToolbarItems: function () {\n          var items = this.callBase();\n          return this._appendColumnChooserItem(items);\n        },\n        _appendColumnChooserItem: function (items) {\n          var that = this;\n          var columnChooserEnabled = that.option(\"columnChooser.enabled\");\n\n          if (columnChooserEnabled) {\n            var hintText = that.option(\"columnChooser.title\");\n            var toolbarItem = {\n              widget: \"dxButton\",\n              options: {\n                icon: COLUMN_CHOOSER_ICON_NAME,\n                onClick: function () {\n                  that.component.getView(\"columnChooserView\").showColumnChooser();\n                },\n                hint: hintText,\n                text: hintText,\n                onInitialized: function (e) {\n                  $(e.element).addClass(that._getToolbarButtonClass(that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS)));\n                }\n              },\n              showText: \"inMenu\",\n              location: \"after\",\n              name: \"columnChooserButton\",\n              locateInMenu: \"auto\",\n              sortIndex: 40\n            };\n            items.push(toolbarItem);\n          }\n\n          return items;\n        },\n        optionChanged: function (args) {\n          switch (args.name) {\n            case \"columnChooser\":\n              this._invalidate();\n\n              args.handled = true;\n              break;\n\n            default:\n              this.callBase(args);\n          }\n        },\n        isVisible: function () {\n          var columnChooserEnabled = this.option(\"columnChooser.enabled\");\n          return this.callBase() || columnChooserEnabled;\n        }\n      }\n    },\n    controllers: {\n      columns: {\n        allowMoveColumn: function (fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\n          var columnChooserMode = this.option(\"columnChooser.mode\");\n          var isMoveColumnDisallowed = \"select\" === columnChooserMode && \"columnChooser\" === targetLocation;\n          return isMoveColumnDisallowed ? false : this.callBase(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.column_chooser.js"],"names":["$","deferUpdate","noop","modules","ColumnsView","messageLocalization","isMaterial","isMaterialTheme","isGeneric","current","Button","TreeView","devices","Popup","isDefined","extend","each","COLUMN_CHOOSER_CLASS","COLUMN_CHOOSER_BUTTON_CLASS","NOTOUCH_ACTION_CLASS","COLUMN_CHOOSER_LIST_CLASS","COLUMN_CHOOSER_PLAIN_CLASS","COLUMN_CHOOSER_DRAG_CLASS","COLUMN_CHOOSER_SELECT_CLASS","COLUMN_CHOOSER_ICON_NAME","COLUMN_CHOOSER_ITEM_CLASS","TREEVIEW_NODE_SELECTOR","CHECKBOX_SELECTOR","CLICK_TIMEOUT","processItems","that","chooserColumns","items","isSelectMode","option","length","index","column","item","text","caption","cssClass","allowHiding","expanded","id","disabled","disableCheckBox","parentId","ownerBand","selected","visible","push","ColumnChooserController","ViewController","inherit","renderShowColumnChooserButton","$element","columnChooserButtonClass","addWidgetPrefix","columnChooserEnabled","$showColumnChooserButton","find","$columnChooserButton","addClass","appendTo","_createComponent","icon","onClick","getView","showColumnChooser","hint","integrationOptions","show","hide","getPosition","rowsView","my","at","of","element","collision","offset","boundaryOffset","ColumnChooserView","_resizeCore","_isWinDevice","real","win","_updateList","change","$popupContent","_popupContainer","$content","columnChooserList","_columnChooserList","_columnsController","getChooserColumns","changeType","i","columnIndex","selectItem","unselectItem","$wrapper","toggleClass","_renderTreeView","_initializePopupContainer","columnChooserOptions","themeName","isGenericTheme","dxPopupOptions","shading","showCloseButton","dragEnabled","resizeEnabled","toolbarItems","title","toolbar","location","position","getController","width","height","rtlEnabled","onHidden","removeClass","container","shortcut","on","args","name","renderCompleted","fire","_renderCore","$container","columnChooser","mode","treeViewConfig","dataStructure","activeStateEnabled","focusStateEnabled","hoverStateEnabled","itemTemplate","showCheckBoxesMode","rootValue","searchEnabled","allowSearch","searchTimeout","onItemRendered","e","itemData","$treeViewNode","itemElement","closest","$checkBox","checkBoxInstance","data","scrollableInstance","scrollTop","isBandColumnsUsed","onContentReady","scrollable","scrollTo","y","useNativeScrolling","_prepareSelectModeConfig","_prepareDragModeConfig","searchValue","noDataText","emptyPanelText","parent","selectNodesRecursive","onItemSelectionChanged","visibleColumns","getVisibleColumns","filter","command","isLastColumnUnselected","component","setTimeout","columnOption","_columnOptionChanged","changeTypes","optionNames","callBase","needPartialRender","needFullRender","showInColumnChooser","columns","all","render","optionChanged","getColumnElements","result","$node","$nodes","forEach","children","get","getName","getColumns","allowDragging","sourceLocation","columnVisible","isParentColumnVisible","isColumnChooserVisible","getBoundingRect","$overlayContent","is","left","top","right","outerWidth","bottom","outerHeight","hideColumnChooser","popupContainer","publicMethods","columnChooserModule","defaultOptions","enabled","format","controllers","views","columnChooserView","extenders","headerPanel","_getToolbarItems","_appendColumnChooserItem","hintText","toolbarItem","widget","options","onInitialized","_getToolbarButtonClass","showText","locateInMenu","sortIndex","_invalidate","handled","isVisible","allowMoveColumn","fromVisibleIndex","toVisibleIndex","targetLocation","columnChooserMode","isMoveColumnDisallowed"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.column_chooser.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    deferUpdate,\r\n    noop\r\n} from \"../../core/utils/common\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport {\r\n    ColumnsView\r\n} from \"./ui.grid_core.columns_view\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    isMaterial as isMaterialTheme,\r\n    isGeneric,\r\n    current\r\n} from \"../themes\";\r\nimport Button from \"../button\";\r\nimport TreeView from \"../tree_view\";\r\nimport devices from \"../../core/devices\";\r\nimport Popup from \"../popup\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nvar COLUMN_CHOOSER_CLASS = \"column-chooser\";\r\nvar COLUMN_CHOOSER_BUTTON_CLASS = \"column-chooser-button\";\r\nvar NOTOUCH_ACTION_CLASS = \"notouch-action\";\r\nvar COLUMN_CHOOSER_LIST_CLASS = \"column-chooser-list\";\r\nvar COLUMN_CHOOSER_PLAIN_CLASS = \"column-chooser-plain\";\r\nvar COLUMN_CHOOSER_DRAG_CLASS = \"column-chooser-mode-drag\";\r\nvar COLUMN_CHOOSER_SELECT_CLASS = \"column-chooser-mode-select\";\r\nvar COLUMN_CHOOSER_ICON_NAME = \"column-chooser\";\r\nvar COLUMN_CHOOSER_ITEM_CLASS = \"dx-column-chooser-item\";\r\nvar TREEVIEW_NODE_SELECTOR = \".dx-treeview-node\";\r\nvar CHECKBOX_SELECTOR = \".dx-checkbox\";\r\nvar CLICK_TIMEOUT = 300;\r\nvar processItems = function(that, chooserColumns) {\r\n    var items = [];\r\n    var isSelectMode = \"select\" === that.option(\"columnChooser.mode\");\r\n    if (chooserColumns.length) {\r\n        each(chooserColumns, (function(index, column) {\r\n            var item = {\r\n                text: column.caption,\r\n                cssClass: column.cssClass,\r\n                allowHiding: column.allowHiding,\r\n                expanded: true,\r\n                id: column.index,\r\n                disabled: false,\r\n                disableCheckBox: false === column.allowHiding,\r\n                parentId: isDefined(column.ownerBand) ? column.ownerBand : null\r\n            };\r\n            if (isSelectMode) {\r\n                item.selected = column.visible\r\n            }\r\n            items.push(item)\r\n        }))\r\n    }\r\n    return items\r\n};\r\nvar ColumnChooserController = modules.ViewController.inherit({\r\n    renderShowColumnChooserButton: function($element) {\r\n        var that = this;\r\n        var columnChooserButtonClass = that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS);\r\n        var columnChooserEnabled = that.option(\"columnChooser.enabled\");\r\n        var $showColumnChooserButton = $element.find(\".\" + columnChooserButtonClass);\r\n        var $columnChooserButton;\r\n        if (columnChooserEnabled) {\r\n            if (!$showColumnChooserButton.length) {\r\n                $columnChooserButton = $(\"<div>\").addClass(columnChooserButtonClass).appendTo($element);\r\n                that._createComponent($columnChooserButton, Button, {\r\n                    icon: COLUMN_CHOOSER_ICON_NAME,\r\n                    onClick: function() {\r\n                        that.getView(\"columnChooserView\").showColumnChooser()\r\n                    },\r\n                    hint: that.option(\"columnChooser.title\"),\r\n                    integrationOptions: {}\r\n                })\r\n            } else {\r\n                $showColumnChooserButton.show()\r\n            }\r\n        } else {\r\n            $showColumnChooserButton.hide()\r\n        }\r\n    },\r\n    getPosition: function() {\r\n        var rowsView = this.getView(\"rowsView\");\r\n        return {\r\n            my: \"right bottom\",\r\n            at: \"right bottom\",\r\n            of: rowsView && rowsView.element(),\r\n            collision: \"fit\",\r\n            offset: \"-2 -2\",\r\n            boundaryOffset: \"2 2\"\r\n        }\r\n    }\r\n});\r\nvar ColumnChooserView = ColumnsView.inherit({\r\n    _resizeCore: noop,\r\n    _isWinDevice: function() {\r\n        return !!devices.real().win\r\n    },\r\n    _updateList: function(change) {\r\n        var items;\r\n        var $popupContent = this._popupContainer.$content();\r\n        var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\r\n        var columnChooserList = this._columnChooserList;\r\n        var chooserColumns = this._columnsController.getChooserColumns(isSelectMode);\r\n        if (isSelectMode && columnChooserList && change && \"selection\" === change.changeType) {\r\n            items = processItems(this, chooserColumns);\r\n            for (var i = 0; i < items.length; i++) {\r\n                var selected = items[i].selected;\r\n                var id = items[i].id;\r\n                if (id === change.columnIndex) {\r\n                    if (selected) {\r\n                        columnChooserList.selectItem(id, selected)\r\n                    } else {\r\n                        columnChooserList.unselectItem(id, selected)\r\n                    }\r\n                }\r\n            }\r\n        } else if (!isSelectMode || !columnChooserList || \"full\" === change) {\r\n            this._popupContainer.$wrapper().toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_DRAG_CLASS), !isSelectMode).toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_SELECT_CLASS), isSelectMode);\r\n            items = processItems(this, chooserColumns);\r\n            this._renderTreeView($popupContent, items)\r\n        }\r\n    },\r\n    _initializePopupContainer: function() {\r\n        var that = this;\r\n        var $element = that.element().addClass(that.addWidgetPrefix(COLUMN_CHOOSER_CLASS));\r\n        var columnChooserOptions = that.option(\"columnChooser\");\r\n        var themeName = current();\r\n        var isGenericTheme = isGeneric(themeName);\r\n        var isMaterial = isMaterialTheme(themeName);\r\n        var dxPopupOptions = {\r\n            visible: false,\r\n            shading: false,\r\n            showCloseButton: false,\r\n            dragEnabled: true,\r\n            resizeEnabled: true,\r\n            toolbarItems: [{\r\n                text: columnChooserOptions.title,\r\n                toolbar: \"top\",\r\n                location: isGenericTheme || isMaterial ? \"before\" : \"center\"\r\n            }],\r\n            position: that.getController(\"columnChooser\").getPosition(),\r\n            width: columnChooserOptions.width,\r\n            height: columnChooserOptions.height,\r\n            rtlEnabled: that.option(\"rtlEnabled\"),\r\n            onHidden: function() {\r\n                if (that._isWinDevice()) {\r\n                    $(\"body\").removeClass(that.addWidgetPrefix(NOTOUCH_ACTION_CLASS))\r\n                }\r\n            },\r\n            container: columnChooserOptions.container\r\n        };\r\n        if (isGenericTheme || isMaterial) {\r\n            extend(dxPopupOptions, {\r\n                showCloseButton: true\r\n            })\r\n        } else {\r\n            dxPopupOptions.toolbarItems[dxPopupOptions.toolbarItems.length] = {\r\n                shortcut: \"cancel\"\r\n            }\r\n        }\r\n        if (!isDefined(this._popupContainer)) {\r\n            that._popupContainer = that._createComponent($element, Popup, dxPopupOptions);\r\n            that._popupContainer.on(\"optionChanged\", (function(args) {\r\n                if (\"visible\" === args.name) {\r\n                    that.renderCompleted.fire()\r\n                }\r\n            }))\r\n        } else {\r\n            this._popupContainer.option(dxPopupOptions)\r\n        }\r\n    },\r\n    _renderCore: function(change) {\r\n        if (this._popupContainer) {\r\n            this._updateList(change)\r\n        }\r\n    },\r\n    _renderTreeView: function($container, items) {\r\n        var that = this;\r\n        var columnChooser = this.option(\"columnChooser\");\r\n        var isSelectMode = \"select\" === columnChooser.mode;\r\n        var treeViewConfig = {\r\n            items: items,\r\n            dataStructure: \"plain\",\r\n            activeStateEnabled: true,\r\n            focusStateEnabled: true,\r\n            hoverStateEnabled: true,\r\n            itemTemplate: \"item\",\r\n            showCheckBoxesMode: \"none\",\r\n            rootValue: null,\r\n            searchEnabled: columnChooser.allowSearch,\r\n            searchTimeout: columnChooser.searchTimeout,\r\n            onItemRendered: function(e) {\r\n                if (e.itemData.disableCheckBox) {\r\n                    var $treeViewNode = $(e.itemElement).closest(TREEVIEW_NODE_SELECTOR);\r\n                    var $checkBox;\r\n                    if ($treeViewNode.length) {\r\n                        $checkBox = $treeViewNode.find(CHECKBOX_SELECTOR);\r\n                        if ($checkBox.length) {\r\n                            var checkBoxInstance = $checkBox.data(\"dxCheckBox\");\r\n                            checkBoxInstance && checkBoxInstance.option(\"disabled\", true)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        var scrollableInstance = $container.find(\".dx-scrollable\").data(\"dxScrollable\");\r\n        var scrollTop = scrollableInstance && scrollableInstance.scrollTop();\r\n        if (isSelectMode && !this._columnsController.isBandColumnsUsed()) {\r\n            $container.addClass(this.addWidgetPrefix(COLUMN_CHOOSER_PLAIN_CLASS))\r\n        }\r\n        treeViewConfig.onContentReady = function(e) {\r\n            deferUpdate((function() {\r\n                if (scrollTop) {\r\n                    var scrollable = $(e.element).find(\".dx-scrollable\").data(\"dxScrollable\");\r\n                    scrollable && scrollable.scrollTo({\r\n                        y: scrollTop\r\n                    })\r\n                }\r\n                that.renderCompleted.fire()\r\n            }))\r\n        };\r\n        if (this._isWinDevice()) {\r\n            treeViewConfig.useNativeScrolling = false\r\n        }\r\n        extend(treeViewConfig, isSelectMode ? this._prepareSelectModeConfig() : this._prepareDragModeConfig());\r\n        if (this._columnChooserList) {\r\n            if (!treeViewConfig.searchEnabled) {\r\n                treeViewConfig.searchValue = \"\"\r\n            }\r\n            this._columnChooserList.option(treeViewConfig)\r\n        } else {\r\n            this._columnChooserList = this._createComponent($container, TreeView, treeViewConfig);\r\n            $container.addClass(this.addWidgetPrefix(COLUMN_CHOOSER_LIST_CLASS))\r\n        }\r\n    },\r\n    _prepareDragModeConfig: function() {\r\n        var columnChooserOptions = this.option(\"columnChooser\");\r\n        return {\r\n            noDataText: columnChooserOptions.emptyPanelText,\r\n            activeStateEnabled: false,\r\n            focusStateEnabled: false,\r\n            hoverStateEnabled: false,\r\n            itemTemplate: function(data, index, item) {\r\n                $(item).text(data.text).parent().addClass(data.cssClass).addClass(COLUMN_CHOOSER_ITEM_CLASS)\r\n            }\r\n        }\r\n    },\r\n    _prepareSelectModeConfig: function() {\r\n        var that = this;\r\n        return {\r\n            selectNodesRecursive: false,\r\n            showCheckBoxesMode: \"normal\",\r\n            onItemSelectionChanged: function(e) {\r\n                var visibleColumns = that._columnsController.getVisibleColumns().filter((function(item) {\r\n                    return !item.command\r\n                }));\r\n                var isLastColumnUnselected = 1 === visibleColumns.length && !e.itemData.selected;\r\n                if (isLastColumnUnselected) {\r\n                    e.component.selectItem(e.itemElement)\r\n                } else {\r\n                    setTimeout((function() {\r\n                        that._columnsController.columnOption(e.itemData.id, \"visible\", e.itemData.selected)\r\n                    }), CLICK_TIMEOUT)\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _columnOptionChanged: function(e) {\r\n        var changeTypes = e.changeTypes;\r\n        var optionNames = e.optionNames;\r\n        var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\r\n        this.callBase(e);\r\n        if (isSelectMode) {\r\n            var needPartialRender = optionNames.visible && 1 === optionNames.length && void 0 !== e.columnIndex;\r\n            var needFullRender = optionNames.showInColumnChooser || optionNames.caption || optionNames.visible || changeTypes.columns && optionNames.all;\r\n            if (needPartialRender) {\r\n                this.render(null, {\r\n                    changeType: \"selection\",\r\n                    columnIndex: e.columnIndex\r\n                })\r\n            } else if (needFullRender) {\r\n                this.render(null, \"full\")\r\n            }\r\n        }\r\n    },\r\n    optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"columnChooser\":\r\n                this._initializePopupContainer();\r\n                this.render(null, \"full\");\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    getColumnElements: function() {\r\n        var result = [];\r\n        var $node;\r\n        var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\r\n        var chooserColumns = this._columnsController.getChooserColumns(isSelectMode);\r\n        var $content = this._popupContainer && this._popupContainer.$content();\r\n        var $nodes = $content && $content.find(\".dx-treeview-node\");\r\n        if ($nodes) {\r\n            chooserColumns.forEach((function(column) {\r\n                $node = $nodes.filter(\"[data-item-id = '\" + column.index + \"']\");\r\n                var item = $node.length ? $node.children(\".\" + COLUMN_CHOOSER_ITEM_CLASS).get(0) : null;\r\n                result.push(item)\r\n            }))\r\n        }\r\n        return $(result)\r\n    },\r\n    getName: function() {\r\n        return \"columnChooser\"\r\n    },\r\n    getColumns: function() {\r\n        return this._columnsController.getChooserColumns()\r\n    },\r\n    allowDragging: function(column, sourceLocation) {\r\n        var columnVisible = column && column.allowHiding && (\"columnChooser\" !== sourceLocation || !column.visible && this._columnsController.isParentColumnVisible(column.index));\r\n        return this.isColumnChooserVisible() && columnVisible\r\n    },\r\n    getBoundingRect: function() {\r\n        var container = this._popupContainer && this._popupContainer.$overlayContent();\r\n        if (container && container.is(\":visible\")) {\r\n            var offset = container.offset();\r\n            return {\r\n                left: offset.left,\r\n                top: offset.top,\r\n                right: offset.left + container.outerWidth(),\r\n                bottom: offset.top + container.outerHeight()\r\n            }\r\n        }\r\n        return null\r\n    },\r\n    showColumnChooser: function() {\r\n        if (!this._popupContainer) {\r\n            this._initializePopupContainer();\r\n            this.render()\r\n        }\r\n        this._popupContainer.show();\r\n        if (this._isWinDevice()) {\r\n            $(\"body\").addClass(this.addWidgetPrefix(NOTOUCH_ACTION_CLASS))\r\n        }\r\n    },\r\n    hideColumnChooser: function() {\r\n        if (this._popupContainer) {\r\n            this._popupContainer.hide()\r\n        }\r\n    },\r\n    isColumnChooserVisible: function() {\r\n        var popupContainer = this._popupContainer;\r\n        return popupContainer && popupContainer.option(\"visible\")\r\n    },\r\n    publicMethods: function() {\r\n        return [\"showColumnChooser\", \"hideColumnChooser\"]\r\n    }\r\n});\r\nexport var columnChooserModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            columnChooser: {\r\n                enabled: false,\r\n                allowSearch: false,\r\n                searchTimeout: 500,\r\n                mode: \"dragAndDrop\",\r\n                width: 250,\r\n                height: 260,\r\n                title: messageLocalization.format(\"dxDataGrid-columnChooserTitle\"),\r\n                emptyPanelText: messageLocalization.format(\"dxDataGrid-columnChooserEmptyText\"),\r\n                container: void 0\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        columnChooser: ColumnChooserController\r\n    },\r\n    views: {\r\n        columnChooserView: ColumnChooserView\r\n    },\r\n    extenders: {\r\n        views: {\r\n            headerPanel: {\r\n                _getToolbarItems: function() {\r\n                    var items = this.callBase();\r\n                    return this._appendColumnChooserItem(items)\r\n                },\r\n                _appendColumnChooserItem: function(items) {\r\n                    var that = this;\r\n                    var columnChooserEnabled = that.option(\"columnChooser.enabled\");\r\n                    if (columnChooserEnabled) {\r\n                        var hintText = that.option(\"columnChooser.title\");\r\n                        var toolbarItem = {\r\n                            widget: \"dxButton\",\r\n                            options: {\r\n                                icon: COLUMN_CHOOSER_ICON_NAME,\r\n                                onClick: function() {\r\n                                    that.component.getView(\"columnChooserView\").showColumnChooser()\r\n                                },\r\n                                hint: hintText,\r\n                                text: hintText,\r\n                                onInitialized: function(e) {\r\n                                    $(e.element).addClass(that._getToolbarButtonClass(that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS)))\r\n                                }\r\n                            },\r\n                            showText: \"inMenu\",\r\n                            location: \"after\",\r\n                            name: \"columnChooserButton\",\r\n                            locateInMenu: \"auto\",\r\n                            sortIndex: 40\r\n                        };\r\n                        items.push(toolbarItem)\r\n                    }\r\n                    return items\r\n                },\r\n                optionChanged: function(args) {\r\n                    switch (args.name) {\r\n                        case \"columnChooser\":\r\n                            this._invalidate();\r\n                            args.handled = true;\r\n                            break;\r\n                        default:\r\n                            this.callBase(args)\r\n                    }\r\n                },\r\n                isVisible: function() {\r\n                    var columnChooserEnabled = this.option(\"columnChooser.enabled\");\r\n                    return this.callBase() || columnChooserEnabled\r\n                }\r\n            }\r\n        },\r\n        controllers: {\r\n            columns: {\r\n                allowMoveColumn: function(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\r\n                    var columnChooserMode = this.option(\"columnChooser.mode\");\r\n                    var isMoveColumnDisallowed = \"select\" === columnChooserMode && \"columnChooser\" === targetLocation;\r\n                    return isMoveColumnDisallowed ? false : this.callBase(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation)\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}