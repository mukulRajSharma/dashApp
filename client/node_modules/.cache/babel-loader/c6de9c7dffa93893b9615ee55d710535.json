{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/form/ui.form.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport registerComponent from \"../../core/component_registrator\";\nimport Guid from \"../../core/guid\";\nimport { ensureDefined } from \"../../core/utils/common\";\nimport { isDefined, isEmptyObject, isObject, isString } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { inArray } from \"../../core/utils/array\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isEmpty } from \"../../core/utils/string\";\nimport browser from \"../../core/utils/browser\";\nimport { triggerResizeEvent, triggerShownEvent } from \"../../events/visibility_change\";\nimport { getPublicElement } from \"../../core/element\";\nimport messageLocalization from \"../../localization/message\";\nimport Widget from \"../widget/ui.widget\";\nimport Editor from \"../editor/editor\";\nimport { defaultScreenFactorFunc, getCurrentScreenFactor, hasWindow } from \"../../core/utils/window\";\nimport ValidationEngine from \"../validation_engine\";\nimport { default as FormItemsRunTimeInfo } from \"./ui.form.items_runtime_info\";\nimport TabPanel from \"../tab_panel\";\nimport Scrollable from \"../scroll_view/ui.scrollable\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { isMaterial } from \"../themes\";\nimport tryCreateItemOptionAction from \"./ui.form.item_options_actions\";\nimport \"./ui.form.layout_manager\";\nimport { concatPaths, createItemPathByIndex, getFullOptionName, getOptionNameFromFullName, tryGetTabPath, getTextWithoutSpaces, isExpectedItem, isFullPathContainsTabs, getItemPath, getLabelWidthByText } from \"./ui.form.utils\";\nimport \"../validation_summary\";\nimport \"../validation_group\";\nimport { FORM_CLASS, FIELD_ITEM_CLASS, FORM_GROUP_CLASS, FORM_GROUP_CONTENT_CLASS, FIELD_ITEM_CONTENT_HAS_GROUP_CLASS, FIELD_ITEM_CONTENT_HAS_TABS_CLASS, FORM_GROUP_WITH_CAPTION_CLASS, FORM_GROUP_CAPTION_CLASS, FIELD_ITEM_LABEL_CLASS, FIELD_ITEM_LABEL_CONTENT_CLASS, FIELD_ITEM_TAB_CLASS, FORM_FIELD_ITEM_COL_CLASS, GROUP_COL_COUNT_CLASS, GROUP_COL_COUNT_ATTR, FIELD_ITEM_CONTENT_CLASS, FORM_VALIDATION_SUMMARY, ROOT_SIMPLE_ITEM_CLASS } from \"./constants\";\nimport { TOOLBAR_CLASS } from \"../toolbar/constants\";\nvar FOCUSED_STATE_CLASS = \"dx-state-focused\";\nvar ITEM_OPTIONS_FOR_VALIDATION_UPDATING = [\"items\", \"isRequired\", \"validationRules\", \"visible\"];\nvar Form = Widget.inherit({\n  _init: function () {\n    this.callBase();\n    this._cachedColCountOptions = [];\n    this._itemsRunTimeInfo = new FormItemsRunTimeInfo();\n    this._groupsColCount = [];\n\n    this._attachSyncSubscriptions();\n  },\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      formID: \"dx-\" + new Guid(),\n      formData: {},\n      colCount: 1,\n      screenByWidth: defaultScreenFactorFunc,\n      colCountByScreen: void 0,\n      labelLocation: \"left\",\n      readOnly: false,\n      onFieldDataChanged: null,\n      customizeItem: null,\n      onEditorEnterKey: null,\n      minColWidth: 200,\n      alignItemLabels: true,\n      alignItemLabelsInAllGroups: true,\n      alignRootItemLabels: true,\n      showColonAfterLabel: true,\n      showRequiredMark: true,\n      showOptionalMark: false,\n      requiredMark: \"*\",\n      optionalMark: messageLocalization.format(\"dxForm-optionalMark\"),\n      requiredMessage: messageLocalization.getFormatter(\"dxForm-requiredMessage\"),\n      showValidationSummary: false,\n      items: void 0,\n      scrollingEnabled: false,\n      validationGroup: void 0,\n      stylingMode: void 0\n    });\n  },\n  _defaultOptionsRules: function () {\n    return this.callBase().concat([{\n      device: function () {\n        return isMaterial();\n      },\n      options: {\n        showColonAfterLabel: false,\n        labelLocation: \"top\"\n      }\n    }]);\n  },\n  _setOptionsByReference: function () {\n    this.callBase();\n    extend(this._optionsByReference, {\n      formData: true,\n      validationGroup: true\n    });\n  },\n  _getGroupColCount: function ($element) {\n    return parseInt($element.attr(GROUP_COL_COUNT_ATTR));\n  },\n  _getLabelsSelectorByCol: function (index, options) {\n    options = options || {};\n    var fieldItemClass = options.inOneColumn ? FIELD_ITEM_CLASS : FORM_FIELD_ITEM_COL_CLASS + index;\n    var cssExcludeTabbedSelector = options.excludeTabbed ? \":not(.\" + FIELD_ITEM_TAB_CLASS + \")\" : \"\";\n    var childLabelContentSelector = \"> .\" + FIELD_ITEM_LABEL_CLASS + \" > .\" + FIELD_ITEM_LABEL_CONTENT_CLASS;\n    return \".\" + fieldItemClass + cssExcludeTabbedSelector + childLabelContentSelector;\n  },\n  _getLabelText: function (labelText) {\n    var length = labelText.children.length;\n    var child;\n    var result = \"\";\n    var i;\n\n    for (i = 0; i < length; i++) {\n      child = labelText.children[i];\n      result += !isEmpty(child.innerText) ? child.innerText : child.innerHTML;\n    }\n\n    return result;\n  },\n  _applyLabelsWidthByCol: function ($container, index, options, layoutManager) {\n    var $labelTexts = $container.find(this._getLabelsSelectorByCol(index, options));\n    var $labelTextsLength = $labelTexts.length;\n    var labelWidth;\n    var i;\n    var maxWidth = 0;\n\n    for (i = 0; i < $labelTextsLength; i++) {\n      labelWidth = getLabelWidthByText(layoutManager._getRenderLabelOptions({\n        text: this._getLabelText($labelTexts[i]),\n        location: this._labelLocation()\n      }));\n\n      if (labelWidth > maxWidth) {\n        maxWidth = labelWidth;\n      }\n    }\n\n    for (i = 0; i < $labelTextsLength; i++) {\n      $labelTexts[i].style.width = maxWidth + \"px\";\n    }\n  },\n  _applyLabelsWidth: function ($container, excludeTabbed, inOneColumn, colCount, layoutManager) {\n    colCount = inOneColumn ? 1 : colCount || this._getGroupColCount($container);\n    var applyLabelsOptions = {\n      excludeTabbed: excludeTabbed,\n      inOneColumn: inOneColumn\n    };\n    var i;\n\n    for (i = 0; i < colCount; i++) {\n      this._applyLabelsWidthByCol($container, i, applyLabelsOptions, layoutManager);\n    }\n  },\n  _getGroupElementsInColumn: function ($container, columnIndex, colCount) {\n    var cssColCountSelector = isDefined(colCount) ? \".\" + GROUP_COL_COUNT_CLASS + colCount : \"\";\n    var groupSelector = \".\" + FORM_FIELD_ITEM_COL_CLASS + columnIndex + \" > .\" + FIELD_ITEM_CONTENT_CLASS + \" > .\" + FORM_GROUP_CLASS + cssColCountSelector;\n    return $container.find(groupSelector);\n  },\n  _applyLabelsWidthWithGroups: function ($container, colCount, excludeTabbed, layoutManager) {\n    if (true === this.option(\"alignRootItemLabels\")) {\n      this._alignRootSimpleItems($container, colCount, excludeTabbed, layoutManager);\n    }\n\n    var alignItemLabelsInAllGroups = this.option(\"alignItemLabelsInAllGroups\");\n\n    if (alignItemLabelsInAllGroups) {\n      this._applyLabelsWidthWithNestedGroups($container, colCount, excludeTabbed, layoutManager);\n    } else {\n      var $groups = this.$element().find(\".\" + FORM_GROUP_CLASS);\n      var i;\n\n      for (i = 0; i < $groups.length; i++) {\n        this._applyLabelsWidth($groups.eq(i), excludeTabbed, void 0, void 0, layoutManager);\n      }\n    }\n  },\n  _alignRootSimpleItems: function ($container, colCount, excludeTabbed, layoutManager) {\n    var $rootSimpleItems = $container.find(\".\".concat(ROOT_SIMPLE_ITEM_CLASS));\n\n    for (var colIndex = 0; colIndex < colCount; colIndex++) {\n      this._applyLabelsWidthByCol($rootSimpleItems, colIndex, excludeTabbed, layoutManager);\n    }\n  },\n  _applyLabelsWidthWithNestedGroups: function ($container, colCount, excludeTabbed, layoutManager) {\n    var applyLabelsOptions = {\n      excludeTabbed: excludeTabbed\n    };\n    var colIndex;\n    var groupsColIndex;\n    var groupColIndex;\n    var $groupsByCol;\n\n    for (colIndex = 0; colIndex < colCount; colIndex++) {\n      $groupsByCol = this._getGroupElementsInColumn($container, colIndex);\n\n      this._applyLabelsWidthByCol($groupsByCol, 0, applyLabelsOptions, layoutManager);\n\n      for (groupsColIndex = 0; groupsColIndex < this._groupsColCount.length; groupsColIndex++) {\n        $groupsByCol = this._getGroupElementsInColumn($container, colIndex, this._groupsColCount[groupsColIndex]);\n\n        var groupColCount = this._getGroupColCount($groupsByCol);\n\n        for (groupColIndex = 1; groupColIndex < groupColCount; groupColIndex++) {\n          this._applyLabelsWidthByCol($groupsByCol, groupColIndex, applyLabelsOptions, layoutManager);\n        }\n      }\n    }\n  },\n  _labelLocation: function () {\n    return this.option(\"labelLocation\");\n  },\n  _alignLabelsInColumn: function (_ref) {\n    var {\n      layoutManager: layoutManager,\n      inOneColumn: inOneColumn,\n      $container: $container,\n      excludeTabbed: excludeTabbed,\n      items: items\n    } = _ref;\n\n    if (!hasWindow() || \"top\" === this._labelLocation()) {\n      return;\n    }\n\n    if (inOneColumn) {\n      this._applyLabelsWidth($container, excludeTabbed, true, void 0, layoutManager);\n    } else if (this._checkGrouping(items)) {\n      this._applyLabelsWidthWithGroups($container, layoutManager._getColCount(), excludeTabbed, layoutManager);\n    } else {\n      this._applyLabelsWidth($container, excludeTabbed, false, layoutManager._getColCount(), layoutManager);\n    }\n  },\n  _prepareFormData: function () {\n    if (!isDefined(this.option(\"formData\"))) {\n      this.option(\"formData\", {});\n    }\n  },\n  _initMarkup: function () {\n    ValidationEngine.addGroup(this._getValidationGroup());\n\n    this._clearCachedInstances();\n\n    this._prepareFormData();\n\n    this.$element().addClass(FORM_CLASS);\n    this.callBase();\n    this.setAria(\"role\", \"form\", this.$element());\n\n    if (this.option(\"scrollingEnabled\")) {\n      this._renderScrollable();\n    }\n\n    this._renderLayout();\n\n    this._renderValidationSummary();\n\n    this._lastMarkupScreenFactor = this._targetScreenFactor || this._getCurrentScreenFactor();\n  },\n  _getCurrentScreenFactor: function () {\n    return hasWindow() ? getCurrentScreenFactor(this.option(\"screenByWidth\")) : \"lg\";\n  },\n  _clearCachedInstances: function () {\n    this._itemsRunTimeInfo.clear();\n\n    this._cachedLayoutManagers = [];\n  },\n  _alignLabels: function (layoutManager, inOneColumn) {\n    this._alignLabelsInColumn({\n      $container: this.$element(),\n      layoutManager: layoutManager,\n      excludeTabbed: true,\n      items: this.option(\"items\"),\n      inOneColumn: inOneColumn\n    });\n\n    triggerResizeEvent(this.$element().find(\".\".concat(TOOLBAR_CLASS)));\n  },\n  _clean: function () {\n    this.callBase();\n    this._groupsColCount = [];\n    this._cachedColCountOptions = [];\n    this._lastMarkupScreenFactor = void 0;\n  },\n  _renderScrollable: function () {\n    var useNativeScrolling = this.option(\"useNativeScrolling\");\n    this._scrollable = new Scrollable(this.$element(), {\n      useNative: !!useNativeScrolling,\n      useSimulatedScrollbar: !useNativeScrolling,\n      useKeyboard: false,\n      direction: \"both\",\n      bounceEnabled: false\n    });\n  },\n  _getContent: function () {\n    return this.option(\"scrollingEnabled\") ? this._scrollable.$content() : this.$element();\n  },\n  _renderValidationSummary: function () {\n    var $validationSummary = this.$element().find(\".\" + FORM_VALIDATION_SUMMARY);\n\n    if ($validationSummary.length > 0) {\n      $validationSummary.remove();\n    }\n\n    if (this.option(\"showValidationSummary\")) {\n      var _$validationSummary = $(\"<div>\").addClass(FORM_VALIDATION_SUMMARY).appendTo(this._getContent());\n\n      this._validationSummary = _$validationSummary.dxValidationSummary({\n        validationGroup: this._getValidationGroup()\n      }).dxValidationSummary(\"instance\");\n    }\n  },\n\n  _prepareItems(items, parentIsTabbedItem, currentPath, isTabs) {\n    if (items) {\n      var result = [];\n\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n        var path = concatPaths(currentPath, createItemPathByIndex(i, isTabs));\n\n        var guid = this._itemsRunTimeInfo.add({\n          item: item,\n          itemIndex: i,\n          path: path\n        });\n\n        if (isString(item)) {\n          item = {\n            dataField: item\n          };\n        }\n\n        if (isObject(item)) {\n          var itemCopy = extend({}, item);\n          itemCopy.guid = guid;\n\n          this._tryPrepareGroupItem(itemCopy);\n\n          this._tryPrepareTabbedItem(itemCopy, path);\n\n          this._tryPrepareItemTemplate(itemCopy);\n\n          if (parentIsTabbedItem) {\n            itemCopy.cssItemClass = FIELD_ITEM_TAB_CLASS;\n          }\n\n          if (itemCopy.items) {\n            itemCopy.items = this._prepareItems(itemCopy.items, parentIsTabbedItem, path);\n          }\n\n          result.push(itemCopy);\n        } else {\n          result.push(item);\n        }\n      }\n\n      return result;\n    }\n  },\n\n  _tryPrepareGroupItem: function (item) {\n    if (\"group\" === item.itemType) {\n      item.alignItemLabels = ensureDefined(item.alignItemLabels, true);\n\n      if (item.template) {\n        item.groupContentTemplate = this._getTemplate(item.template);\n      }\n\n      item.template = this._itemGroupTemplate.bind(this, item);\n    }\n  },\n  _tryPrepareTabbedItem: function (item, path) {\n    if (\"tabbed\" === item.itemType) {\n      item.template = this._itemTabbedTemplate.bind(this, item);\n      item.tabs = this._prepareItems(item.tabs, true, path, true);\n    }\n  },\n  _tryPrepareItemTemplate: function (item) {\n    if (item.template) {\n      item.template = this._getTemplate(item.template);\n    }\n  },\n  _checkGrouping: function (items) {\n    if (items) {\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n\n        if (\"group\" === item.itemType) {\n          return true;\n        }\n      }\n    }\n  },\n  _renderLayout: function () {\n    var that = this;\n    var items = that.option(\"items\");\n\n    var $content = that._getContent();\n\n    items = that._prepareItems(items);\n    that._rootLayoutManager = that._renderLayoutManager(items, $content, {\n      isRoot: true,\n      colCount: that.option(\"colCount\"),\n      alignItemLabels: that.option(\"alignItemLabels\"),\n      screenByWidth: this.option(\"screenByWidth\"),\n      colCountByScreen: this.option(\"colCountByScreen\"),\n      onLayoutChanged: function (inOneColumn) {\n        that._alignLabels.bind(that)(that._rootLayoutManager, inOneColumn);\n      },\n      onContentReady: function (e) {\n        that._alignLabels(e.component, e.component.isSingleColumnMode());\n      }\n    });\n  },\n  _tryGetItemsForTemplate: function (item) {\n    return item.items || [];\n  },\n  _itemTabbedTemplate: function (item, e, $container) {\n    var $tabPanel = $(\"<div>\").appendTo($container);\n    var tabPanelOptions = extend({}, item.tabPanelOptions, {\n      dataSource: item.tabs,\n      onItemRendered: args => triggerShownEvent(args.itemElement),\n      itemTemplate: (itemData, e, container) => {\n        var $container = $(container);\n        var alignItemLabels = ensureDefined(itemData.alignItemLabels, true);\n\n        var layoutManager = this._renderLayoutManager(this._tryGetItemsForTemplate(itemData), $container, {\n          colCount: itemData.colCount,\n          alignItemLabels: alignItemLabels,\n          screenByWidth: this.option(\"screenByWidth\"),\n          colCountByScreen: itemData.colCountByScreen,\n          cssItemClass: itemData.cssItemClass,\n          onLayoutChanged: inOneColumn => {\n            this._alignLabelsInColumn({\n              $container: $container,\n              layoutManager: layoutManager,\n              items: itemData.items,\n              inOneColumn: inOneColumn\n            });\n          }\n        });\n\n        if (this._itemsRunTimeInfo) {\n          this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(itemData.guid, {\n            layoutManager: layoutManager\n          });\n        }\n\n        if (alignItemLabels) {\n          this._alignLabelsInColumn({\n            $container: $container,\n            layoutManager: layoutManager,\n            items: itemData.items,\n            inOneColumn: layoutManager.isSingleColumnMode()\n          });\n        }\n      }\n    });\n\n    var tryUpdateTabPanelInstance = (items, instance) => {\n      if (Array.isArray(items)) {\n        items.forEach(item => this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(item.guid, {\n          widgetInstance: instance\n        }));\n      }\n    };\n\n    var tabPanel = this._createComponent($tabPanel, TabPanel, tabPanelOptions);\n\n    $($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_TABS_CLASS);\n    tabPanel.on(\"optionChanged\", e => {\n      if (\"dataSource\" === e.fullName) {\n        tryUpdateTabPanelInstance(e.value, e.component);\n      }\n    });\n    tryUpdateTabPanelInstance([{\n      guid: item.guid\n    }, ...item.tabs], tabPanel);\n  },\n  _itemGroupTemplate: function (item, e, $container) {\n    var $group = $(\"<div>\").toggleClass(FORM_GROUP_WITH_CAPTION_CLASS, isDefined(item.caption) && item.caption.length).addClass(FORM_GROUP_CLASS).appendTo($container);\n    $($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_GROUP_CLASS);\n    var colCount;\n    var layoutManager;\n\n    if (item.caption) {\n      $(\"<span>\").addClass(FORM_GROUP_CAPTION_CLASS).text(item.caption).appendTo($group);\n    }\n\n    var $groupContent = $(\"<div>\").addClass(FORM_GROUP_CONTENT_CLASS).appendTo($group);\n\n    if (item.groupContentTemplate) {\n      var data = {\n        formData: this.option(\"formData\"),\n        component: this\n      };\n      item.groupContentTemplate.render({\n        model: data,\n        container: getPublicElement($groupContent)\n      });\n    } else {\n      layoutManager = this._renderLayoutManager(this._tryGetItemsForTemplate(item), $groupContent, {\n        colCount: item.colCount,\n        colCountByScreen: item.colCountByScreen,\n        alignItemLabels: item.alignItemLabels,\n        cssItemClass: item.cssItemClass\n      });\n      this._itemsRunTimeInfo && this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(item.guid, {\n        layoutManager: layoutManager\n      });\n      colCount = layoutManager._getColCount();\n\n      if (-1 === inArray(colCount, this._groupsColCount)) {\n        this._groupsColCount.push(colCount);\n      }\n\n      $group.addClass(GROUP_COL_COUNT_CLASS + colCount);\n      $group.attr(GROUP_COL_COUNT_ATTR, colCount);\n    }\n  },\n  _renderLayoutManager: function (items, $rootElement, options) {\n    var $element = $(\"<div>\");\n    var that = this;\n\n    var config = that._getLayoutManagerConfig(items, options);\n\n    var baseColCountByScreen = {\n      lg: options.colCount,\n      md: options.colCount,\n      sm: options.colCount,\n      xs: 1\n    };\n\n    that._cachedColCountOptions.push({\n      colCountByScreen: extend(baseColCountByScreen, options.colCountByScreen)\n    });\n\n    $element.appendTo($rootElement);\n\n    var instance = that._createComponent($element, \"dxLayoutManager\", config);\n\n    instance.on(\"autoColCountChanged\", function () {\n      that._refresh();\n    });\n\n    that._cachedLayoutManagers.push(instance);\n\n    return instance;\n  },\n  _getValidationGroup: function () {\n    return this.option(\"validationGroup\") || this;\n  },\n  _getLayoutManagerConfig: function (items, options) {\n    var baseConfig = {\n      form: this,\n      isRoot: options.isRoot,\n      validationGroup: this._getValidationGroup(),\n      showRequiredMark: this.option(\"showRequiredMark\"),\n      showOptionalMark: this.option(\"showOptionalMark\"),\n      requiredMark: this.option(\"requiredMark\"),\n      optionalMark: this.option(\"optionalMark\"),\n      requiredMessage: this.option(\"requiredMessage\"),\n      screenByWidth: this.option(\"screenByWidth\"),\n      layoutData: this.option(\"formData\"),\n      labelLocation: this.option(\"labelLocation\"),\n      customizeItem: this.option(\"customizeItem\"),\n      minColWidth: this.option(\"minColWidth\"),\n      showColonAfterLabel: this.option(\"showColonAfterLabel\"),\n      onEditorEnterKey: this.option(\"onEditorEnterKey\"),\n      onFieldDataChanged: args => {\n        if (!this._isDataUpdating) {\n          this._triggerOnFieldDataChanged(args);\n        }\n      },\n      validationBoundary: this.option(\"scrollingEnabled\") ? this.$element() : void 0\n    };\n    return extend(baseConfig, {\n      items: items,\n      onContentReady: args => {\n        this._itemsRunTimeInfo.addItemsOrExtendFrom(args.component._itemsRunTimeInfo);\n\n        options.onContentReady && options.onContentReady(args);\n      },\n      onDisposing: _ref2 => {\n        var {\n          component: component\n        } = _ref2;\n        var nestedItemsRunTimeInfo = component.getItemsRunTimeInfo();\n\n        this._itemsRunTimeInfo.removeItemsByItems(nestedItemsRunTimeInfo);\n      },\n      colCount: options.colCount,\n      alignItemLabels: options.alignItemLabels,\n      cssItemClass: options.cssItemClass,\n      colCountByScreen: options.colCountByScreen,\n      onLayoutChanged: options.onLayoutChanged,\n      width: options.width\n    });\n  },\n  _createComponent: function ($element, type, config) {\n    config = config || {};\n\n    this._extendConfig(config, {\n      readOnly: this.option(\"readOnly\")\n    });\n\n    return this.callBase($element, type, config);\n  },\n  _attachSyncSubscriptions: function () {\n    var that = this;\n    that.on(\"optionChanged\", function (args) {\n      var optionFullName = args.fullName;\n\n      if (\"formData\" === optionFullName) {\n        if (!isDefined(args.value)) {\n          that._options.silent(\"formData\", args.value = {});\n        }\n\n        that._triggerOnFieldDataChangedByDataSet(args.value);\n      }\n\n      if (that._cachedLayoutManagers.length) {\n        each(that._cachedLayoutManagers, function (index, layoutManager) {\n          if (\"formData\" === optionFullName) {\n            that._isDataUpdating = true;\n            layoutManager.option(\"layoutData\", args.value);\n            that._isDataUpdating = false;\n          }\n\n          if (\"readOnly\" === args.name || \"disabled\" === args.name) {\n            layoutManager.option(optionFullName, args.value);\n          }\n        });\n      }\n    });\n  },\n  _optionChanged: function (args) {\n    var rootNameOfComplexOption = this._getRootLevelOfExpectedComplexOption(args.fullName, [\"formData\", \"items\"]);\n\n    if (rootNameOfComplexOption) {\n      this._customHandlerOfComplexOption(args, rootNameOfComplexOption);\n\n      return;\n    }\n\n    switch (args.name) {\n      case \"formData\":\n        if (!this.option(\"items\")) {\n          this._invalidate();\n        } else if (isEmptyObject(args.value)) {\n          this._resetValues();\n        }\n\n        break;\n\n      case \"items\":\n      case \"colCount\":\n      case \"onFieldDataChanged\":\n      case \"onEditorEnterKey\":\n      case \"labelLocation\":\n      case \"alignItemLabels\":\n      case \"showColonAfterLabel\":\n      case \"customizeItem\":\n      case \"alignItemLabelsInAllGroups\":\n      case \"showRequiredMark\":\n      case \"showOptionalMark\":\n      case \"requiredMark\":\n      case \"optionalMark\":\n      case \"requiredMessage\":\n      case \"scrollingEnabled\":\n      case \"formID\":\n      case \"colCountByScreen\":\n      case \"screenByWidth\":\n      case \"stylingMode\":\n        this._invalidate();\n\n        break;\n\n      case \"showValidationSummary\":\n        this._renderValidationSummary();\n\n        break;\n\n      case \"minColWidth\":\n        if (\"auto\" === this.option(\"colCount\")) {\n          this._invalidate();\n        }\n\n        break;\n\n      case \"alignRootItemLabels\":\n      case \"readOnly\":\n        break;\n\n      case \"width\":\n        this.callBase(args);\n\n        this._rootLayoutManager.option(args.name, args.value);\n\n        this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode());\n\n        break;\n\n      case \"visible\":\n        this.callBase(args);\n\n        if (args.value) {\n          triggerShownEvent(this.$element());\n        }\n\n        break;\n\n      case \"validationGroup\":\n        ValidationEngine.removeGroup(args.previousValue || this);\n\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _getRootLevelOfExpectedComplexOption: function (fullOptionName, expectedRootNames) {\n    var splitFullName = fullOptionName.split(\".\");\n    var result;\n\n    if (splitFullName.length > 1) {\n      var i;\n      var rootOptionName = splitFullName[0];\n\n      for (i = 0; i < expectedRootNames.length; i++) {\n        if (-1 !== rootOptionName.search(expectedRootNames[i])) {\n          result = expectedRootNames[i];\n        }\n      }\n    }\n\n    return result;\n  },\n  _tryCreateItemOptionAction: function (optionName, item, value, previousValue, itemPath) {\n    if (\"tabs\" === optionName) {\n      this._itemsRunTimeInfo.removeItemsByPathStartWith(\"\".concat(itemPath, \".tabs\"));\n\n      value = this._prepareItems(value, true, itemPath, true);\n    }\n\n    return tryCreateItemOptionAction(optionName, {\n      item: item,\n      value: value,\n      previousValue: previousValue,\n      itemsRunTimeInfo: this._itemsRunTimeInfo\n    });\n  },\n  _tryExecuteItemOptionAction: function (action) {\n    return action && action.tryExecute();\n  },\n  _updateValidationGroupAndSummaryIfNeeded: function (fullName) {\n    var optionName = getOptionNameFromFullName(fullName);\n\n    if (ITEM_OPTIONS_FOR_VALIDATION_UPDATING.indexOf(optionName) > -1) {\n      ValidationEngine.addGroup(this._getValidationGroup());\n\n      if (this.option(\"showValidationSummary\")) {\n        this._validationSummary && this._validationSummary._initGroupRegistration();\n      }\n    }\n  },\n\n  _setLayoutManagerItemOption(layoutManager, optionName, value, path) {\n    if (this._updateLockCount > 0) {\n      !layoutManager._updateLockCount && layoutManager.beginUpdate();\n\n      var key = this._itemsRunTimeInfo.getKeyByPath(path);\n\n      this.postponedOperations.add(key, () => {\n        !layoutManager._disposed && layoutManager.endUpdate();\n        return new Deferred().resolve();\n      });\n    }\n\n    var contentReadyHandler = e => {\n      e.component.off(\"contentReady\", contentReadyHandler);\n\n      if (isFullPathContainsTabs(path)) {\n        var tabPath = tryGetTabPath(path);\n\n        var tabLayoutManager = this._itemsRunTimeInfo.getGroupOrTabLayoutManagerByPath(tabPath);\n\n        this._alignLabelsInColumn({\n          items: tabLayoutManager.option(\"items\"),\n          layoutManager: tabLayoutManager,\n          $container: tabLayoutManager.$element(),\n          inOneColumn: tabLayoutManager.isSingleColumnMode()\n        });\n      } else {\n        this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode());\n      }\n    };\n\n    layoutManager.on(\"contentReady\", contentReadyHandler);\n    layoutManager.option(optionName, value);\n\n    this._updateValidationGroupAndSummaryIfNeeded(optionName);\n  },\n\n  _tryChangeLayoutManagerItemOption(fullName, value) {\n    var nameParts = fullName.split(\".\");\n    var optionName = getOptionNameFromFullName(fullName);\n\n    if (\"items\" === optionName && nameParts.length > 1) {\n      var itemPath = this._getItemPath(nameParts);\n\n      var layoutManager = this._itemsRunTimeInfo.getGroupOrTabLayoutManagerByPath(itemPath);\n\n      if (layoutManager) {\n        this._itemsRunTimeInfo.removeItemsByItems(layoutManager.getItemsRunTimeInfo());\n\n        var items = this._prepareItems(value, false, itemPath);\n\n        this._setLayoutManagerItemOption(layoutManager, optionName, items, itemPath);\n\n        return true;\n      }\n    } else if (nameParts.length > 2) {\n      var endPartIndex = nameParts.length - 2;\n\n      var _itemPath = this._getItemPath(nameParts.slice(0, endPartIndex));\n\n      var _layoutManager = this._itemsRunTimeInfo.getGroupOrTabLayoutManagerByPath(_itemPath);\n\n      if (_layoutManager) {\n        var fullOptionName = getFullOptionName(nameParts[endPartIndex], optionName);\n\n        if (\"editorType\" === optionName) {\n          if (_layoutManager.option(fullOptionName) !== value) {\n            return false;\n          }\n        }\n\n        if (\"visible\" === optionName) {\n          var formItems = this.option(getFullOptionName(_itemPath, \"items\"));\n\n          if (formItems && formItems.length) {\n            var layoutManagerItems = _layoutManager.option(\"items\");\n\n            formItems.forEach((item, index) => {\n              var layoutItem = layoutManagerItems[index];\n              layoutItem.visibleIndex = item.visibleIndex;\n            });\n          }\n        }\n\n        this._setLayoutManagerItemOption(_layoutManager, fullOptionName, value, _itemPath);\n\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  _tryChangeLayoutManagerItemOptions(itemPath, options) {\n    var result;\n    this.beginUpdate();\n    each(options, (optionName, optionValue) => {\n      result = this._tryChangeLayoutManagerItemOption(getFullOptionName(itemPath, optionName), optionValue);\n\n      if (!result) {\n        return false;\n      }\n    });\n    this.endUpdate();\n    return result;\n  },\n\n  _customHandlerOfComplexOption: function (args, rootOptionName) {\n    var nameParts = args.fullName.split(\".\");\n    var value = args.value;\n\n    if (\"items\" === rootOptionName) {\n      var itemPath = this._getItemPath(nameParts);\n\n      var item = this.option(itemPath);\n      var optionNameWithoutPath = args.fullName.replace(itemPath + \".\", \"\");\n      var simpleOptionName = optionNameWithoutPath.split(\".\")[0].replace(/\\[\\d+]/, \"\");\n\n      var itemAction = this._tryCreateItemOptionAction(simpleOptionName, item, item[simpleOptionName], args.previousValue, itemPath);\n\n      if (!this._tryExecuteItemOptionAction(itemAction) && !this._tryChangeLayoutManagerItemOption(args.fullName, value)) {\n        if (item) {\n          this._changeItemOption(item, optionNameWithoutPath, value);\n\n          var items = this._generateItemsFromData(this.option(\"items\"));\n\n          this.option(\"items\", items);\n        }\n      }\n    }\n\n    if (\"formData\" === rootOptionName) {\n      var dataField = nameParts.slice(1).join(\".\");\n      var editor = this.getEditor(dataField);\n\n      if (editor) {\n        editor.option(\"value\", value);\n      } else {\n        this._triggerOnFieldDataChanged({\n          dataField: dataField,\n          value: value\n        });\n      }\n    }\n  },\n  _getItemPath: function (nameParts) {\n    var itemPath = nameParts[0];\n    var i;\n\n    for (i = 1; i < nameParts.length; i++) {\n      if (-1 !== nameParts[i].search(/items\\[\\d+]|tabs\\[\\d+]/)) {\n        itemPath += \".\" + nameParts[i];\n      } else {\n        break;\n      }\n    }\n\n    return itemPath;\n  },\n  _triggerOnFieldDataChanged: function (args) {\n    this._createActionByOption(\"onFieldDataChanged\")(args);\n  },\n  _triggerOnFieldDataChangedByDataSet: function (data) {\n    var that = this;\n\n    if (data && isObject(data)) {\n      each(data, function (dataField, value) {\n        that._triggerOnFieldDataChanged({\n          dataField: dataField,\n          value: value\n        });\n      });\n    }\n  },\n  _updateFieldValue: function (dataField, value) {\n    if (isDefined(this.option(\"formData\"))) {\n      var editor = this.getEditor(dataField);\n      this.option(\"formData.\" + dataField, value);\n\n      if (editor) {\n        var editorValue = editor.option(\"value\");\n\n        if (editorValue !== value) {\n          editor.option(\"value\", value);\n        }\n      }\n    }\n  },\n  _generateItemsFromData: function (items) {\n    var formData = this.option(\"formData\");\n    var result = [];\n\n    if (!items && isDefined(formData)) {\n      each(formData, function (dataField) {\n        result.push({\n          dataField: dataField\n        });\n      });\n    }\n\n    if (items) {\n      each(items, function (index, item) {\n        if (isObject(item)) {\n          result.push(item);\n        } else {\n          result.push({\n            dataField: item\n          });\n        }\n      });\n    }\n\n    return result;\n  },\n  _getItemByField: function (field, items) {\n    var that = this;\n    var fieldParts = isObject(field) ? field : that._getFieldParts(field);\n    var fieldName = fieldParts.fieldName;\n    var fieldPath = fieldParts.fieldPath;\n    var resultItem;\n\n    if (items.length) {\n      each(items, function (index, item) {\n        var itemType = item.itemType;\n\n        if (fieldPath.length) {\n          var path = fieldPath.slice();\n          item = that._getItemByFieldPath(path, fieldName, item);\n        } else if (\"group\" === itemType && !(item.caption || item.name) || \"tabbed\" === itemType && !item.name) {\n          var subItemsField = that._getSubItemField(itemType);\n\n          item.items = that._generateItemsFromData(item.items);\n          item = that._getItemByField({\n            fieldName: fieldName,\n            fieldPath: fieldPath\n          }, item[subItemsField]);\n        }\n\n        if (isExpectedItem(item, fieldName)) {\n          resultItem = item;\n          return false;\n        }\n      });\n    }\n\n    return resultItem;\n  },\n  _getFieldParts: function (field) {\n    var fieldName = field;\n    var separatorIndex = fieldName.indexOf(\".\");\n    var resultPath = [];\n\n    while (-1 !== separatorIndex) {\n      resultPath.push(fieldName.substr(0, separatorIndex));\n      fieldName = fieldName.substr(separatorIndex + 1);\n      separatorIndex = fieldName.indexOf(\".\");\n    }\n\n    return {\n      fieldName: fieldName,\n      fieldPath: resultPath.reverse()\n    };\n  },\n  _getItemByFieldPath: function (path, fieldName, item) {\n    var itemType = item.itemType;\n\n    var subItemsField = this._getSubItemField(itemType);\n\n    var isItemWithSubItems = \"group\" === itemType || \"tabbed\" === itemType || item.title;\n    var result;\n\n    do {\n      if (isItemWithSubItems) {\n        var name = item.name || item.caption || item.title;\n        var isGroupWithName = isDefined(name);\n        var nameWithoutSpaces = getTextWithoutSpaces(name);\n        var pathNode = void 0;\n        item[subItemsField] = this._generateItemsFromData(item[subItemsField]);\n\n        if (isGroupWithName) {\n          pathNode = path.pop();\n        }\n\n        if (!path.length) {\n          result = this._getItemByField(fieldName, item[subItemsField]);\n\n          if (result) {\n            break;\n          }\n        }\n\n        if (!isGroupWithName || isGroupWithName && nameWithoutSpaces === pathNode) {\n          if (path.length) {\n            result = this._searchItemInEverySubItem(path, fieldName, item[subItemsField]);\n          }\n        }\n      } else {\n        break;\n      }\n    } while (path.length && !isDefined(result));\n\n    return result;\n  },\n  _getSubItemField: function (itemType) {\n    return \"tabbed\" === itemType ? \"tabs\" : \"items\";\n  },\n  _searchItemInEverySubItem: function (path, fieldName, items) {\n    var that = this;\n    var result;\n    each(items, function (index, groupItem) {\n      result = that._getItemByFieldPath(path.slice(), fieldName, groupItem);\n\n      if (result) {\n        return false;\n      }\n    });\n\n    if (!result) {\n      result = false;\n    }\n\n    return result;\n  },\n  _changeItemOption: function (item, option, value) {\n    if (isObject(item)) {\n      item[option] = value;\n    }\n  },\n  _dimensionChanged: function () {\n    var currentScreenFactor = this._getCurrentScreenFactor();\n\n    if (this._lastMarkupScreenFactor !== currentScreenFactor) {\n      if (this._isColCountChanged(this._lastMarkupScreenFactor, currentScreenFactor)) {\n        this._targetScreenFactor = currentScreenFactor;\n\n        this._refresh();\n\n        this._targetScreenFactor = void 0;\n      }\n\n      this._lastMarkupScreenFactor = currentScreenFactor;\n    }\n  },\n  _isColCountChanged: function (oldScreenSize, newScreenSize) {\n    var isChanged = false;\n    each(this._cachedColCountOptions, function (index, item) {\n      if (item.colCountByScreen[oldScreenSize] !== item.colCountByScreen[newScreenSize]) {\n        isChanged = true;\n        return false;\n      }\n    });\n    return isChanged;\n  },\n  _refresh: function () {\n    var editorSelector = \".\" + FOCUSED_STATE_CLASS + \" input, .\" + FOCUSED_STATE_CLASS + \" textarea\";\n    eventsEngine.trigger(this.$element().find(editorSelector), \"change\");\n    this.callBase();\n  },\n  _resetValues: function () {\n    this._itemsRunTimeInfo.each(function (_, itemRunTimeInfo) {\n      if (isDefined(itemRunTimeInfo.widgetInstance) && Editor.isEditor(itemRunTimeInfo.widgetInstance)) {\n        itemRunTimeInfo.widgetInstance.reset();\n        itemRunTimeInfo.widgetInstance.option(\"isValid\", true);\n      }\n    });\n\n    ValidationEngine.resetGroup(this._getValidationGroup());\n  },\n  _updateData: function (data, value, isComplexData) {\n    var that = this;\n\n    var _data = isComplexData ? value : data;\n\n    if (isObject(_data)) {\n      each(_data, function (dataField, fieldValue) {\n        that._updateData(isComplexData ? data + \".\" + dataField : dataField, fieldValue, isObject(fieldValue));\n      });\n    } else if (isString(data)) {\n      that._updateFieldValue(data, value);\n    }\n  },\n  registerKeyHandler: function (key, handler) {\n    this.callBase(key, handler);\n\n    this._itemsRunTimeInfo.each(function (_, itemRunTimeInfo) {\n      if (isDefined(itemRunTimeInfo.widgetInstance)) {\n        itemRunTimeInfo.widgetInstance.registerKeyHandler(key, handler);\n      }\n    });\n  },\n  _focusTarget: function () {\n    return this.$element().find(\".\" + FIELD_ITEM_CONTENT_CLASS + \" [tabindex]\").first();\n  },\n  _visibilityChanged: function (visible) {\n    if (visible && browser.msie) {\n      this._refresh();\n    }\n  },\n  _dispose: function () {\n    ValidationEngine.removeGroup(this._getValidationGroup());\n    this.callBase();\n  },\n  resetValues: function () {\n    this._resetValues();\n  },\n  updateData: function (data, value) {\n    this._updateData(data, value);\n  },\n  getEditor: function (dataField) {\n    return this._itemsRunTimeInfo.findWidgetInstanceByDataField(dataField) || this._itemsRunTimeInfo.findWidgetInstanceByName(dataField);\n  },\n  getButton: function (name) {\n    return this._itemsRunTimeInfo.findWidgetInstanceByName(name);\n  },\n  updateDimensions: function () {\n    var that = this;\n    var deferred = new Deferred();\n\n    if (that._scrollable) {\n      that._scrollable.update().done(function () {\n        deferred.resolveWith(that);\n      });\n    } else {\n      deferred.resolveWith(that);\n    }\n\n    return deferred.promise();\n  },\n  itemOption: function (id, option, value) {\n    var items = this._generateItemsFromData(this.option(\"items\"));\n\n    var item = this._getItemByField(id, items);\n\n    var path = getItemPath(items, item);\n\n    if (!item) {\n      return;\n    }\n\n    switch (arguments.length) {\n      case 1:\n        return item;\n\n      case 3:\n        var itemAction = this._tryCreateItemOptionAction(option, item, value, item[option], path);\n\n        this._changeItemOption(item, option, value);\n\n        var fullName = getFullOptionName(path, option);\n\n        if (!this._tryExecuteItemOptionAction(itemAction) && !this._tryChangeLayoutManagerItemOption(fullName, value)) {\n          this.option(\"items\", items);\n        }\n\n        break;\n\n      default:\n        if (isObject(option)) {\n          if (!this._tryChangeLayoutManagerItemOptions(path, option)) {\n            var allowUpdateItems;\n            each(option, (optionName, optionValue) => {\n              var itemAction = this._tryCreateItemOptionAction(optionName, item, optionValue, item[optionName], path);\n\n              this._changeItemOption(item, optionName, optionValue);\n\n              if (!allowUpdateItems && !this._tryExecuteItemOptionAction(itemAction)) {\n                allowUpdateItems = true;\n              }\n            });\n            allowUpdateItems && this.option(\"items\", items);\n          }\n        }\n\n    }\n  },\n  validate: function () {\n    return ValidationEngine.validateGroup(this._getValidationGroup());\n  },\n  getItemID: function (name) {\n    return \"dx_\" + this.option(\"formID\") + \"_\" + (name || new Guid());\n  },\n  getTargetScreenFactor: function () {\n    return this._targetScreenFactor;\n  }\n});\nregisterComponent(\"dxForm\", Form);\nexport default Form;","map":{"version":3,"sources":["/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/node_modules/devextreme/esm/ui/form/ui.form.js"],"names":["$","eventsEngine","registerComponent","Guid","ensureDefined","isDefined","isEmptyObject","isObject","isString","each","inArray","extend","isEmpty","browser","triggerResizeEvent","triggerShownEvent","getPublicElement","messageLocalization","Widget","Editor","defaultScreenFactorFunc","getCurrentScreenFactor","hasWindow","ValidationEngine","default","FormItemsRunTimeInfo","TabPanel","Scrollable","Deferred","isMaterial","tryCreateItemOptionAction","concatPaths","createItemPathByIndex","getFullOptionName","getOptionNameFromFullName","tryGetTabPath","getTextWithoutSpaces","isExpectedItem","isFullPathContainsTabs","getItemPath","getLabelWidthByText","FORM_CLASS","FIELD_ITEM_CLASS","FORM_GROUP_CLASS","FORM_GROUP_CONTENT_CLASS","FIELD_ITEM_CONTENT_HAS_GROUP_CLASS","FIELD_ITEM_CONTENT_HAS_TABS_CLASS","FORM_GROUP_WITH_CAPTION_CLASS","FORM_GROUP_CAPTION_CLASS","FIELD_ITEM_LABEL_CLASS","FIELD_ITEM_LABEL_CONTENT_CLASS","FIELD_ITEM_TAB_CLASS","FORM_FIELD_ITEM_COL_CLASS","GROUP_COL_COUNT_CLASS","GROUP_COL_COUNT_ATTR","FIELD_ITEM_CONTENT_CLASS","FORM_VALIDATION_SUMMARY","ROOT_SIMPLE_ITEM_CLASS","TOOLBAR_CLASS","FOCUSED_STATE_CLASS","ITEM_OPTIONS_FOR_VALIDATION_UPDATING","Form","inherit","_init","callBase","_cachedColCountOptions","_itemsRunTimeInfo","_groupsColCount","_attachSyncSubscriptions","_getDefaultOptions","formID","formData","colCount","screenByWidth","colCountByScreen","labelLocation","readOnly","onFieldDataChanged","customizeItem","onEditorEnterKey","minColWidth","alignItemLabels","alignItemLabelsInAllGroups","alignRootItemLabels","showColonAfterLabel","showRequiredMark","showOptionalMark","requiredMark","optionalMark","format","requiredMessage","getFormatter","showValidationSummary","items","scrollingEnabled","validationGroup","stylingMode","_defaultOptionsRules","concat","device","options","_setOptionsByReference","_optionsByReference","_getGroupColCount","$element","parseInt","attr","_getLabelsSelectorByCol","index","fieldItemClass","inOneColumn","cssExcludeTabbedSelector","excludeTabbed","childLabelContentSelector","_getLabelText","labelText","length","children","child","result","i","innerText","innerHTML","_applyLabelsWidthByCol","$container","layoutManager","$labelTexts","find","$labelTextsLength","labelWidth","maxWidth","_getRenderLabelOptions","text","location","_labelLocation","style","width","_applyLabelsWidth","applyLabelsOptions","_getGroupElementsInColumn","columnIndex","cssColCountSelector","groupSelector","_applyLabelsWidthWithGroups","option","_alignRootSimpleItems","_applyLabelsWidthWithNestedGroups","$groups","eq","$rootSimpleItems","colIndex","groupsColIndex","groupColIndex","$groupsByCol","groupColCount","_alignLabelsInColumn","_ref","_checkGrouping","_getColCount","_prepareFormData","_initMarkup","addGroup","_getValidationGroup","_clearCachedInstances","addClass","setAria","_renderScrollable","_renderLayout","_renderValidationSummary","_lastMarkupScreenFactor","_targetScreenFactor","_getCurrentScreenFactor","clear","_cachedLayoutManagers","_alignLabels","_clean","useNativeScrolling","_scrollable","useNative","useSimulatedScrollbar","useKeyboard","direction","bounceEnabled","_getContent","$content","$validationSummary","remove","_$validationSummary","appendTo","_validationSummary","dxValidationSummary","_prepareItems","parentIsTabbedItem","currentPath","isTabs","item","path","guid","add","itemIndex","dataField","itemCopy","_tryPrepareGroupItem","_tryPrepareTabbedItem","_tryPrepareItemTemplate","cssItemClass","push","itemType","template","groupContentTemplate","_getTemplate","_itemGroupTemplate","bind","_itemTabbedTemplate","tabs","that","_rootLayoutManager","_renderLayoutManager","isRoot","onLayoutChanged","onContentReady","e","component","isSingleColumnMode","_tryGetItemsForTemplate","$tabPanel","tabPanelOptions","dataSource","onItemRendered","args","itemElement","itemTemplate","itemData","container","extendRunTimeItemInfoByKey","tryUpdateTabPanelInstance","instance","Array","isArray","forEach","widgetInstance","tabPanel","_createComponent","parent","on","fullName","value","$group","toggleClass","caption","$groupContent","data","render","model","$rootElement","config","_getLayoutManagerConfig","baseColCountByScreen","lg","md","sm","xs","_refresh","baseConfig","form","layoutData","_isDataUpdating","_triggerOnFieldDataChanged","validationBoundary","addItemsOrExtendFrom","onDisposing","_ref2","nestedItemsRunTimeInfo","getItemsRunTimeInfo","removeItemsByItems","type","_extendConfig","optionFullName","_options","silent","_triggerOnFieldDataChangedByDataSet","name","_optionChanged","rootNameOfComplexOption","_getRootLevelOfExpectedComplexOption","_customHandlerOfComplexOption","_invalidate","_resetValues","removeGroup","previousValue","fullOptionName","expectedRootNames","splitFullName","split","rootOptionName","search","_tryCreateItemOptionAction","optionName","itemPath","removeItemsByPathStartWith","itemsRunTimeInfo","_tryExecuteItemOptionAction","action","tryExecute","_updateValidationGroupAndSummaryIfNeeded","indexOf","_initGroupRegistration","_setLayoutManagerItemOption","_updateLockCount","beginUpdate","key","getKeyByPath","postponedOperations","_disposed","endUpdate","resolve","contentReadyHandler","off","tabPath","tabLayoutManager","getGroupOrTabLayoutManagerByPath","_tryChangeLayoutManagerItemOption","nameParts","_getItemPath","endPartIndex","_itemPath","slice","_layoutManager","formItems","layoutManagerItems","layoutItem","visibleIndex","_tryChangeLayoutManagerItemOptions","optionValue","optionNameWithoutPath","replace","simpleOptionName","itemAction","_changeItemOption","_generateItemsFromData","join","editor","getEditor","_createActionByOption","_updateFieldValue","editorValue","_getItemByField","field","fieldParts","_getFieldParts","fieldName","fieldPath","resultItem","_getItemByFieldPath","subItemsField","_getSubItemField","separatorIndex","resultPath","substr","reverse","isItemWithSubItems","title","isGroupWithName","nameWithoutSpaces","pathNode","pop","_searchItemInEverySubItem","groupItem","_dimensionChanged","currentScreenFactor","_isColCountChanged","oldScreenSize","newScreenSize","isChanged","editorSelector","trigger","_","itemRunTimeInfo","isEditor","reset","resetGroup","_updateData","isComplexData","_data","fieldValue","registerKeyHandler","handler","_focusTarget","first","_visibilityChanged","visible","msie","_dispose","resetValues","updateData","findWidgetInstanceByDataField","findWidgetInstanceByName","getButton","updateDimensions","deferred","update","done","resolveWith","promise","itemOption","id","arguments","allowUpdateItems","validate","validateGroup","getItemID","getTargetScreenFactor"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/form/ui.form.js)\r\n * Version: 21.1.5\r\n * Build date: Mon Aug 02 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport registerComponent from \"../../core/component_registrator\";\r\nimport Guid from \"../../core/guid\";\r\nimport {\r\n    ensureDefined\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    isDefined,\r\n    isEmptyObject,\r\n    isObject,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    inArray\r\n} from \"../../core/utils/array\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    isEmpty\r\n} from \"../../core/utils/string\";\r\nimport browser from \"../../core/utils/browser\";\r\nimport {\r\n    triggerResizeEvent,\r\n    triggerShownEvent\r\n} from \"../../events/visibility_change\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../core/element\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport Editor from \"../editor/editor\";\r\nimport {\r\n    defaultScreenFactorFunc,\r\n    getCurrentScreenFactor,\r\n    hasWindow\r\n} from \"../../core/utils/window\";\r\nimport ValidationEngine from \"../validation_engine\";\r\nimport {\r\n    default as FormItemsRunTimeInfo\r\n} from \"./ui.form.items_runtime_info\";\r\nimport TabPanel from \"../tab_panel\";\r\nimport Scrollable from \"../scroll_view/ui.scrollable\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    isMaterial\r\n} from \"../themes\";\r\nimport tryCreateItemOptionAction from \"./ui.form.item_options_actions\";\r\nimport \"./ui.form.layout_manager\";\r\nimport {\r\n    concatPaths,\r\n    createItemPathByIndex,\r\n    getFullOptionName,\r\n    getOptionNameFromFullName,\r\n    tryGetTabPath,\r\n    getTextWithoutSpaces,\r\n    isExpectedItem,\r\n    isFullPathContainsTabs,\r\n    getItemPath,\r\n    getLabelWidthByText\r\n} from \"./ui.form.utils\";\r\nimport \"../validation_summary\";\r\nimport \"../validation_group\";\r\nimport {\r\n    FORM_CLASS,\r\n    FIELD_ITEM_CLASS,\r\n    FORM_GROUP_CLASS,\r\n    FORM_GROUP_CONTENT_CLASS,\r\n    FIELD_ITEM_CONTENT_HAS_GROUP_CLASS,\r\n    FIELD_ITEM_CONTENT_HAS_TABS_CLASS,\r\n    FORM_GROUP_WITH_CAPTION_CLASS,\r\n    FORM_GROUP_CAPTION_CLASS,\r\n    FIELD_ITEM_LABEL_CLASS,\r\n    FIELD_ITEM_LABEL_CONTENT_CLASS,\r\n    FIELD_ITEM_TAB_CLASS,\r\n    FORM_FIELD_ITEM_COL_CLASS,\r\n    GROUP_COL_COUNT_CLASS,\r\n    GROUP_COL_COUNT_ATTR,\r\n    FIELD_ITEM_CONTENT_CLASS,\r\n    FORM_VALIDATION_SUMMARY,\r\n    ROOT_SIMPLE_ITEM_CLASS\r\n} from \"./constants\";\r\nimport {\r\n    TOOLBAR_CLASS\r\n} from \"../toolbar/constants\";\r\nvar FOCUSED_STATE_CLASS = \"dx-state-focused\";\r\nvar ITEM_OPTIONS_FOR_VALIDATION_UPDATING = [\"items\", \"isRequired\", \"validationRules\", \"visible\"];\r\nvar Form = Widget.inherit({\r\n    _init: function() {\r\n        this.callBase();\r\n        this._cachedColCountOptions = [];\r\n        this._itemsRunTimeInfo = new FormItemsRunTimeInfo;\r\n        this._groupsColCount = [];\r\n        this._attachSyncSubscriptions()\r\n    },\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            formID: \"dx-\" + new Guid,\r\n            formData: {},\r\n            colCount: 1,\r\n            screenByWidth: defaultScreenFactorFunc,\r\n            colCountByScreen: void 0,\r\n            labelLocation: \"left\",\r\n            readOnly: false,\r\n            onFieldDataChanged: null,\r\n            customizeItem: null,\r\n            onEditorEnterKey: null,\r\n            minColWidth: 200,\r\n            alignItemLabels: true,\r\n            alignItemLabelsInAllGroups: true,\r\n            alignRootItemLabels: true,\r\n            showColonAfterLabel: true,\r\n            showRequiredMark: true,\r\n            showOptionalMark: false,\r\n            requiredMark: \"*\",\r\n            optionalMark: messageLocalization.format(\"dxForm-optionalMark\"),\r\n            requiredMessage: messageLocalization.getFormatter(\"dxForm-requiredMessage\"),\r\n            showValidationSummary: false,\r\n            items: void 0,\r\n            scrollingEnabled: false,\r\n            validationGroup: void 0,\r\n            stylingMode: void 0\r\n        })\r\n    },\r\n    _defaultOptionsRules: function() {\r\n        return this.callBase().concat([{\r\n            device: function() {\r\n                return isMaterial()\r\n            },\r\n            options: {\r\n                showColonAfterLabel: false,\r\n                labelLocation: \"top\"\r\n            }\r\n        }])\r\n    },\r\n    _setOptionsByReference: function() {\r\n        this.callBase();\r\n        extend(this._optionsByReference, {\r\n            formData: true,\r\n            validationGroup: true\r\n        })\r\n    },\r\n    _getGroupColCount: function($element) {\r\n        return parseInt($element.attr(GROUP_COL_COUNT_ATTR))\r\n    },\r\n    _getLabelsSelectorByCol: function(index, options) {\r\n        options = options || {};\r\n        var fieldItemClass = options.inOneColumn ? FIELD_ITEM_CLASS : FORM_FIELD_ITEM_COL_CLASS + index;\r\n        var cssExcludeTabbedSelector = options.excludeTabbed ? \":not(.\" + FIELD_ITEM_TAB_CLASS + \")\" : \"\";\r\n        var childLabelContentSelector = \"> .\" + FIELD_ITEM_LABEL_CLASS + \" > .\" + FIELD_ITEM_LABEL_CONTENT_CLASS;\r\n        return \".\" + fieldItemClass + cssExcludeTabbedSelector + childLabelContentSelector\r\n    },\r\n    _getLabelText: function(labelText) {\r\n        var length = labelText.children.length;\r\n        var child;\r\n        var result = \"\";\r\n        var i;\r\n        for (i = 0; i < length; i++) {\r\n            child = labelText.children[i];\r\n            result += !isEmpty(child.innerText) ? child.innerText : child.innerHTML\r\n        }\r\n        return result\r\n    },\r\n    _applyLabelsWidthByCol: function($container, index, options, layoutManager) {\r\n        var $labelTexts = $container.find(this._getLabelsSelectorByCol(index, options));\r\n        var $labelTextsLength = $labelTexts.length;\r\n        var labelWidth;\r\n        var i;\r\n        var maxWidth = 0;\r\n        for (i = 0; i < $labelTextsLength; i++) {\r\n            labelWidth = getLabelWidthByText(layoutManager._getRenderLabelOptions({\r\n                text: this._getLabelText($labelTexts[i]),\r\n                location: this._labelLocation()\r\n            }));\r\n            if (labelWidth > maxWidth) {\r\n                maxWidth = labelWidth\r\n            }\r\n        }\r\n        for (i = 0; i < $labelTextsLength; i++) {\r\n            $labelTexts[i].style.width = maxWidth + \"px\"\r\n        }\r\n    },\r\n    _applyLabelsWidth: function($container, excludeTabbed, inOneColumn, colCount, layoutManager) {\r\n        colCount = inOneColumn ? 1 : colCount || this._getGroupColCount($container);\r\n        var applyLabelsOptions = {\r\n            excludeTabbed: excludeTabbed,\r\n            inOneColumn: inOneColumn\r\n        };\r\n        var i;\r\n        for (i = 0; i < colCount; i++) {\r\n            this._applyLabelsWidthByCol($container, i, applyLabelsOptions, layoutManager)\r\n        }\r\n    },\r\n    _getGroupElementsInColumn: function($container, columnIndex, colCount) {\r\n        var cssColCountSelector = isDefined(colCount) ? \".\" + GROUP_COL_COUNT_CLASS + colCount : \"\";\r\n        var groupSelector = \".\" + FORM_FIELD_ITEM_COL_CLASS + columnIndex + \" > .\" + FIELD_ITEM_CONTENT_CLASS + \" > .\" + FORM_GROUP_CLASS + cssColCountSelector;\r\n        return $container.find(groupSelector)\r\n    },\r\n    _applyLabelsWidthWithGroups: function($container, colCount, excludeTabbed, layoutManager) {\r\n        if (true === this.option(\"alignRootItemLabels\")) {\r\n            this._alignRootSimpleItems($container, colCount, excludeTabbed, layoutManager)\r\n        }\r\n        var alignItemLabelsInAllGroups = this.option(\"alignItemLabelsInAllGroups\");\r\n        if (alignItemLabelsInAllGroups) {\r\n            this._applyLabelsWidthWithNestedGroups($container, colCount, excludeTabbed, layoutManager)\r\n        } else {\r\n            var $groups = this.$element().find(\".\" + FORM_GROUP_CLASS);\r\n            var i;\r\n            for (i = 0; i < $groups.length; i++) {\r\n                this._applyLabelsWidth($groups.eq(i), excludeTabbed, void 0, void 0, layoutManager)\r\n            }\r\n        }\r\n    },\r\n    _alignRootSimpleItems: function($container, colCount, excludeTabbed, layoutManager) {\r\n        var $rootSimpleItems = $container.find(\".\".concat(ROOT_SIMPLE_ITEM_CLASS));\r\n        for (var colIndex = 0; colIndex < colCount; colIndex++) {\r\n            this._applyLabelsWidthByCol($rootSimpleItems, colIndex, excludeTabbed, layoutManager)\r\n        }\r\n    },\r\n    _applyLabelsWidthWithNestedGroups: function($container, colCount, excludeTabbed, layoutManager) {\r\n        var applyLabelsOptions = {\r\n            excludeTabbed: excludeTabbed\r\n        };\r\n        var colIndex;\r\n        var groupsColIndex;\r\n        var groupColIndex;\r\n        var $groupsByCol;\r\n        for (colIndex = 0; colIndex < colCount; colIndex++) {\r\n            $groupsByCol = this._getGroupElementsInColumn($container, colIndex);\r\n            this._applyLabelsWidthByCol($groupsByCol, 0, applyLabelsOptions, layoutManager);\r\n            for (groupsColIndex = 0; groupsColIndex < this._groupsColCount.length; groupsColIndex++) {\r\n                $groupsByCol = this._getGroupElementsInColumn($container, colIndex, this._groupsColCount[groupsColIndex]);\r\n                var groupColCount = this._getGroupColCount($groupsByCol);\r\n                for (groupColIndex = 1; groupColIndex < groupColCount; groupColIndex++) {\r\n                    this._applyLabelsWidthByCol($groupsByCol, groupColIndex, applyLabelsOptions, layoutManager)\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _labelLocation: function() {\r\n        return this.option(\"labelLocation\")\r\n    },\r\n    _alignLabelsInColumn: function(_ref) {\r\n        var {\r\n            layoutManager: layoutManager,\r\n            inOneColumn: inOneColumn,\r\n            $container: $container,\r\n            excludeTabbed: excludeTabbed,\r\n            items: items\r\n        } = _ref;\r\n        if (!hasWindow() || \"top\" === this._labelLocation()) {\r\n            return\r\n        }\r\n        if (inOneColumn) {\r\n            this._applyLabelsWidth($container, excludeTabbed, true, void 0, layoutManager)\r\n        } else if (this._checkGrouping(items)) {\r\n            this._applyLabelsWidthWithGroups($container, layoutManager._getColCount(), excludeTabbed, layoutManager)\r\n        } else {\r\n            this._applyLabelsWidth($container, excludeTabbed, false, layoutManager._getColCount(), layoutManager)\r\n        }\r\n    },\r\n    _prepareFormData: function() {\r\n        if (!isDefined(this.option(\"formData\"))) {\r\n            this.option(\"formData\", {})\r\n        }\r\n    },\r\n    _initMarkup: function() {\r\n        ValidationEngine.addGroup(this._getValidationGroup());\r\n        this._clearCachedInstances();\r\n        this._prepareFormData();\r\n        this.$element().addClass(FORM_CLASS);\r\n        this.callBase();\r\n        this.setAria(\"role\", \"form\", this.$element());\r\n        if (this.option(\"scrollingEnabled\")) {\r\n            this._renderScrollable()\r\n        }\r\n        this._renderLayout();\r\n        this._renderValidationSummary();\r\n        this._lastMarkupScreenFactor = this._targetScreenFactor || this._getCurrentScreenFactor()\r\n    },\r\n    _getCurrentScreenFactor: function() {\r\n        return hasWindow() ? getCurrentScreenFactor(this.option(\"screenByWidth\")) : \"lg\"\r\n    },\r\n    _clearCachedInstances: function() {\r\n        this._itemsRunTimeInfo.clear();\r\n        this._cachedLayoutManagers = []\r\n    },\r\n    _alignLabels: function(layoutManager, inOneColumn) {\r\n        this._alignLabelsInColumn({\r\n            $container: this.$element(),\r\n            layoutManager: layoutManager,\r\n            excludeTabbed: true,\r\n            items: this.option(\"items\"),\r\n            inOneColumn: inOneColumn\r\n        });\r\n        triggerResizeEvent(this.$element().find(\".\".concat(TOOLBAR_CLASS)))\r\n    },\r\n    _clean: function() {\r\n        this.callBase();\r\n        this._groupsColCount = [];\r\n        this._cachedColCountOptions = [];\r\n        this._lastMarkupScreenFactor = void 0\r\n    },\r\n    _renderScrollable: function() {\r\n        var useNativeScrolling = this.option(\"useNativeScrolling\");\r\n        this._scrollable = new Scrollable(this.$element(), {\r\n            useNative: !!useNativeScrolling,\r\n            useSimulatedScrollbar: !useNativeScrolling,\r\n            useKeyboard: false,\r\n            direction: \"both\",\r\n            bounceEnabled: false\r\n        })\r\n    },\r\n    _getContent: function() {\r\n        return this.option(\"scrollingEnabled\") ? this._scrollable.$content() : this.$element()\r\n    },\r\n    _renderValidationSummary: function() {\r\n        var $validationSummary = this.$element().find(\".\" + FORM_VALIDATION_SUMMARY);\r\n        if ($validationSummary.length > 0) {\r\n            $validationSummary.remove()\r\n        }\r\n        if (this.option(\"showValidationSummary\")) {\r\n            var _$validationSummary = $(\"<div>\").addClass(FORM_VALIDATION_SUMMARY).appendTo(this._getContent());\r\n            this._validationSummary = _$validationSummary.dxValidationSummary({\r\n                validationGroup: this._getValidationGroup()\r\n            }).dxValidationSummary(\"instance\")\r\n        }\r\n    },\r\n    _prepareItems(items, parentIsTabbedItem, currentPath, isTabs) {\r\n        if (items) {\r\n            var result = [];\r\n            for (var i = 0; i < items.length; i++) {\r\n                var item = items[i];\r\n                var path = concatPaths(currentPath, createItemPathByIndex(i, isTabs));\r\n                var guid = this._itemsRunTimeInfo.add({\r\n                    item: item,\r\n                    itemIndex: i,\r\n                    path: path\r\n                });\r\n                if (isString(item)) {\r\n                    item = {\r\n                        dataField: item\r\n                    }\r\n                }\r\n                if (isObject(item)) {\r\n                    var itemCopy = extend({}, item);\r\n                    itemCopy.guid = guid;\r\n                    this._tryPrepareGroupItem(itemCopy);\r\n                    this._tryPrepareTabbedItem(itemCopy, path);\r\n                    this._tryPrepareItemTemplate(itemCopy);\r\n                    if (parentIsTabbedItem) {\r\n                        itemCopy.cssItemClass = FIELD_ITEM_TAB_CLASS\r\n                    }\r\n                    if (itemCopy.items) {\r\n                        itemCopy.items = this._prepareItems(itemCopy.items, parentIsTabbedItem, path)\r\n                    }\r\n                    result.push(itemCopy)\r\n                } else {\r\n                    result.push(item)\r\n                }\r\n            }\r\n            return result\r\n        }\r\n    },\r\n    _tryPrepareGroupItem: function(item) {\r\n        if (\"group\" === item.itemType) {\r\n            item.alignItemLabels = ensureDefined(item.alignItemLabels, true);\r\n            if (item.template) {\r\n                item.groupContentTemplate = this._getTemplate(item.template)\r\n            }\r\n            item.template = this._itemGroupTemplate.bind(this, item)\r\n        }\r\n    },\r\n    _tryPrepareTabbedItem: function(item, path) {\r\n        if (\"tabbed\" === item.itemType) {\r\n            item.template = this._itemTabbedTemplate.bind(this, item);\r\n            item.tabs = this._prepareItems(item.tabs, true, path, true)\r\n        }\r\n    },\r\n    _tryPrepareItemTemplate: function(item) {\r\n        if (item.template) {\r\n            item.template = this._getTemplate(item.template)\r\n        }\r\n    },\r\n    _checkGrouping: function(items) {\r\n        if (items) {\r\n            for (var i = 0; i < items.length; i++) {\r\n                var item = items[i];\r\n                if (\"group\" === item.itemType) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _renderLayout: function() {\r\n        var that = this;\r\n        var items = that.option(\"items\");\r\n        var $content = that._getContent();\r\n        items = that._prepareItems(items);\r\n        that._rootLayoutManager = that._renderLayoutManager(items, $content, {\r\n            isRoot: true,\r\n            colCount: that.option(\"colCount\"),\r\n            alignItemLabels: that.option(\"alignItemLabels\"),\r\n            screenByWidth: this.option(\"screenByWidth\"),\r\n            colCountByScreen: this.option(\"colCountByScreen\"),\r\n            onLayoutChanged: function(inOneColumn) {\r\n                that._alignLabels.bind(that)(that._rootLayoutManager, inOneColumn)\r\n            },\r\n            onContentReady: function(e) {\r\n                that._alignLabels(e.component, e.component.isSingleColumnMode())\r\n            }\r\n        })\r\n    },\r\n    _tryGetItemsForTemplate: function(item) {\r\n        return item.items || []\r\n    },\r\n    _itemTabbedTemplate: function(item, e, $container) {\r\n        var $tabPanel = $(\"<div>\").appendTo($container);\r\n        var tabPanelOptions = extend({}, item.tabPanelOptions, {\r\n            dataSource: item.tabs,\r\n            onItemRendered: args => triggerShownEvent(args.itemElement),\r\n            itemTemplate: (itemData, e, container) => {\r\n                var $container = $(container);\r\n                var alignItemLabels = ensureDefined(itemData.alignItemLabels, true);\r\n                var layoutManager = this._renderLayoutManager(this._tryGetItemsForTemplate(itemData), $container, {\r\n                    colCount: itemData.colCount,\r\n                    alignItemLabels: alignItemLabels,\r\n                    screenByWidth: this.option(\"screenByWidth\"),\r\n                    colCountByScreen: itemData.colCountByScreen,\r\n                    cssItemClass: itemData.cssItemClass,\r\n                    onLayoutChanged: inOneColumn => {\r\n                        this._alignLabelsInColumn({\r\n                            $container: $container,\r\n                            layoutManager: layoutManager,\r\n                            items: itemData.items,\r\n                            inOneColumn: inOneColumn\r\n                        })\r\n                    }\r\n                });\r\n                if (this._itemsRunTimeInfo) {\r\n                    this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(itemData.guid, {\r\n                        layoutManager: layoutManager\r\n                    })\r\n                }\r\n                if (alignItemLabels) {\r\n                    this._alignLabelsInColumn({\r\n                        $container: $container,\r\n                        layoutManager: layoutManager,\r\n                        items: itemData.items,\r\n                        inOneColumn: layoutManager.isSingleColumnMode()\r\n                    })\r\n                }\r\n            }\r\n        });\r\n        var tryUpdateTabPanelInstance = (items, instance) => {\r\n            if (Array.isArray(items)) {\r\n                items.forEach(item => this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(item.guid, {\r\n                    widgetInstance: instance\r\n                }))\r\n            }\r\n        };\r\n        var tabPanel = this._createComponent($tabPanel, TabPanel, tabPanelOptions);\r\n        $($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_TABS_CLASS);\r\n        tabPanel.on(\"optionChanged\", e => {\r\n            if (\"dataSource\" === e.fullName) {\r\n                tryUpdateTabPanelInstance(e.value, e.component)\r\n            }\r\n        });\r\n        tryUpdateTabPanelInstance([{\r\n            guid: item.guid\r\n        }, ...item.tabs], tabPanel)\r\n    },\r\n    _itemGroupTemplate: function(item, e, $container) {\r\n        var $group = $(\"<div>\").toggleClass(FORM_GROUP_WITH_CAPTION_CLASS, isDefined(item.caption) && item.caption.length).addClass(FORM_GROUP_CLASS).appendTo($container);\r\n        $($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_GROUP_CLASS);\r\n        var colCount;\r\n        var layoutManager;\r\n        if (item.caption) {\r\n            $(\"<span>\").addClass(FORM_GROUP_CAPTION_CLASS).text(item.caption).appendTo($group)\r\n        }\r\n        var $groupContent = $(\"<div>\").addClass(FORM_GROUP_CONTENT_CLASS).appendTo($group);\r\n        if (item.groupContentTemplate) {\r\n            var data = {\r\n                formData: this.option(\"formData\"),\r\n                component: this\r\n            };\r\n            item.groupContentTemplate.render({\r\n                model: data,\r\n                container: getPublicElement($groupContent)\r\n            })\r\n        } else {\r\n            layoutManager = this._renderLayoutManager(this._tryGetItemsForTemplate(item), $groupContent, {\r\n                colCount: item.colCount,\r\n                colCountByScreen: item.colCountByScreen,\r\n                alignItemLabels: item.alignItemLabels,\r\n                cssItemClass: item.cssItemClass\r\n            });\r\n            this._itemsRunTimeInfo && this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(item.guid, {\r\n                layoutManager: layoutManager\r\n            });\r\n            colCount = layoutManager._getColCount();\r\n            if (-1 === inArray(colCount, this._groupsColCount)) {\r\n                this._groupsColCount.push(colCount)\r\n            }\r\n            $group.addClass(GROUP_COL_COUNT_CLASS + colCount);\r\n            $group.attr(GROUP_COL_COUNT_ATTR, colCount)\r\n        }\r\n    },\r\n    _renderLayoutManager: function(items, $rootElement, options) {\r\n        var $element = $(\"<div>\");\r\n        var that = this;\r\n        var config = that._getLayoutManagerConfig(items, options);\r\n        var baseColCountByScreen = {\r\n            lg: options.colCount,\r\n            md: options.colCount,\r\n            sm: options.colCount,\r\n            xs: 1\r\n        };\r\n        that._cachedColCountOptions.push({\r\n            colCountByScreen: extend(baseColCountByScreen, options.colCountByScreen)\r\n        });\r\n        $element.appendTo($rootElement);\r\n        var instance = that._createComponent($element, \"dxLayoutManager\", config);\r\n        instance.on(\"autoColCountChanged\", (function() {\r\n            that._refresh()\r\n        }));\r\n        that._cachedLayoutManagers.push(instance);\r\n        return instance\r\n    },\r\n    _getValidationGroup: function() {\r\n        return this.option(\"validationGroup\") || this\r\n    },\r\n    _getLayoutManagerConfig: function(items, options) {\r\n        var baseConfig = {\r\n            form: this,\r\n            isRoot: options.isRoot,\r\n            validationGroup: this._getValidationGroup(),\r\n            showRequiredMark: this.option(\"showRequiredMark\"),\r\n            showOptionalMark: this.option(\"showOptionalMark\"),\r\n            requiredMark: this.option(\"requiredMark\"),\r\n            optionalMark: this.option(\"optionalMark\"),\r\n            requiredMessage: this.option(\"requiredMessage\"),\r\n            screenByWidth: this.option(\"screenByWidth\"),\r\n            layoutData: this.option(\"formData\"),\r\n            labelLocation: this.option(\"labelLocation\"),\r\n            customizeItem: this.option(\"customizeItem\"),\r\n            minColWidth: this.option(\"minColWidth\"),\r\n            showColonAfterLabel: this.option(\"showColonAfterLabel\"),\r\n            onEditorEnterKey: this.option(\"onEditorEnterKey\"),\r\n            onFieldDataChanged: args => {\r\n                if (!this._isDataUpdating) {\r\n                    this._triggerOnFieldDataChanged(args)\r\n                }\r\n            },\r\n            validationBoundary: this.option(\"scrollingEnabled\") ? this.$element() : void 0\r\n        };\r\n        return extend(baseConfig, {\r\n            items: items,\r\n            onContentReady: args => {\r\n                this._itemsRunTimeInfo.addItemsOrExtendFrom(args.component._itemsRunTimeInfo);\r\n                options.onContentReady && options.onContentReady(args)\r\n            },\r\n            onDisposing: _ref2 => {\r\n                var {\r\n                    component: component\r\n                } = _ref2;\r\n                var nestedItemsRunTimeInfo = component.getItemsRunTimeInfo();\r\n                this._itemsRunTimeInfo.removeItemsByItems(nestedItemsRunTimeInfo)\r\n            },\r\n            colCount: options.colCount,\r\n            alignItemLabels: options.alignItemLabels,\r\n            cssItemClass: options.cssItemClass,\r\n            colCountByScreen: options.colCountByScreen,\r\n            onLayoutChanged: options.onLayoutChanged,\r\n            width: options.width\r\n        })\r\n    },\r\n    _createComponent: function($element, type, config) {\r\n        config = config || {};\r\n        this._extendConfig(config, {\r\n            readOnly: this.option(\"readOnly\")\r\n        });\r\n        return this.callBase($element, type, config)\r\n    },\r\n    _attachSyncSubscriptions: function() {\r\n        var that = this;\r\n        that.on(\"optionChanged\", (function(args) {\r\n            var optionFullName = args.fullName;\r\n            if (\"formData\" === optionFullName) {\r\n                if (!isDefined(args.value)) {\r\n                    that._options.silent(\"formData\", args.value = {})\r\n                }\r\n                that._triggerOnFieldDataChangedByDataSet(args.value)\r\n            }\r\n            if (that._cachedLayoutManagers.length) {\r\n                each(that._cachedLayoutManagers, (function(index, layoutManager) {\r\n                    if (\"formData\" === optionFullName) {\r\n                        that._isDataUpdating = true;\r\n                        layoutManager.option(\"layoutData\", args.value);\r\n                        that._isDataUpdating = false\r\n                    }\r\n                    if (\"readOnly\" === args.name || \"disabled\" === args.name) {\r\n                        layoutManager.option(optionFullName, args.value)\r\n                    }\r\n                }))\r\n            }\r\n        }))\r\n    },\r\n    _optionChanged: function(args) {\r\n        var rootNameOfComplexOption = this._getRootLevelOfExpectedComplexOption(args.fullName, [\"formData\", \"items\"]);\r\n        if (rootNameOfComplexOption) {\r\n            this._customHandlerOfComplexOption(args, rootNameOfComplexOption);\r\n            return\r\n        }\r\n        switch (args.name) {\r\n            case \"formData\":\r\n                if (!this.option(\"items\")) {\r\n                    this._invalidate()\r\n                } else if (isEmptyObject(args.value)) {\r\n                    this._resetValues()\r\n                }\r\n                break;\r\n            case \"items\":\r\n            case \"colCount\":\r\n            case \"onFieldDataChanged\":\r\n            case \"onEditorEnterKey\":\r\n            case \"labelLocation\":\r\n            case \"alignItemLabels\":\r\n            case \"showColonAfterLabel\":\r\n            case \"customizeItem\":\r\n            case \"alignItemLabelsInAllGroups\":\r\n            case \"showRequiredMark\":\r\n            case \"showOptionalMark\":\r\n            case \"requiredMark\":\r\n            case \"optionalMark\":\r\n            case \"requiredMessage\":\r\n            case \"scrollingEnabled\":\r\n            case \"formID\":\r\n            case \"colCountByScreen\":\r\n            case \"screenByWidth\":\r\n            case \"stylingMode\":\r\n                this._invalidate();\r\n                break;\r\n            case \"showValidationSummary\":\r\n                this._renderValidationSummary();\r\n                break;\r\n            case \"minColWidth\":\r\n                if (\"auto\" === this.option(\"colCount\")) {\r\n                    this._invalidate()\r\n                }\r\n                break;\r\n            case \"alignRootItemLabels\":\r\n            case \"readOnly\":\r\n                break;\r\n            case \"width\":\r\n                this.callBase(args);\r\n                this._rootLayoutManager.option(args.name, args.value);\r\n                this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode());\r\n                break;\r\n            case \"visible\":\r\n                this.callBase(args);\r\n                if (args.value) {\r\n                    triggerShownEvent(this.$element())\r\n                }\r\n                break;\r\n            case \"validationGroup\":\r\n                ValidationEngine.removeGroup(args.previousValue || this);\r\n                this._invalidate();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    _getRootLevelOfExpectedComplexOption: function(fullOptionName, expectedRootNames) {\r\n        var splitFullName = fullOptionName.split(\".\");\r\n        var result;\r\n        if (splitFullName.length > 1) {\r\n            var i;\r\n            var rootOptionName = splitFullName[0];\r\n            for (i = 0; i < expectedRootNames.length; i++) {\r\n                if (-1 !== rootOptionName.search(expectedRootNames[i])) {\r\n                    result = expectedRootNames[i]\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    },\r\n    _tryCreateItemOptionAction: function(optionName, item, value, previousValue, itemPath) {\r\n        if (\"tabs\" === optionName) {\r\n            this._itemsRunTimeInfo.removeItemsByPathStartWith(\"\".concat(itemPath, \".tabs\"));\r\n            value = this._prepareItems(value, true, itemPath, true)\r\n        }\r\n        return tryCreateItemOptionAction(optionName, {\r\n            item: item,\r\n            value: value,\r\n            previousValue: previousValue,\r\n            itemsRunTimeInfo: this._itemsRunTimeInfo\r\n        })\r\n    },\r\n    _tryExecuteItemOptionAction: function(action) {\r\n        return action && action.tryExecute()\r\n    },\r\n    _updateValidationGroupAndSummaryIfNeeded: function(fullName) {\r\n        var optionName = getOptionNameFromFullName(fullName);\r\n        if (ITEM_OPTIONS_FOR_VALIDATION_UPDATING.indexOf(optionName) > -1) {\r\n            ValidationEngine.addGroup(this._getValidationGroup());\r\n            if (this.option(\"showValidationSummary\")) {\r\n                this._validationSummary && this._validationSummary._initGroupRegistration()\r\n            }\r\n        }\r\n    },\r\n    _setLayoutManagerItemOption(layoutManager, optionName, value, path) {\r\n        if (this._updateLockCount > 0) {\r\n            !layoutManager._updateLockCount && layoutManager.beginUpdate();\r\n            var key = this._itemsRunTimeInfo.getKeyByPath(path);\r\n            this.postponedOperations.add(key, () => {\r\n                !layoutManager._disposed && layoutManager.endUpdate();\r\n                return (new Deferred).resolve()\r\n            })\r\n        }\r\n        var contentReadyHandler = e => {\r\n            e.component.off(\"contentReady\", contentReadyHandler);\r\n            if (isFullPathContainsTabs(path)) {\r\n                var tabPath = tryGetTabPath(path);\r\n                var tabLayoutManager = this._itemsRunTimeInfo.getGroupOrTabLayoutManagerByPath(tabPath);\r\n                this._alignLabelsInColumn({\r\n                    items: tabLayoutManager.option(\"items\"),\r\n                    layoutManager: tabLayoutManager,\r\n                    $container: tabLayoutManager.$element(),\r\n                    inOneColumn: tabLayoutManager.isSingleColumnMode()\r\n                })\r\n            } else {\r\n                this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode())\r\n            }\r\n        };\r\n        layoutManager.on(\"contentReady\", contentReadyHandler);\r\n        layoutManager.option(optionName, value);\r\n        this._updateValidationGroupAndSummaryIfNeeded(optionName)\r\n    },\r\n    _tryChangeLayoutManagerItemOption(fullName, value) {\r\n        var nameParts = fullName.split(\".\");\r\n        var optionName = getOptionNameFromFullName(fullName);\r\n        if (\"items\" === optionName && nameParts.length > 1) {\r\n            var itemPath = this._getItemPath(nameParts);\r\n            var layoutManager = this._itemsRunTimeInfo.getGroupOrTabLayoutManagerByPath(itemPath);\r\n            if (layoutManager) {\r\n                this._itemsRunTimeInfo.removeItemsByItems(layoutManager.getItemsRunTimeInfo());\r\n                var items = this._prepareItems(value, false, itemPath);\r\n                this._setLayoutManagerItemOption(layoutManager, optionName, items, itemPath);\r\n                return true\r\n            }\r\n        } else if (nameParts.length > 2) {\r\n            var endPartIndex = nameParts.length - 2;\r\n            var _itemPath = this._getItemPath(nameParts.slice(0, endPartIndex));\r\n            var _layoutManager = this._itemsRunTimeInfo.getGroupOrTabLayoutManagerByPath(_itemPath);\r\n            if (_layoutManager) {\r\n                var fullOptionName = getFullOptionName(nameParts[endPartIndex], optionName);\r\n                if (\"editorType\" === optionName) {\r\n                    if (_layoutManager.option(fullOptionName) !== value) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (\"visible\" === optionName) {\r\n                    var formItems = this.option(getFullOptionName(_itemPath, \"items\"));\r\n                    if (formItems && formItems.length) {\r\n                        var layoutManagerItems = _layoutManager.option(\"items\");\r\n                        formItems.forEach((item, index) => {\r\n                            var layoutItem = layoutManagerItems[index];\r\n                            layoutItem.visibleIndex = item.visibleIndex\r\n                        })\r\n                    }\r\n                }\r\n                this._setLayoutManagerItemOption(_layoutManager, fullOptionName, value, _itemPath);\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    },\r\n    _tryChangeLayoutManagerItemOptions(itemPath, options) {\r\n        var result;\r\n        this.beginUpdate();\r\n        each(options, (optionName, optionValue) => {\r\n            result = this._tryChangeLayoutManagerItemOption(getFullOptionName(itemPath, optionName), optionValue);\r\n            if (!result) {\r\n                return false\r\n            }\r\n        });\r\n        this.endUpdate();\r\n        return result\r\n    },\r\n    _customHandlerOfComplexOption: function(args, rootOptionName) {\r\n        var nameParts = args.fullName.split(\".\");\r\n        var value = args.value;\r\n        if (\"items\" === rootOptionName) {\r\n            var itemPath = this._getItemPath(nameParts);\r\n            var item = this.option(itemPath);\r\n            var optionNameWithoutPath = args.fullName.replace(itemPath + \".\", \"\");\r\n            var simpleOptionName = optionNameWithoutPath.split(\".\")[0].replace(/\\[\\d+]/, \"\");\r\n            var itemAction = this._tryCreateItemOptionAction(simpleOptionName, item, item[simpleOptionName], args.previousValue, itemPath);\r\n            if (!this._tryExecuteItemOptionAction(itemAction) && !this._tryChangeLayoutManagerItemOption(args.fullName, value)) {\r\n                if (item) {\r\n                    this._changeItemOption(item, optionNameWithoutPath, value);\r\n                    var items = this._generateItemsFromData(this.option(\"items\"));\r\n                    this.option(\"items\", items)\r\n                }\r\n            }\r\n        }\r\n        if (\"formData\" === rootOptionName) {\r\n            var dataField = nameParts.slice(1).join(\".\");\r\n            var editor = this.getEditor(dataField);\r\n            if (editor) {\r\n                editor.option(\"value\", value)\r\n            } else {\r\n                this._triggerOnFieldDataChanged({\r\n                    dataField: dataField,\r\n                    value: value\r\n                })\r\n            }\r\n        }\r\n    },\r\n    _getItemPath: function(nameParts) {\r\n        var itemPath = nameParts[0];\r\n        var i;\r\n        for (i = 1; i < nameParts.length; i++) {\r\n            if (-1 !== nameParts[i].search(/items\\[\\d+]|tabs\\[\\d+]/)) {\r\n                itemPath += \".\" + nameParts[i]\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n        return itemPath\r\n    },\r\n    _triggerOnFieldDataChanged: function(args) {\r\n        this._createActionByOption(\"onFieldDataChanged\")(args)\r\n    },\r\n    _triggerOnFieldDataChangedByDataSet: function(data) {\r\n        var that = this;\r\n        if (data && isObject(data)) {\r\n            each(data, (function(dataField, value) {\r\n                that._triggerOnFieldDataChanged({\r\n                    dataField: dataField,\r\n                    value: value\r\n                })\r\n            }))\r\n        }\r\n    },\r\n    _updateFieldValue: function(dataField, value) {\r\n        if (isDefined(this.option(\"formData\"))) {\r\n            var editor = this.getEditor(dataField);\r\n            this.option(\"formData.\" + dataField, value);\r\n            if (editor) {\r\n                var editorValue = editor.option(\"value\");\r\n                if (editorValue !== value) {\r\n                    editor.option(\"value\", value)\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _generateItemsFromData: function(items) {\r\n        var formData = this.option(\"formData\");\r\n        var result = [];\r\n        if (!items && isDefined(formData)) {\r\n            each(formData, (function(dataField) {\r\n                result.push({\r\n                    dataField: dataField\r\n                })\r\n            }))\r\n        }\r\n        if (items) {\r\n            each(items, (function(index, item) {\r\n                if (isObject(item)) {\r\n                    result.push(item)\r\n                } else {\r\n                    result.push({\r\n                        dataField: item\r\n                    })\r\n                }\r\n            }))\r\n        }\r\n        return result\r\n    },\r\n    _getItemByField: function(field, items) {\r\n        var that = this;\r\n        var fieldParts = isObject(field) ? field : that._getFieldParts(field);\r\n        var fieldName = fieldParts.fieldName;\r\n        var fieldPath = fieldParts.fieldPath;\r\n        var resultItem;\r\n        if (items.length) {\r\n            each(items, (function(index, item) {\r\n                var itemType = item.itemType;\r\n                if (fieldPath.length) {\r\n                    var path = fieldPath.slice();\r\n                    item = that._getItemByFieldPath(path, fieldName, item)\r\n                } else if (\"group\" === itemType && !(item.caption || item.name) || \"tabbed\" === itemType && !item.name) {\r\n                    var subItemsField = that._getSubItemField(itemType);\r\n                    item.items = that._generateItemsFromData(item.items);\r\n                    item = that._getItemByField({\r\n                        fieldName: fieldName,\r\n                        fieldPath: fieldPath\r\n                    }, item[subItemsField])\r\n                }\r\n                if (isExpectedItem(item, fieldName)) {\r\n                    resultItem = item;\r\n                    return false\r\n                }\r\n            }))\r\n        }\r\n        return resultItem\r\n    },\r\n    _getFieldParts: function(field) {\r\n        var fieldName = field;\r\n        var separatorIndex = fieldName.indexOf(\".\");\r\n        var resultPath = [];\r\n        while (-1 !== separatorIndex) {\r\n            resultPath.push(fieldName.substr(0, separatorIndex));\r\n            fieldName = fieldName.substr(separatorIndex + 1);\r\n            separatorIndex = fieldName.indexOf(\".\")\r\n        }\r\n        return {\r\n            fieldName: fieldName,\r\n            fieldPath: resultPath.reverse()\r\n        }\r\n    },\r\n    _getItemByFieldPath: function(path, fieldName, item) {\r\n        var itemType = item.itemType;\r\n        var subItemsField = this._getSubItemField(itemType);\r\n        var isItemWithSubItems = \"group\" === itemType || \"tabbed\" === itemType || item.title;\r\n        var result;\r\n        do {\r\n            if (isItemWithSubItems) {\r\n                var name = item.name || item.caption || item.title;\r\n                var isGroupWithName = isDefined(name);\r\n                var nameWithoutSpaces = getTextWithoutSpaces(name);\r\n                var pathNode = void 0;\r\n                item[subItemsField] = this._generateItemsFromData(item[subItemsField]);\r\n                if (isGroupWithName) {\r\n                    pathNode = path.pop()\r\n                }\r\n                if (!path.length) {\r\n                    result = this._getItemByField(fieldName, item[subItemsField]);\r\n                    if (result) {\r\n                        break\r\n                    }\r\n                }\r\n                if (!isGroupWithName || isGroupWithName && nameWithoutSpaces === pathNode) {\r\n                    if (path.length) {\r\n                        result = this._searchItemInEverySubItem(path, fieldName, item[subItemsField])\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        } while (path.length && !isDefined(result));\r\n        return result\r\n    },\r\n    _getSubItemField: function(itemType) {\r\n        return \"tabbed\" === itemType ? \"tabs\" : \"items\"\r\n    },\r\n    _searchItemInEverySubItem: function(path, fieldName, items) {\r\n        var that = this;\r\n        var result;\r\n        each(items, (function(index, groupItem) {\r\n            result = that._getItemByFieldPath(path.slice(), fieldName, groupItem);\r\n            if (result) {\r\n                return false\r\n            }\r\n        }));\r\n        if (!result) {\r\n            result = false\r\n        }\r\n        return result\r\n    },\r\n    _changeItemOption: function(item, option, value) {\r\n        if (isObject(item)) {\r\n            item[option] = value\r\n        }\r\n    },\r\n    _dimensionChanged: function() {\r\n        var currentScreenFactor = this._getCurrentScreenFactor();\r\n        if (this._lastMarkupScreenFactor !== currentScreenFactor) {\r\n            if (this._isColCountChanged(this._lastMarkupScreenFactor, currentScreenFactor)) {\r\n                this._targetScreenFactor = currentScreenFactor;\r\n                this._refresh();\r\n                this._targetScreenFactor = void 0\r\n            }\r\n            this._lastMarkupScreenFactor = currentScreenFactor\r\n        }\r\n    },\r\n    _isColCountChanged: function(oldScreenSize, newScreenSize) {\r\n        var isChanged = false;\r\n        each(this._cachedColCountOptions, (function(index, item) {\r\n            if (item.colCountByScreen[oldScreenSize] !== item.colCountByScreen[newScreenSize]) {\r\n                isChanged = true;\r\n                return false\r\n            }\r\n        }));\r\n        return isChanged\r\n    },\r\n    _refresh: function() {\r\n        var editorSelector = \".\" + FOCUSED_STATE_CLASS + \" input, .\" + FOCUSED_STATE_CLASS + \" textarea\";\r\n        eventsEngine.trigger(this.$element().find(editorSelector), \"change\");\r\n        this.callBase()\r\n    },\r\n    _resetValues: function() {\r\n        this._itemsRunTimeInfo.each((function(_, itemRunTimeInfo) {\r\n            if (isDefined(itemRunTimeInfo.widgetInstance) && Editor.isEditor(itemRunTimeInfo.widgetInstance)) {\r\n                itemRunTimeInfo.widgetInstance.reset();\r\n                itemRunTimeInfo.widgetInstance.option(\"isValid\", true)\r\n            }\r\n        }));\r\n        ValidationEngine.resetGroup(this._getValidationGroup())\r\n    },\r\n    _updateData: function(data, value, isComplexData) {\r\n        var that = this;\r\n        var _data = isComplexData ? value : data;\r\n        if (isObject(_data)) {\r\n            each(_data, (function(dataField, fieldValue) {\r\n                that._updateData(isComplexData ? data + \".\" + dataField : dataField, fieldValue, isObject(fieldValue))\r\n            }))\r\n        } else if (isString(data)) {\r\n            that._updateFieldValue(data, value)\r\n        }\r\n    },\r\n    registerKeyHandler: function(key, handler) {\r\n        this.callBase(key, handler);\r\n        this._itemsRunTimeInfo.each((function(_, itemRunTimeInfo) {\r\n            if (isDefined(itemRunTimeInfo.widgetInstance)) {\r\n                itemRunTimeInfo.widgetInstance.registerKeyHandler(key, handler)\r\n            }\r\n        }))\r\n    },\r\n    _focusTarget: function() {\r\n        return this.$element().find(\".\" + FIELD_ITEM_CONTENT_CLASS + \" [tabindex]\").first()\r\n    },\r\n    _visibilityChanged: function(visible) {\r\n        if (visible && browser.msie) {\r\n            this._refresh()\r\n        }\r\n    },\r\n    _dispose: function() {\r\n        ValidationEngine.removeGroup(this._getValidationGroup());\r\n        this.callBase()\r\n    },\r\n    resetValues: function() {\r\n        this._resetValues()\r\n    },\r\n    updateData: function(data, value) {\r\n        this._updateData(data, value)\r\n    },\r\n    getEditor: function(dataField) {\r\n        return this._itemsRunTimeInfo.findWidgetInstanceByDataField(dataField) || this._itemsRunTimeInfo.findWidgetInstanceByName(dataField)\r\n    },\r\n    getButton: function(name) {\r\n        return this._itemsRunTimeInfo.findWidgetInstanceByName(name)\r\n    },\r\n    updateDimensions: function() {\r\n        var that = this;\r\n        var deferred = new Deferred;\r\n        if (that._scrollable) {\r\n            that._scrollable.update().done((function() {\r\n                deferred.resolveWith(that)\r\n            }))\r\n        } else {\r\n            deferred.resolveWith(that)\r\n        }\r\n        return deferred.promise()\r\n    },\r\n    itemOption: function(id, option, value) {\r\n        var items = this._generateItemsFromData(this.option(\"items\"));\r\n        var item = this._getItemByField(id, items);\r\n        var path = getItemPath(items, item);\r\n        if (!item) {\r\n            return\r\n        }\r\n        switch (arguments.length) {\r\n            case 1:\r\n                return item;\r\n            case 3:\r\n                var itemAction = this._tryCreateItemOptionAction(option, item, value, item[option], path);\r\n                this._changeItemOption(item, option, value);\r\n                var fullName = getFullOptionName(path, option);\r\n                if (!this._tryExecuteItemOptionAction(itemAction) && !this._tryChangeLayoutManagerItemOption(fullName, value)) {\r\n                    this.option(\"items\", items)\r\n                }\r\n                break;\r\n            default:\r\n                if (isObject(option)) {\r\n                    if (!this._tryChangeLayoutManagerItemOptions(path, option)) {\r\n                        var allowUpdateItems;\r\n                        each(option, (optionName, optionValue) => {\r\n                            var itemAction = this._tryCreateItemOptionAction(optionName, item, optionValue, item[optionName], path);\r\n                            this._changeItemOption(item, optionName, optionValue);\r\n                            if (!allowUpdateItems && !this._tryExecuteItemOptionAction(itemAction)) {\r\n                                allowUpdateItems = true\r\n                            }\r\n                        });\r\n                        allowUpdateItems && this.option(\"items\", items)\r\n                    }\r\n                }\r\n        }\r\n    },\r\n    validate: function() {\r\n        return ValidationEngine.validateGroup(this._getValidationGroup())\r\n    },\r\n    getItemID: function(name) {\r\n        return \"dx_\" + this.option(\"formID\") + \"_\" + (name || new Guid)\r\n    },\r\n    getTargetScreenFactor: function() {\r\n        return this._targetScreenFactor\r\n    }\r\n});\r\nregisterComponent(\"dxForm\", Form);\r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}