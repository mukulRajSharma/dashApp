{"ast":null,"code":"var _jsxFileName = \"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/side-navigation-menu/side-navigation-menu.js\";\nimport React, { useEffect, useRef, useCallback, useMemo } from 'react';\nimport TreeView from 'devextreme-react/tree-view';\nimport { navigation } from '../../app-navigation';\nimport { useNavigation } from '../../contexts/navigation';\nimport { useScreenSize } from '../../utils/media-query';\nimport './side-navigation-menu.scss';\nimport * as events from 'devextreme/events';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function (props) {\n  const {\n    children,\n    selectedItemChanged,\n    openMenu,\n    compactMode,\n    onMenuReady\n  } = props;\n  const {\n    isLarge\n  } = useScreenSize();\n\n  function normalizePath() {\n    return navigation.map(item => {\n      if (item.path && !/^\\//.test(item.path)) {\n        item.path = `/${item.path}`;\n      }\n\n      return { ...item,\n        expanded: isLarge\n      };\n    });\n  }\n\n  const items = useMemo(normalizePath, // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  const {\n    navigationData: {\n      currentPath\n    }\n  } = useNavigation();\n  const treeViewRef = useRef();\n  const wrapperRef = useRef();\n  const getWrapperRef = useCallback(element => {\n    const prevElement = wrapperRef.current;\n\n    if (prevElement) {\n      events.off(prevElement, 'dxclick');\n    }\n\n    wrapperRef.current = element;\n    events.on(element, 'dxclick', e => {\n      openMenu(e);\n    });\n  }, [openMenu]);\n  useEffect(() => {\n    const treeView = treeViewRef.current && treeViewRef.current.instance;\n\n    if (!treeView) {\n      return;\n    }\n\n    if (currentPath !== undefined) {\n      treeView.selectItem(currentPath);\n      treeView.expandItem(currentPath);\n    }\n\n    if (compactMode) {\n      treeView.collapseAll();\n    }\n  }, [currentPath, compactMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'dx-swatch-additional side-navigation-menu',\n    ref: getWrapperRef,\n    children: [children, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'menu-container',\n      children: /*#__PURE__*/_jsxDEV(TreeView, {\n        ref: treeViewRef,\n        items: items,\n        keyExpr: 'path',\n        selectionMode: 'single',\n        focusStateEnabled: false,\n        expandEvent: 'click',\n        onItemClick: selectedItemChanged,\n        onContentReady: onMenuReady,\n        width: '100%'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/side-navigation-menu/side-navigation-menu.js"],"names":["React","useEffect","useRef","useCallback","useMemo","TreeView","navigation","useNavigation","useScreenSize","events","props","children","selectedItemChanged","openMenu","compactMode","onMenuReady","isLarge","normalizePath","map","item","path","test","expanded","items","navigationData","currentPath","treeViewRef","wrapperRef","getWrapperRef","element","prevElement","current","off","on","e","treeView","instance","undefined","selectItem","expandItem","collapseAll"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useCallback, useMemo } from 'react';\nimport TreeView from 'devextreme-react/tree-view';\nimport { navigation } from '../../app-navigation';\nimport { useNavigation } from '../../contexts/navigation';\nimport { useScreenSize } from '../../utils/media-query';\nimport './side-navigation-menu.scss';\n\nimport * as events from 'devextreme/events';\n\nexport default function (props) {\n  const {\n    children,\n    selectedItemChanged,\n    openMenu,\n    compactMode,\n    onMenuReady\n  } = props;\n\n  const { isLarge } = useScreenSize();\n  function normalizePath () {    \n    return navigation.map((item) => {\n      if(item.path && !(/^\\//.test(item.path))){ \n        item.path = `/${item.path}`;\n      }\n      return {...item, expanded: isLarge}; \n    });\n  }\n\n  const items = useMemo(\n    normalizePath,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  const { navigationData: { currentPath } } = useNavigation();\n\n  const treeViewRef = useRef();\n  const wrapperRef = useRef();\n  const getWrapperRef = useCallback((element) => {\n    const prevElement = wrapperRef.current;\n    if (prevElement) {\n      events.off(prevElement, 'dxclick');\n    }\n\n    wrapperRef.current = element;\n    events.on(element, 'dxclick', e => {\n      openMenu(e);\n    });\n  }, [openMenu]);\n\n  useEffect(() => {\n    const treeView = treeViewRef.current && treeViewRef.current.instance;\n    if (!treeView) {\n      return;\n    }\n\n    if (currentPath !== undefined) {\n      treeView.selectItem(currentPath);\n      treeView.expandItem(currentPath);\n    }\n\n    if (compactMode) {\n      treeView.collapseAll();\n    }\n  }, [currentPath, compactMode]);\n\n  return (\n    <div\n      className={'dx-swatch-additional side-navigation-menu'}\n      ref={getWrapperRef}\n    >\n      {children}\n      <div className={'menu-container'}>\n        <TreeView\n          ref={treeViewRef}\n          items={items}\n          keyExpr={'path'}\n          selectionMode={'single'}\n          focusStateEnabled={false}\n          expandEvent={'click'}\n          onItemClick={selectedItemChanged}\n          onContentReady={onMenuReady}\n          width={'100%'}\n        />\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}