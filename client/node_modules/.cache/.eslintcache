[{"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/index.js":"1","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/App.js":"2","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/reportWebVitals.js":"3","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/polyfills.js":"4","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/Content.js":"5","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/UnauthenticatedContent.js":"6","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/contexts/navigation.js":"7","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/contexts/auth.js":"8","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/utils/media-query.js":"9","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/app-info.js":"10","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/app-routes.js":"11","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/api/auth.js":"12","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/index.js":"13","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/layouts/index.js":"14","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/utils/default-user.js":"15","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/pages/index.js":"16","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/footer/footer.js":"17","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/header/header.js":"18","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/reset-password-form/reset-password-form.js":"19","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/create-account-form/create-account-form.js":"20","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/login-form/login-form.js":"21","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/side-navigation-menu/side-navigation-menu.js":"22","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/change-password-form/change-password-form.js":"23","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/layouts/side-nav-outer-toolbar/side-nav-outer-toolbar.js":"24","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/layouts/single-card/single-card.js":"25","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/layouts/side-nav-inner-toolbar/side-nav-inner-toolbar.js":"26","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/pages/home/home.js":"27","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/pages/profile/profile.js":"28","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/pages/tasks/tasks.js":"29","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/app-navigation.js":"30","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/utils/patches.js":"31","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/user-panel/user-panel.js":"32"},{"size":522,"mtime":1628481506031,"results":"33","hashOfConfig":"34"},{"size":1092,"mtime":1628481506031,"results":"35","hashOfConfig":"34"},{"size":362,"mtime":1628481506035,"results":"36","hashOfConfig":"34"},{"size":70,"mtime":1628481506035,"results":"37","hashOfConfig":"34"},{"size":850,"mtime":1628481506031,"results":"38","hashOfConfig":"34"},{"size":1112,"mtime":1628481506031,"results":"39","hashOfConfig":"34"},{"size":805,"mtime":1628481506031,"results":"40","hashOfConfig":"34"},{"size":966,"mtime":1628481506031,"results":"41","hashOfConfig":"34"},{"size":1518,"mtime":1628481506039,"results":"42","hashOfConfig":"34"},{"size":39,"mtime":1628484162493,"results":"43","hashOfConfig":"34"},{"size":433,"mtime":1628481506031,"results":"44","hashOfConfig":"34"},{"size":1265,"mtime":1628481506031,"results":"45","hashOfConfig":"34"},{"size":536,"mtime":1628481506031,"results":"46","hashOfConfig":"34"},{"size":263,"mtime":1628481506031,"results":"47","hashOfConfig":"34"},{"size":143,"mtime":1628481951039,"results":"48","hashOfConfig":"34"},{"size":165,"mtime":1628481506035,"results":"49","hashOfConfig":"34"},{"size":141,"mtime":1628481506031,"results":"50","hashOfConfig":"34"},{"size":1262,"mtime":1628481506031,"results":"51","hashOfConfig":"34"},{"size":2306,"mtime":1628481506031,"results":"52","hashOfConfig":"34"},{"size":3294,"mtime":1628481506031,"results":"53","hashOfConfig":"34"},{"size":2968,"mtime":1628481506031,"results":"54","hashOfConfig":"34"},{"size":2190,"mtime":1628481506031,"results":"55","hashOfConfig":"34"},{"size":2507,"mtime":1628481506031,"results":"56","hashOfConfig":"34"},{"size":3529,"mtime":1628481506035,"results":"57","hashOfConfig":"34"},{"size":490,"mtime":1628481506035,"results":"58","hashOfConfig":"34"},{"size":4041,"mtime":1628481506031,"results":"59","hashOfConfig":"34"},{"size":4870,"mtime":1628487206808,"results":"60","hashOfConfig":"34"},{"size":1536,"mtime":1628481506035,"results":"61","hashOfConfig":"34"},{"size":4120,"mtime":1628487319765,"results":"62","hashOfConfig":"34"},{"size":343,"mtime":1628482230035,"results":"63","hashOfConfig":"34"},{"size":445,"mtime":1628481506039,"results":"64","hashOfConfig":"34"},{"size":1527,"mtime":1628481506031,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"ub9fzl",{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"68"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"68"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"68"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"68"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"68"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"68"},"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/index.js",[],["147","148"],"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/App.js",["149"],"import 'devextreme/dist/css/dx.common.css';\nimport './themes/generated/theme.base.css';\nimport './themes/generated/theme.additional.css';\nimport React from 'react';\nimport { HashRouter as Router } from 'react-router-dom';\nimport './dx-styles.scss';\nimport LoadPanel from 'devextreme-react/load-panel';\nimport { NavigationProvider } from './contexts/navigation';\nimport { AuthProvider, useAuth } from './contexts/auth';\nimport { useScreenSizeClass } from './utils/media-query';\nimport Content from './Content';\nimport UnauthenticatedContent from './UnauthenticatedContent';\n\nfunction App() {\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return <LoadPanel visible={true} />;\n  }\n\n  if (user) {\n    return <Content />;\n  }\n\n  return <UnauthenticatedContent />;\n}\n\nexport default function () {\n  const screenSizeClass = useScreenSizeClass();\n\n  return (\n    <Router>\n      <AuthProvider>\n        <NavigationProvider>\n          <div className={`app ${screenSizeClass}`}>\n            <App />\n          </div>\n        </NavigationProvider>\n      </AuthProvider>\n    </Router>\n  );\n}\n","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/reportWebVitals.js",[],"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/polyfills.js",[],"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/Content.js",["150"],"import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport appInfo from './app-info';\nimport routes from './app-routes';\nimport { SideNavOuterToolbar as SideNavBarLayout } from './layouts';\nimport { Footer } from './components';\n\nexport default function() {\n  return (\n    <SideNavBarLayout title={appInfo.title}>\n      <Switch>\n        {routes.map(({ path, component }) => (\n          <Route\n            exact\n            key={path}\n            path={path}\n            component={component}\n          />\n        ))}\n        <Redirect to={'/home'} />\n      </Switch>\n      <Footer>\n        Copyright © 2011-{new Date().getFullYear()} {appInfo.title} Inc.\n        <br />\n        All trademarks or registered trademarks are property of their\n        respective owners.\n      </Footer>\n    </SideNavBarLayout>\n  );\n}\n","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/UnauthenticatedContent.js",["151"],"import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { SingleCard } from './layouts';\nimport { LoginForm, ResetPasswordForm, ChangePasswordForm, CreateAccountForm } from './components';\n\nexport default function () {\n  return (\n    <Switch>\n      <Route exact path='/login' >\n        <SingleCard title=\"Sign In\">\n          <LoginForm />\n        </SingleCard>\n      </Route>\n      <Route exact path='/create-account' >\n        <SingleCard title=\"Sign Up\">\n          <CreateAccountForm />\n        </SingleCard>\n      </Route>\n      <Route exact path='/reset-password' >\n        <SingleCard\n          title=\"Reset Password\"\n          description=\"Please enter the email address that you used to register, and we will send you a link to reset your password via Email.\"\n        >\n          <ResetPasswordForm />\n        </SingleCard>\n      </Route>\n      <Route exact path='/change-password/:recoveryCode' >\n        <SingleCard title=\"Change Password\">\n          <ChangePasswordForm />\n        </SingleCard>\n      </Route>\n      <Redirect to={'/login'} />\n    </Switch>\n  );\n}\n","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/contexts/navigation.js",[],"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/contexts/auth.js",[],"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/utils/media-query.js",[],"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/app-info.js",["152"],"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/app-routes.js",[],"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/api/auth.js",[],"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/index.js",[],"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/layouts/index.js",[],"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/utils/default-user.js",["153"],"export default {\n  email: 'admin@cyamast.com',\n  avatarUrl: 'https://js.devexpress.com/Demos/WidgetsGallery/JSDemos/images/employees/06.png'\n}\n","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/pages/index.js",[],"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/footer/footer.js",["154"],"import React from 'react';\nimport './footer.scss';\n\nexport default ({ ...rest }) => {\n  return <footer className={'footer'} {...rest} />;\n};\n","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/header/header.js",["155"],"import React from 'react';\nimport Toolbar, { Item } from 'devextreme-react/toolbar';\nimport Button from 'devextreme-react/button';\nimport UserPanel from '../user-panel/user-panel';\nimport './header.scss';\nimport { Template } from 'devextreme-react/core/template';\n\nexport default ({ menuToggleEnabled, title, toggleMenu }) => (\n  <header className={'header-component'}>\n    <Toolbar className={'header-toolbar'}>\n      <Item\n        visible={menuToggleEnabled}\n        location={'before'}\n        widget={'dxButton'}\n        cssClass={'menu-button'}\n      >\n        <Button icon=\"menu\" stylingMode=\"text\" onClick={toggleMenu} />\n      </Item>\n      <Item\n        location={'before'}\n        cssClass={'header-title'}\n        text={title}\n        visible={!!title}\n      />\n      <Item\n        location={'after'}\n        locateInMenu={'auto'}\n        menuItemTemplate={'userPanelTemplate'}\n      >\n        <Button\n          className={'user-button authorization'}\n          width={210}\n          height={'100%'}\n          stylingMode={'text'}\n        >\n          <UserPanel menuMode={'context'} />\n        </Button>\n      </Item>\n      <Template name={'userPanelTemplate'}>\n        <UserPanel menuMode={'list'} />\n      </Template>\n    </Toolbar>\n  </header>\n);\n\n","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/reset-password-form/reset-password-form.js",["156"],"import React, { useState, useRef, useCallback } from 'react';\nimport { Link, useHistory } from \"react-router-dom\";\nimport Form, {\n  Item,\n  Label,\n  ButtonItem,\n  ButtonOptions,\n  RequiredRule,\n  EmailRule\n} from 'devextreme-react/form';\nimport LoadIndicator from 'devextreme-react/load-indicator';\nimport notify from 'devextreme/ui/notify';\nimport { resetPassword } from '../../api/auth';\nimport './reset-password-form.scss';\n\nconst notificationText = 'We\\'ve sent a link to reset your password. Check your inbox.';\n\nexport default function (props) {\n  const history = useHistory();\n  const [loading, setLoading] = useState(false);\n  const formData = useRef({});\n\n  const onSubmit = useCallback(async (e) => {\n    e.preventDefault();\n    const { email } = formData.current;\n    setLoading(true);\n\n    const result = await resetPassword(email);\n    setLoading(false);\n\n    if (result.isOk) {\n      history.push('/login');\n      notify(notificationText, 'success', 2500);\n    } else {\n      notify(result.message, 'error', 2000);\n    }\n  }, [history]);\n\n  return (\n    <form className={'reset-password-form'} onSubmit={onSubmit}>\n      <Form formData={formData.current} disabled={loading}>\n        <Item\n          dataField={'email'}\n          editorType={'dxTextBox'}\n          editorOptions={emailEditorOptions}\n        >\n          <RequiredRule message=\"Email is required\" />\n          <EmailRule message=\"Email is invalid\" />\n          <Label visible={false} />\n        </Item>\n        <ButtonItem>\n          <ButtonOptions\n            elementAttr={submitButtonAttributes}\n            width={'100%'}\n            type={'default'}\n            useSubmitBehavior={true}\n          >\n            <span className=\"dx-button-text\">\n              {\n                loading\n                  ? <LoadIndicator width={'24px'} height={'24px'} visible={true} />\n                  : 'Reset my password'\n              }\n            </span>\n          </ButtonOptions>\n        </ButtonItem>\n        <Item>\n          <div className={'login-link'}>\n            Return to <Link to={'/login'}>Sign In</Link>\n          </div>\n        </Item>\n      </Form>\n    </form>\n  );\n}\n\nconst emailEditorOptions = { stylingMode: 'filled', placeholder: 'Email', mode: 'email' };\nconst submitButtonAttributes = { class: 'submit-button' };\n","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/create-account-form/create-account-form.js",["157"],"import React, { useState, useRef, useCallback } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport Form, {\n  Item,\n  Label,\n  ButtonItem,\n  ButtonOptions,\n  RequiredRule,\n  CustomRule,\n  EmailRule\n} from 'devextreme-react/form';\nimport notify from 'devextreme/ui/notify';\nimport LoadIndicator from 'devextreme-react/load-indicator';\nimport { createAccount } from '../../api/auth';\nimport './create-account-form.scss';\n\nexport default function (props) {\n  const history = useHistory();\n  const [loading, setLoading] = useState(false);\n  const formData = useRef({});\n\n  const onSubmit = useCallback(async (e) => {\n    e.preventDefault();\n    const { email, password } = formData.current;\n    setLoading(true);\n\n    const result = await createAccount(email, password);\n    setLoading(false);\n\n    if (result.isOk) {\n      history.push('/login');\n    } else {\n      notify(result.message, 'error', 2000);\n    }\n  }, [history]);\n\n  const confirmPassword = useCallback(\n    ({ value }) => value === formData.current.password,\n    []\n  );\n\n  return (\n    <form className={'create-account-form'} onSubmit={onSubmit}>\n      <Form formData={formData.current} disabled={loading}>\n        <Item\n          dataField={'email'}\n          editorType={'dxTextBox'}\n          editorOptions={emailEditorOptions}\n        >\n          <RequiredRule message=\"Email is required\" />\n          <EmailRule message=\"Email is invalid\" />\n          <Label visible={false} />\n        </Item>\n        <Item\n          dataField={'password'}\n          editorType={'dxTextBox'}\n          editorOptions={passwordEditorOptions}\n        >\n          <RequiredRule message=\"Password is required\" />\n          <Label visible={false} />\n        </Item>\n        <Item\n          dataField={'confirmedPassword'}\n          editorType={'dxTextBox'}\n          editorOptions={confirmedPasswordEditorOptions}\n        >\n          <RequiredRule message=\"Password is required\" />\n          <CustomRule\n            message={'Passwords do not match'}\n            validationCallback={confirmPassword}\n          />\n          <Label visible={false} />\n        </Item>\n        <Item>\n          <div className='policy-info'>\n            By creating an account, you agree to the <Link to=\"#\">Terms of Service</Link> and <Link to=\"#\">Privacy Policy</Link>\n          </div>\n        </Item>\n        <ButtonItem>\n          <ButtonOptions\n            width={'100%'}\n            type={'default'}\n            useSubmitBehavior={true}\n          >\n            <span className=\"dx-button-text\">\n              {\n                loading\n                  ? <LoadIndicator width={'24px'} height={'24px'} visible={true} />\n                  : 'Create a new account'\n              }\n            </span>\n          </ButtonOptions>\n        </ButtonItem>\n        <Item>\n          <div className={'login-link'}>\n            Have an account? <Link to={'/login'}>Sign In</Link>\n          </div>\n        </Item>\n      </Form>\n    </form>\n  );\n}\n\nconst emailEditorOptions = { stylingMode: 'filled', placeholder: 'Email', mode: 'email' };\nconst passwordEditorOptions = { stylingMode: 'filled', placeholder: 'Password', mode: 'password' };\nconst confirmedPasswordEditorOptions = { stylingMode: 'filled', placeholder: 'Confirm Password', mode: 'password' };\n","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/login-form/login-form.js",["158"],"import React, { useState, useRef, useCallback } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport Form, {\n  Item,\n  Label,\n  ButtonItem,\n  ButtonOptions,\n  RequiredRule,\n  EmailRule\n} from 'devextreme-react/form';\nimport LoadIndicator from 'devextreme-react/load-indicator';\nimport notify from 'devextreme/ui/notify';\nimport { useAuth } from '../../contexts/auth';\n\nimport './login-form.scss';\n\nexport default function () {\n  const history = useHistory();\n  const { signIn } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const formData = useRef({});\n\n  const onSubmit = useCallback(async (e) => {\n    e.preventDefault();\n    const { email, password } = formData.current;\n    setLoading(true);\n\n    const result = await signIn(email, password);\n    if (!result.isOk) {\n      setLoading(false);\n      notify(result.message, 'error', 2000);\n    }\n  }, [signIn]);\n\n  const onCreateAccountClick = useCallback(() => {\n    history.push('/create-account');\n  }, [history]);\n\n  return (\n    <form className={'login-form'} onSubmit={onSubmit}>\n      <Form formData={formData.current} disabled={loading}>\n        <Item\n          dataField={'email'}\n          editorType={'dxTextBox'}\n          editorOptions={emailEditorOptions}\n        >\n          <RequiredRule message=\"Email is required\" />\n          <EmailRule message=\"Email is invalid\" />\n          <Label visible={false} />\n        </Item>\n        <Item\n          dataField={'password'}\n          editorType={'dxTextBox'}\n          editorOptions={passwordEditorOptions}\n        >\n          <RequiredRule message=\"Password is required\" />\n          <Label visible={false} />\n        </Item>\n        <Item\n          dataField={'rememberMe'}\n          editorType={'dxCheckBox'}\n          editorOptions={rememberMeEditorOptions}\n        >\n          <Label visible={false} />\n        </Item>\n        <ButtonItem>\n          <ButtonOptions\n            width={'100%'}\n            type={'default'}\n            useSubmitBehavior={true}\n          >\n            <span className=\"dx-button-text\">\n              {\n                loading\n                  ? <LoadIndicator width={'24px'} height={'24px'} visible={true} />\n                  : 'Sign In'\n              }\n            </span>\n          </ButtonOptions>\n        </ButtonItem>\n        <Item>\n          <div className={'link'}>\n            <Link to={'/reset-password'}>Forgot password?</Link>\n          </div>\n        </Item>\n        <ButtonItem>\n          <ButtonOptions\n            text={'Create an account'}\n            width={'100%'}\n            onClick={onCreateAccountClick}\n          />\n        </ButtonItem>\n      </Form>\n    </form>\n  );\n}\n\nconst emailEditorOptions = { stylingMode: 'filled', placeholder: 'Email', mode: 'email' };\nconst passwordEditorOptions = { stylingMode: 'filled', placeholder: 'Password', mode: 'password' };\nconst rememberMeEditorOptions = { text: 'Remember me', elementAttr: { class: 'form-text' } };\n","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/side-navigation-menu/side-navigation-menu.js",["159"],"import React, { useEffect, useRef, useCallback, useMemo } from 'react';\nimport TreeView from 'devextreme-react/tree-view';\nimport { navigation } from '../../app-navigation';\nimport { useNavigation } from '../../contexts/navigation';\nimport { useScreenSize } from '../../utils/media-query';\nimport './side-navigation-menu.scss';\n\nimport * as events from 'devextreme/events';\n\nexport default function (props) {\n  const {\n    children,\n    selectedItemChanged,\n    openMenu,\n    compactMode,\n    onMenuReady\n  } = props;\n\n  const { isLarge } = useScreenSize();\n  function normalizePath () {    \n    return navigation.map((item) => {\n      if(item.path && !(/^\\//.test(item.path))){ \n        item.path = `/${item.path}`;\n      }\n      return {...item, expanded: isLarge}; \n    });\n  }\n\n  const items = useMemo(\n    normalizePath,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  const { navigationData: { currentPath } } = useNavigation();\n\n  const treeViewRef = useRef();\n  const wrapperRef = useRef();\n  const getWrapperRef = useCallback((element) => {\n    const prevElement = wrapperRef.current;\n    if (prevElement) {\n      events.off(prevElement, 'dxclick');\n    }\n\n    wrapperRef.current = element;\n    events.on(element, 'dxclick', e => {\n      openMenu(e);\n    });\n  }, [openMenu]);\n\n  useEffect(() => {\n    const treeView = treeViewRef.current && treeViewRef.current.instance;\n    if (!treeView) {\n      return;\n    }\n\n    if (currentPath !== undefined) {\n      treeView.selectItem(currentPath);\n      treeView.expandItem(currentPath);\n    }\n\n    if (compactMode) {\n      treeView.collapseAll();\n    }\n  }, [currentPath, compactMode]);\n\n  return (\n    <div\n      className={'dx-swatch-additional side-navigation-menu'}\n      ref={getWrapperRef}\n    >\n      {children}\n      <div className={'menu-container'}>\n        <TreeView\n          ref={treeViewRef}\n          items={items}\n          keyExpr={'path'}\n          selectionMode={'single'}\n          focusStateEnabled={false}\n          expandEvent={'click'}\n          onItemClick={selectedItemChanged}\n          onContentReady={onMenuReady}\n          width={'100%'}\n        />\n      </div>\n    </div>\n  );\n}\n","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/change-password-form/change-password-form.js",["160"],"import React, { useState, useRef, useCallback } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport Form, {\n  Item,\n  Label,\n  ButtonItem,\n  ButtonOptions,\n  RequiredRule,\n  CustomRule,\n} from 'devextreme-react/form';\nimport LoadIndicator from 'devextreme-react/load-indicator';\nimport notify from 'devextreme/ui/notify';\nimport { changePassword } from '../../api/auth';\n\nexport default function (props) {\n  const history = useHistory();\n  const [loading, setLoading] = useState(false);\n  const formData = useRef({});\n  const { recoveryCode } = useParams();\n\n  const onSubmit = useCallback(async (e) => {\n    e.preventDefault();\n    const { password } = formData.current;\n    setLoading(true);\n\n    const result = await changePassword(password, recoveryCode);\n    setLoading(false);\n\n    if (result.isOk) {\n      history.push('/login');\n    } else {\n      notify(result.message, 'error', 2000);\n    }\n  }, [history, recoveryCode]);\n\n  const confirmPassword = useCallback(\n    ({ value }) => value === formData.current.password,\n    []\n  );\n\n  return (\n    <form onSubmit={onSubmit}>\n      <Form formData={formData.current} disabled={loading}>\n        <Item\n          dataField={'password'}\n          editorType={'dxTextBox'}\n          editorOptions={passwordEditorOptions}\n        >\n          <RequiredRule message=\"Password is required\" />\n          <Label visible={false} />\n        </Item>\n        <Item\n          dataField={'confirmedPassword'}\n          editorType={'dxTextBox'}\n          editorOptions={confirmedPasswordEditorOptions}\n        >\n          <RequiredRule message=\"Password is required\" />\n          <CustomRule\n            message={'Passwords do not match'}\n            validationCallback={confirmPassword}\n          />\n          <Label visible={false} />\n        </Item>\n        <ButtonItem>\n          <ButtonOptions\n            width={'100%'}\n            type={'default'}\n            useSubmitBehavior={true}\n          >\n            <span className=\"dx-button-text\">\n              {\n                loading\n                  ? <LoadIndicator width={'24px'} height={'24px'} visible={true} />\n                  : 'Continue'\n              }\n            </span>\n          </ButtonOptions>\n        </ButtonItem>\n      </Form>\n    </form>\n  );\n}\n\nconst passwordEditorOptions = { stylingMode: 'filled', placeholder: 'Password', mode: 'password' };\nconst confirmedPasswordEditorOptions = { stylingMode: 'filled', placeholder: 'Confirm Password', mode: 'password' };\n","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/layouts/side-nav-outer-toolbar/side-nav-outer-toolbar.js",["161"],"import Drawer from 'devextreme-react/drawer';\nimport ScrollView from 'devextreme-react/scroll-view';\nimport React, { useState, useCallback, useRef } from 'react';\nimport { useHistory } from 'react-router';\nimport { Header, SideNavigationMenu, Footer } from '../../components';\nimport './side-nav-outer-toolbar.scss';\nimport { useScreenSize } from '../../utils/media-query';\nimport { Template } from 'devextreme-react/core/template';\nimport { useMenuPatch } from '../../utils/patches';\n\nexport default function ({ title, children }) {\n  const scrollViewRef = useRef();\n  const history = useHistory();\n  const { isXSmall, isLarge } = useScreenSize();\n  const [patchCssClass, onMenuReady] = useMenuPatch();\n  const [menuStatus, setMenuStatus] = useState(\n    isLarge ? MenuStatus.Opened : MenuStatus.Closed\n  );\n\n  const toggleMenu = useCallback(({ event }) => {\n    setMenuStatus(\n      prevMenuStatus => prevMenuStatus === MenuStatus.Closed\n        ? MenuStatus.Opened\n        : MenuStatus.Closed\n    );\n    event.stopPropagation();\n  }, []);\n\n  const temporaryOpenMenu = useCallback(() => {\n    setMenuStatus(\n      prevMenuStatus => prevMenuStatus === MenuStatus.Closed\n        ? MenuStatus.TemporaryOpened\n        : prevMenuStatus\n    );\n  }, []);\n\n  const onOutsideClick = useCallback(() => {\n    setMenuStatus(\n      prevMenuStatus => prevMenuStatus !== MenuStatus.Closed && !isLarge\n        ? MenuStatus.Closed\n        : prevMenuStatus\n    );\n  }, [isLarge]);\n\n  const onNavigationChanged = useCallback(({ itemData: { path }, event, node }) => {\n    if (menuStatus === MenuStatus.Closed || !path || node.selected) {\n      event.preventDefault();\n      return;\n    }\n\n    history.push(path);\n    scrollViewRef.current.instance.scrollTo(0);\n\n    if (!isLarge || menuStatus === MenuStatus.TemporaryOpened) {\n      setMenuStatus(MenuStatus.Closed);\n      event.stopPropagation();\n    }\n  }, [history, menuStatus, isLarge]);\n\n  return (\n    <div className={'side-nav-outer-toolbar'}>\n      <Header\n        className={'layout-header'}\n        menuToggleEnabled\n        toggleMenu={toggleMenu}\n        title={title}\n      />\n      <Drawer\n        className={['drawer', patchCssClass].join(' ')}\n        position={'before'}\n        closeOnOutsideClick={onOutsideClick}\n        openedStateMode={isLarge ? 'shrink' : 'overlap'}\n        revealMode={isXSmall ? 'slide' : 'expand'}\n        minSize={isXSmall ? 0 : 60}\n        maxSize={250}\n        shading={isLarge ? false : true}\n        opened={menuStatus === MenuStatus.Closed ? false : true}\n        template={'menu'}\n      >\n        <div className={'container'}>\n          <ScrollView ref={scrollViewRef} className={'layout-body with-footer'}>\n            <div className={'content'}>\n              {React.Children.map(children, item => {\n                return item.type !== Footer && item;\n              })}\n            </div>\n            <div className={'content-block'}>\n              {React.Children.map(children, item => {\n                return item.type === Footer && item;\n              })}\n            </div>\n          </ScrollView>\n        </div>\n        <Template name={'menu'}>\n          <SideNavigationMenu\n            compactMode={menuStatus === MenuStatus.Closed}\n            selectedItemChanged={onNavigationChanged}\n            openMenu={temporaryOpenMenu}\n            onMenuReady={onMenuReady}\n          >\n          </SideNavigationMenu>\n        </Template>\n      </Drawer>\n    </div>\n  );\n}\n\nconst MenuStatus = {\n  Closed: 1,\n  Opened: 2,\n  TemporaryOpened: 3\n};\n","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/layouts/single-card/single-card.js",["162"],"import React from 'react';\nimport ScrollView from 'devextreme-react/scroll-view';\nimport './single-card.scss';\n\nexport default ({ title, description, children }) => (\n  <ScrollView height={'100%'} width={'100%'} className={'with-footer single-card'}>\n    <div className={'dx-card content'}>\n      <div className={'header'}>\n        <div className={'title'}>{title}</div>\n        <div className={'description'}>{description}</div>\n      </div>\n      {children}\n    </div>\n  </ScrollView>\n);\n","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/layouts/side-nav-inner-toolbar/side-nav-inner-toolbar.js",["163"],"import Button from 'devextreme-react/button';\nimport Drawer from 'devextreme-react/drawer';\nimport ScrollView from 'devextreme-react/scroll-view';\nimport Toolbar, { Item } from 'devextreme-react/toolbar';\nimport React, { useState, useCallback, useRef } from 'react';\nimport { useHistory } from 'react-router';\nimport { Header, SideNavigationMenu, Footer } from '../../components';\nimport './side-nav-inner-toolbar.scss';\nimport { useScreenSize } from '../../utils/media-query';\nimport { Template } from 'devextreme-react/core/template';\nimport { useMenuPatch } from '../../utils/patches';\n\nexport default function ({ title, children }) {\n  const scrollViewRef = useRef();\n  const history = useHistory();\n  const { isXSmall, isLarge } = useScreenSize();\n  const [patchCssClass, onMenuReady] = useMenuPatch();\n  const [menuStatus, setMenuStatus] = useState(\n    isLarge ? MenuStatus.Opened : MenuStatus.Closed\n  );\n\n  const toggleMenu = useCallback(({ event }) => {\n    setMenuStatus(\n      prevMenuStatus => prevMenuStatus === MenuStatus.Closed\n        ? MenuStatus.Opened\n        : MenuStatus.Closed\n    );\n    event.stopPropagation();\n  }, []);\n\n  const temporaryOpenMenu = useCallback(() => {\n    setMenuStatus(\n      prevMenuStatus => prevMenuStatus === MenuStatus.Closed\n        ? MenuStatus.TemporaryOpened\n        : prevMenuStatus\n    );\n  }, []);\n\n  const onOutsideClick = useCallback(() => {\n    setMenuStatus(\n      prevMenuStatus => prevMenuStatus !== MenuStatus.Closed && !isLarge\n        ? MenuStatus.Closed\n        : prevMenuStatus\n    );\n  }, [isLarge]);\n\n  const onNavigationChanged = useCallback(({ itemData: { path }, event, node }) => {\n    if (menuStatus === MenuStatus.Closed || !path || node.selected) {\n      event.preventDefault();\n      return;\n    }\n\n    history.push(path);\n    scrollViewRef.current.instance.scrollTo(0);\n\n    if (!isLarge || menuStatus === MenuStatus.TemporaryOpened) {\n      setMenuStatus(MenuStatus.Closed);\n      event.stopPropagation();\n    }\n  }, [history, menuStatus, isLarge]);\n\n  return (\n    <div className={'side-nav-inner-toolbar'}>\n      <Drawer\n        className={['drawer', patchCssClass].join(' ')}\n        position={'before'}\n        closeOnOutsideClick={onOutsideClick}\n        openedStateMode={isLarge ? 'shrink' : 'overlap'}\n        revealMode={isXSmall ? 'slide' : 'expand'}\n        minSize={isXSmall ? 0 : 60}\n        maxSize={250}\n        shading={isLarge ? false : true}\n        opened={menuStatus === MenuStatus.Closed ? false : true}\n        template={'menu'}\n      >\n        <div className={'container'}>\n          <Header\n            menuToggleEnabled={isXSmall}\n            toggleMenu={toggleMenu}\n          />\n          <ScrollView ref={scrollViewRef} className={'layout-body with-footer'}>\n            <div className={'content'}>\n              {React.Children.map(children, item => {\n                return item.type !== Footer && item;\n              })}\n            </div>\n            <div className={'content-block'}>\n              {React.Children.map(children, item => {\n                return item.type === Footer && item;\n              })}\n            </div>\n          </ScrollView>\n        </div>\n        <Template name={'menu'}>\n          <SideNavigationMenu\n            compactMode={menuStatus === MenuStatus.Closed}\n            selectedItemChanged={onNavigationChanged}\n            openMenu={temporaryOpenMenu}\n            onMenuReady={onMenuReady}\n          >\n            <Toolbar id={'navigation-header'}>\n              {\n                !isXSmall &&\n                <Item\n                  location={'before'}\n                  cssClass={'menu-button'}\n                >\n                  <Button icon=\"menu\" stylingMode=\"text\" onClick={toggleMenu} />\n                </Item>\n              }\n              <Item location={'before'} cssClass={'header-title'} text={title} />\n            </Toolbar>\n          </SideNavigationMenu>\n        </Template>\n      </Drawer>\n    </div>\n  );\n}\n\nconst MenuStatus = {\n  Closed: 1,\n  Opened: 2,\n  TemporaryOpened: 3\n};\n","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/pages/home/home.js",["164","165","166","167"],"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/pages/profile/profile.js",["168"],"import React, { useState } from 'react';\nimport './profile.scss';\nimport Form from 'devextreme-react/form';\n\nexport default () => {\n  const [notes, setNotes] = useState(\n    'Sandra is a CPA and has been our controller since 2008. She loves to interact with staff so if you`ve not met her, be certain to say hi.\\r\\n\\r\\nSandra has 2 daughters both of whom are accomplished gymnasts.'\n  );\n  const employee = {\n    ID: 7,\n    FirstName: 'Sandra',\n    LastName: 'Johnson',\n    Prefix: 'Mrs.',\n    Position: 'Controller',\n    Picture: 'images/employees/06.png',\n    BirthDate: new Date('1974/11/15'),\n    HireDate: new Date('2005/05/11'),\n    Notes: notes,\n    Address: '4600 N Virginia Rd.'\n  };\n\n  return (\n    <React.Fragment>\n      <h2 className={'content-block'}>Profile</h2>\n\n      <div className={'content-block dx-card responsive-paddings'}>\n        <div className={'form-avatar'}>\n          <img\n            alt={''}\n            src={`https://js.devexpress.com/Demos/WidgetsGallery/JSDemos/${\n              employee.Picture\n            }`}\n          />\n        </div>\n        <span>{notes}</span>\n      </div>\n\n      <div className={'content-block dx-card responsive-paddings'}>\n        <Form\n          id={'form'}\n          defaultFormData={employee}\n          onFieldDataChanged={e => e.dataField === 'Notes' && setNotes(e.value)}\n          labelLocation={'top'}\n          colCountByScreen={colCountByScreen}\n        />\n      </div>\n    </React.Fragment>\n  );\n};\n\nconst colCountByScreen = {\n  xs: 1,\n  sm: 2,\n  md: 3,\n  lg: 4\n};\n","/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/pages/tasks/tasks.js",[],"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/app-navigation.js",[],"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/utils/patches.js",[],"/home/mukulsharma/Desktop/CyAmast/PortIntel/dashApp/src/components/user-panel/user-panel.js",["169","170"],"import React, { useMemo } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport ContextMenu, { Position } from 'devextreme-react/context-menu';\nimport List from 'devextreme-react/list';\nimport { useAuth } from '../../contexts/auth';\nimport './user-panel.scss';\n\nexport default function ({ menuMode }) {\n  const { user, signOut } = useAuth();\n  const history = useHistory();\n\n  function navigateToProfile() {\n    history.push(\"/profile\");\n  }\n  const menuItems = useMemo(() => ([\n    {\n      text: 'Profile',\n      icon: 'user',\n      onClick: navigateToProfile\n    },\n    {\n      text: 'Logout',\n      icon: 'runner',\n      onClick: signOut\n    }\n  ]), [signOut]);\n\n  return (\n    <div className={'user-panel'}>\n      <div className={'user-info'}>\n        <div className={'image-container'}>\n          <div\n            style={{\n              background: `url(${user.avatarUrl}) no-repeat #fff`,\n              backgroundSize: 'cover'\n            }}\n            className={'user-image'} />\n        </div>\n        <div className={'user-name'}>{user.email}</div>\n      </div>\n\n      {menuMode === 'context' && (\n        <ContextMenu\n          items={menuItems}\n          target={'.user-button'}\n          showEvent={'dxclick'}\n          width={210}\n          cssClass={'user-menu'}\n        >\n          <Position my={'top center'} at={'bottom center'} />\n        </ContextMenu>\n      )}\n      {menuMode === 'list' && (\n        <List className={'dx-toolbar-menu-action'} items={menuItems} />\n      )}\n    </div>\n  );\n}\n",{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":28,"column":1,"nodeType":"177","endLine":42,"endColumn":2},{"ruleId":"175","severity":1,"message":"176","line":8,"column":1,"nodeType":"177","endLine":30,"endColumn":2},{"ruleId":"175","severity":1,"message":"176","line":6,"column":1,"nodeType":"177","endLine":35,"endColumn":2},{"ruleId":"175","severity":1,"message":"178","line":1,"column":1,"nodeType":"177","endLine":3,"endColumn":3},{"ruleId":"175","severity":1,"message":"178","line":1,"column":1,"nodeType":"177","endLine":4,"endColumn":2},{"ruleId":"175","severity":1,"message":"179","line":4,"column":1,"nodeType":"177","endLine":6,"endColumn":3},{"ruleId":"175","severity":1,"message":"179","line":8,"column":1,"nodeType":"177","endLine":44,"endColumn":3},{"ruleId":"175","severity":1,"message":"176","line":18,"column":1,"nodeType":"177","endLine":75,"endColumn":2},{"ruleId":"175","severity":1,"message":"176","line":17,"column":1,"nodeType":"177","endLine":102,"endColumn":2},{"ruleId":"175","severity":1,"message":"176","line":17,"column":1,"nodeType":"177","endLine":96,"endColumn":2},{"ruleId":"175","severity":1,"message":"176","line":10,"column":1,"nodeType":"177","endLine":88,"endColumn":2},{"ruleId":"175","severity":1,"message":"176","line":15,"column":1,"nodeType":"177","endLine":82,"endColumn":2},{"ruleId":"175","severity":1,"message":"176","line":11,"column":1,"nodeType":"177","endLine":106,"endColumn":2},{"ruleId":"175","severity":1,"message":"179","line":5,"column":1,"nodeType":"177","endLine":15,"endColumn":3},{"ruleId":"175","severity":1,"message":"176","line":13,"column":1,"nodeType":"177","endLine":118,"endColumn":2},{"ruleId":"180","severity":1,"message":"181","line":12,"column":3,"nodeType":"182","messageId":"183","endLine":12,"endColumn":15},{"ruleId":"180","severity":1,"message":"184","line":16,"column":8,"nodeType":"182","messageId":"183","endLine":16,"endColumn":22},{"ruleId":"180","severity":1,"message":"185","line":22,"column":10,"nodeType":"182","messageId":"183","endLine":22,"endColumn":16},{"ruleId":"180","severity":1,"message":"186","line":160,"column":9,"nodeType":"182","messageId":"183","endLine":160,"endColumn":10},{"ruleId":"175","severity":1,"message":"179","line":5,"column":1,"nodeType":"177","endLine":49,"endColumn":3},{"ruleId":"175","severity":1,"message":"176","line":8,"column":1,"nodeType":"177","endLine":58,"endColumn":2},{"ruleId":"187","severity":1,"message":"188","line":26,"column":7,"nodeType":"189","endLine":26,"endColumn":16,"suggestions":"190"},"no-native-reassign",["191"],"no-negated-in-lhs",["192"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","Assign arrow function to a variable before exporting as module default","no-unused-vars","'MasterDetail' is defined but never used.","Identifier","unusedVar","'DropDownButton' is defined but never used.","'TagBox' is defined but never used.","'c' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'navigateToProfile'. Either include it or remove the dependency array.","ArrayExpression",["193"],"no-global-assign","no-unsafe-negation",{"desc":"194","fix":"195"},"Update the dependencies array to be: [navigateToProfile, signOut]",{"range":"196","text":"197"},[667,676],"[navigateToProfile, signOut]"]